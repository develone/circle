
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea001f0d 	b	fc9c <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    806c:	e24ddc1e 	sub	sp, sp, #7680	; 0x1e00
    8070:	e24dd024 	sub	sp, sp, #36	; 0x24
    8074:	e1a0000d 	mov	r0, sp
    8078:	eb000009 	bl	80a4 <CKernel::CKernel()>
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb000063 	bl	8214 <CKernel::Initialize()>
    8084:	e3500000 	cmp	r0, #0
    8088:	0a000003 	beq	809c <main+0x34>
    808c:	e1a0000d 	mov	r0, sp
    8090:	eb000092 	bl	82e0 <CKernel::Run()>
    8094:	e3500002 	cmp	r0, #2
    8098:	0a000000 	beq	80a0 <main+0x38>
    809c:	eb001ee6 	bl	fc3c <halt>
    80a0:	eb001ee8 	bl	fc48 <reboot>

000080a4 <CKernel::CKernel()>:
    80a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80a8:	e1a04000 	mov	r4, r0
    80ac:	e24dd008 	sub	sp, sp, #8
    80b0:	e3a01000 	mov	r1, #0
    80b4:	e280600c 	add	r6, r0, #12
    80b8:	e2847e89 	add	r7, r4, #2192	; 0x890
    80bc:	eb0003c1 	bl	8fc8 <CActLED::CActLED(bool)>
    80c0:	e1a00006 	mov	r0, r6
    80c4:	eb0009d9 	bl	a830 <CKernelOptions::CKernelOptions()>
    80c8:	e2870004 	add	r0, r7, #4
    80cc:	eb0004aa 	bl	937c <CDeviceNameService::CDeviceNameService()>
    80d0:	e1a00006 	mov	r0, r6
    80d4:	eb000955 	bl	a630 <CKernelOptions::GetWidth() const>
    80d8:	e1a08000 	mov	r8, r0
    80dc:	e1a00006 	mov	r0, r6
    80e0:	eb000954 	bl	a638 <CKernelOptions::GetHeight() const>
    80e4:	e3a05000 	mov	r5, #0
    80e8:	e1a02000 	mov	r2, r0
    80ec:	e1a01008 	mov	r1, r8
    80f0:	e58d5000 	str	r5, [sp]
    80f4:	e1a03005 	mov	r3, r5
    80f8:	e287000c 	add	r0, r7, #12
    80fc:	eb000f46 	bl	be1c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
    8100:	e1a03005 	mov	r3, r5
    8104:	e1a02005 	mov	r2, r5
    8108:	e1a01005 	mov	r1, r5
    810c:	e2840e93 	add	r0, r4, #2352	; 0x930
    8110:	e2845c1a 	add	r5, r4, #6656	; 0x1a00
    8114:	eb0014c4 	bl	d42c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8118:	e2857020 	add	r7, r5, #32
    811c:	e285001c 	add	r0, r5, #28
    8120:	e2845d71 	add	r5, r4, #7232	; 0x1c40
    8124:	eb002715 	bl	11d80 <CExceptionHandler::CExceptionHandler()>
    8128:	e2855020 	add	r5, r5, #32
    812c:	e1a00007 	mov	r0, r7
    8130:	eb002953 	bl	12684 <CInterruptSystem::CInterruptSystem()>
    8134:	e1a01007 	mov	r1, r7
    8138:	e1a00005 	mov	r0, r5
    813c:	eb001f29 	bl	fde8 <CTimer::CTimer(CInterruptSystem*)>
    8140:	e1a00006 	mov	r0, r6
    8144:	eb000940 	bl	a64c <CKernelOptions::GetLogLevel() const>
    8148:	e1a01000 	mov	r1, r0
    814c:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    8150:	e1a02005 	mov	r2, r5
    8154:	e3a03001 	mov	r3, #1
    8158:	e2800020 	add	r0, r0, #32
    815c:	eb000adb 	bl	acd0 <CLogger::CLogger(unsigned int, CTimer*, bool)>
    8160:	e3a03e19 	mov	r3, #400	; 0x190
    8164:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    8168:	e58d3000 	str	r3, [sp]
    816c:	e3a0201b 	mov	r2, #27
    8170:	e3a03018 	mov	r3, #24
    8174:	e3a01011 	mov	r1, #17
    8178:	e280001c 	add	r0, r0, #28
    817c:	eb000075 	bl	8358 <CSWDLoader::CSWDLoader(unsigned int, unsigned int, unsigned int, unsigned int)>
    8180:	e1a00004 	mov	r0, r4
    8184:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8188:	e3a020c8 	mov	r2, #200	; 0xc8
    818c:	e3a01005 	mov	r1, #5
    8190:	eb0003d1 	bl	90dc <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8194:	e1a00004 	mov	r0, r4
    8198:	e28dd008 	add	sp, sp, #8
    819c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000081a0 <CKernel::~CKernel()>:
    81a0:	e92d4070 	push	{r4, r5, r6, lr}
    81a4:	e1a04000 	mov	r4, r0
    81a8:	e2800d76 	add	r0, r0, #7552	; 0x1d80
    81ac:	e280001c 	add	r0, r0, #28
    81b0:	eb000367 	bl	8f54 <CSWDLoader::~CSWDLoader()>
    81b4:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    81b8:	e2800020 	add	r0, r0, #32
    81bc:	eb000adb 	bl	ad30 <CLogger::~CLogger()>
    81c0:	e2840d71 	add	r0, r4, #7232	; 0x1c40
    81c4:	e2845c1a 	add	r5, r4, #6656	; 0x1a00
    81c8:	e2800020 	add	r0, r0, #32
    81cc:	eb001f27 	bl	fe70 <CTimer::~CTimer()>
    81d0:	e2850020 	add	r0, r5, #32
    81d4:	eb002937 	bl	126b8 <CInterruptSystem::~CInterruptSystem()>
    81d8:	e285001c 	add	r0, r5, #28
    81dc:	eb002709 	bl	11e08 <CExceptionHandler::~CExceptionHandler()>
    81e0:	e2845e89 	add	r5, r4, #2192	; 0x890
    81e4:	e2840e93 	add	r0, r4, #2352	; 0x930
    81e8:	eb001504 	bl	d600 <CSerialDevice::~CSerialDevice()>
    81ec:	e285000c 	add	r0, r5, #12
    81f0:	eb000f2e 	bl	beb0 <CScreenDevice::~CScreenDevice()>
    81f4:	e2850004 	add	r0, r5, #4
    81f8:	eb000470 	bl	93c0 <CDeviceNameService::~CDeviceNameService()>
    81fc:	e284000c 	add	r0, r4, #12
    8200:	eb000905 	bl	a61c <CKernelOptions::~CKernelOptions()>
    8204:	e1a00004 	mov	r0, r4
    8208:	eb000394 	bl	9060 <CActLED::~CActLED()>
    820c:	e1a00004 	mov	r0, r4
    8210:	e8bd8070 	pop	{r4, r5, r6, pc}

00008214 <CKernel::Initialize()>:
    8214:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8218:	e2806e89 	add	r6, r0, #2192	; 0x890
    821c:	e286500c 	add	r5, r6, #12
    8220:	e24dd00c 	sub	sp, sp, #12
    8224:	e1a04000 	mov	r4, r0
    8228:	e1a00005 	mov	r0, r5
    822c:	eb000f4d 	bl	bf68 <CScreenDevice::Initialize()>
    8230:	e3500000 	cmp	r0, #0
    8234:	1a000002 	bne	8244 <CKernel::Initialize()+0x30>
    8238:	e3a00000 	mov	r0, #0
    823c:	e28dd00c 	add	sp, sp, #12
    8240:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8244:	e3a07000 	mov	r7, #0
    8248:	e3a03001 	mov	r3, #1
    824c:	e58d7000 	str	r7, [sp]
    8250:	e3a02008 	mov	r2, #8
    8254:	e59f1080 	ldr	r1, [pc, #128]	; 82dc <CKernel::Initialize()+0xc8>
    8258:	e2840e93 	add	r0, r4, #2352	; 0x930
    825c:	eb001545 	bl	d778 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>
    8260:	e1500007 	cmp	r0, r7
    8264:	0afffff3 	beq	8238 <CKernel::Initialize()+0x24>
    8268:	e284000c 	add	r0, r4, #12
    826c:	eb0008f3 	bl	a640 <CKernelOptions::GetLogDevice() const>
    8270:	e1a02007 	mov	r2, r7
    8274:	e1a01000 	mov	r1, r0
    8278:	e2860004 	add	r0, r6, #4
    827c:	eb0004de 	bl	95fc <CDeviceNameService::GetDevice(char const*, bool)>
    8280:	e1500007 	cmp	r0, r7
    8284:	11a01000 	movne	r1, r0
    8288:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    828c:	01a01005 	moveq	r1, r5
    8290:	e2800020 	add	r0, r0, #32
    8294:	eb000ac1 	bl	ada0 <CLogger::Initialize(CDevice*)>
    8298:	e1500007 	cmp	r0, r7
    829c:	0affffe5 	beq	8238 <CKernel::Initialize()+0x24>
    82a0:	e2840c1a 	add	r0, r4, #6656	; 0x1a00
    82a4:	e2800020 	add	r0, r0, #32
    82a8:	eb002911 	bl	126f4 <CInterruptSystem::Initialize()>
    82ac:	e1500007 	cmp	r0, r7
    82b0:	0affffe0 	beq	8238 <CKernel::Initialize()+0x24>
    82b4:	e2840d71 	add	r0, r4, #7232	; 0x1c40
    82b8:	e2800020 	add	r0, r0, #32
    82bc:	eb0021a5 	bl	10958 <CTimer::Initialize()>
    82c0:	e1500007 	cmp	r0, r7
    82c4:	0affffdb 	beq	8238 <CKernel::Initialize()+0x24>
    82c8:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    82cc:	e280001c 	add	r0, r0, #28
    82d0:	e28dd00c 	add	sp, sp, #12
    82d4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    82d8:	ea0002c4 	b	8df0 <CSWDLoader::Initialize()>
    82dc:	0001c200 	.word	0x0001c200

000082e0 <CKernel::Run()>:
    82e0:	e92d4010 	push	{r4, lr}
    82e4:	e1a04000 	mov	r4, r0
    82e8:	eb000b7f 	bl	b0ec <CLogger::Get()>
    82ec:	e59f304c 	ldr	r3, [pc, #76]	; 8340 <CKernel::Run()+0x60>
    82f0:	e3a02003 	mov	r2, #3
    82f4:	e59f1048 	ldr	r1, [pc, #72]	; 8344 <CKernel::Run()+0x64>
    82f8:	eb000abd 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    82fc:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    8300:	e280001c 	add	r0, r0, #28
    8304:	e3a03202 	mov	r3, #536870912	; 0x20000000
    8308:	e59f2038 	ldr	r2, [pc, #56]	; 8348 <CKernel::Run()+0x68>
    830c:	e59f1038 	ldr	r1, [pc, #56]	; 834c <CKernel::Run()+0x6c>
    8310:	eb00026b 	bl	8cc4 <CSWDLoader::Load(void const*, unsigned int, unsigned int)>
    8314:	e2504000 	subs	r4, r0, #0
    8318:	0a000001 	beq	8324 <CKernel::Run()+0x44>
    831c:	e3a00001 	mov	r0, #1
    8320:	e8bd8010 	pop	{r4, pc}
    8324:	eb000b70 	bl	b0ec <CLogger::Get()>
    8328:	e1a02004 	mov	r2, r4
    832c:	e59f301c 	ldr	r3, [pc, #28]	; 8350 <CKernel::Run()+0x70>
    8330:	e59f100c 	ldr	r1, [pc, #12]	; 8344 <CKernel::Run()+0x64>
    8334:	eb000aae 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8338:	e3a00001 	mov	r0, #1
    833c:	e8bd8010 	pop	{r4, pc}
    8340:	00017214 	.word	0x00017214
    8344:	0001720c 	.word	0x0001720c
    8348:	00001ea8 	.word	0x00001ea8
    834c:	00015364 	.word	0x00015364
    8350:	00017238 	.word	0x00017238
    8354:	00000000 	.word	0x00000000

00008358 <CSWDLoader::CSWDLoader(unsigned int, unsigned int, unsigned int, unsigned int)>:
    8358:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    835c:	e1a04000 	mov	r4, r0
    8360:	e2930000 	adds	r0, r3, #0
    8364:	13a00001 	movne	r0, #1
    8368:	e1a06001 	mov	r6, r1
    836c:	e5840000 	str	r0, [r4]
    8370:	e59d1018 	ldr	r1, [sp, #24]
    8374:	e59f00a8 	ldr	r0, [pc, #168]	; 8424 <CSWDLoader::CSWDLoader(unsigned int, unsigned int, unsigned int, unsigned int)+0xcc>
    8378:	e1a07002 	mov	r7, r2
    837c:	e1a08003 	mov	r8, r3
    8380:	eb00324c 	bl	14cb8 <__udivsi3>
    8384:	e2845008 	add	r5, r4, #8
    8388:	e5840004 	str	r0, [r4, #4]
    838c:	e1a00005 	mov	r0, r5
    8390:	eb000572 	bl	9960 <CGPIOPin::CGPIOPin()>
    8394:	e1a01006 	mov	r1, r6
    8398:	e3a03000 	mov	r3, #0
    839c:	e3a02001 	mov	r2, #1
    83a0:	e2840030 	add	r0, r4, #48	; 0x30
    83a4:	e2846058 	add	r6, r4, #88	; 0x58
    83a8:	eb00057b 	bl	999c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    83ac:	e3a03000 	mov	r3, #0
    83b0:	e1a01007 	mov	r1, r7
    83b4:	e3a02001 	mov	r2, #1
    83b8:	e1a00006 	mov	r0, r6
    83bc:	eb000576 	bl	999c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    83c0:	eb0021ec 	bl	10b78 <CTimer::Get()>
    83c4:	e5943000 	ldr	r3, [r4]
    83c8:	e5840080 	str	r0, [r4, #128]	; 0x80
    83cc:	e3530000 	cmp	r3, #0
    83d0:	1a000004 	bne	83e8 <CSWDLoader::CSWDLoader(unsigned int, unsigned int, unsigned int, unsigned int)+0x90>
    83d4:	e1a00006 	mov	r0, r6
    83d8:	e3a01002 	mov	r1, #2
    83dc:	eb0007c9 	bl	a308 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    83e0:	e1a00004 	mov	r0, r4
    83e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    83e8:	e1a01008 	mov	r1, r8
    83ec:	e1a00005 	mov	r0, r5
    83f0:	eb000586 	bl	9a10 <CGPIOPin::AssignPin(unsigned int)>
    83f4:	e3a02000 	mov	r2, #0
    83f8:	e1a00005 	mov	r0, r5
    83fc:	e1a01002 	mov	r1, r2
    8400:	eb0005a3 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    8404:	e1a00005 	mov	r0, r5
    8408:	e3a01001 	mov	r1, #1
    840c:	eb00060a 	bl	9c3c <CGPIOPin::Write(unsigned int)>
    8410:	e1a00005 	mov	r0, r5
    8414:	e3a02000 	mov	r2, #0
    8418:	e3a01001 	mov	r1, #1
    841c:	eb00059c 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    8420:	eaffffeb 	b	83d4 <CSWDLoader::CSWDLoader(unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
    8424:	0007a120 	.word	0x0007a120

00008428 <CSWDLoader::WriteClock()>:
    8428:	e92d4070 	push	{r4, r5, r6, lr}
    842c:	e1a04000 	mov	r4, r0
    8430:	e2806030 	add	r6, r0, #48	; 0x30
    8434:	e1a00006 	mov	r0, r6
    8438:	e3a01000 	mov	r1, #0
    843c:	eb0005fe 	bl	9c3c <CGPIOPin::Write(unsigned int)>
    8440:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8444:	e5940004 	ldr	r0, [r4, #4]
    8448:	e5933024 	ldr	r3, [r3, #36]	; 0x24
    844c:	e59f5038 	ldr	r5, [pc, #56]	; 848c <CSWDLoader::WriteClock()+0x64>
    8450:	e0000390 	mul	r0, r0, r3
    8454:	e0803095 	umull	r3, r0, r5, r0
    8458:	e1a00320 	lsr	r0, r0, #6
    845c:	eb0003c1 	bl	9368 <DelayLoop>
    8460:	e1a00006 	mov	r0, r6
    8464:	e3a01001 	mov	r1, #1
    8468:	eb0005f3 	bl	9c3c <CGPIOPin::Write(unsigned int)>
    846c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8470:	e5940004 	ldr	r0, [r4, #4]
    8474:	e5933024 	ldr	r3, [r3, #36]	; 0x24
    8478:	e0000390 	mul	r0, r0, r3
    847c:	e0803095 	umull	r3, r0, r5, r0
    8480:	e8bd4070 	pop	{r4, r5, r6, lr}
    8484:	e1a00320 	lsr	r0, r0, #6
    8488:	ea0003b6 	b	9368 <DelayLoop>
    848c:	10624dd3 	.word	0x10624dd3

00008490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>:
    8490:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8494:	e1a04002 	mov	r4, r2
    8498:	e2806058 	add	r6, r0, #88	; 0x58
    849c:	e1a07000 	mov	r7, r0
    84a0:	e1a05001 	mov	r5, r1
    84a4:	e1a00006 	mov	r0, r6
    84a8:	e3a02000 	mov	r2, #0
    84ac:	e3a01001 	mov	r1, #1
    84b0:	eb000577 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    84b4:	e3540000 	cmp	r4, #0
    84b8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    84bc:	e2444001 	sub	r4, r4, #1
    84c0:	e2051001 	and	r1, r5, #1
    84c4:	e1a00006 	mov	r0, r6
    84c8:	eb0005db 	bl	9c3c <CGPIOPin::Write(unsigned int)>
    84cc:	e2444001 	sub	r4, r4, #1
    84d0:	e1a00007 	mov	r0, r7
    84d4:	ebffffd3 	bl	8428 <CSWDLoader::WriteClock()>
    84d8:	e3740001 	cmn	r4, #1
    84dc:	e1a050a5 	lsr	r5, r5, #1
    84e0:	1afffff6 	bne	84c0 <CSWDLoader::WriteBits(unsigned int, unsigned int)+0x30>
    84e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000084e8 <CSWDLoader::Dormant2SWD()>:
    84e8:	e92d4010 	push	{r4, lr}
    84ec:	e1a04000 	mov	r4, r0
    84f0:	e3a02008 	mov	r2, #8
    84f4:	e3a010ff 	mov	r1, #255	; 0xff
    84f8:	ebffffe4 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    84fc:	e1a00004 	mov	r0, r4
    8500:	e3a02020 	mov	r2, #32
    8504:	e59f1054 	ldr	r1, [pc, #84]	; 8560 <CSWDLoader::Dormant2SWD()+0x78>
    8508:	ebffffe0 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    850c:	e1a00004 	mov	r0, r4
    8510:	e3a02020 	mov	r2, #32
    8514:	e59f1048 	ldr	r1, [pc, #72]	; 8564 <CSWDLoader::Dormant2SWD()+0x7c>
    8518:	ebffffdc 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    851c:	e1a00004 	mov	r0, r4
    8520:	e3a02020 	mov	r2, #32
    8524:	e59f103c 	ldr	r1, [pc, #60]	; 8568 <CSWDLoader::Dormant2SWD()+0x80>
    8528:	ebffffd8 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    852c:	e1a00004 	mov	r0, r4
    8530:	e3a02020 	mov	r2, #32
    8534:	e59f1030 	ldr	r1, [pc, #48]	; 856c <CSWDLoader::Dormant2SWD()+0x84>
    8538:	ebffffd4 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    853c:	e1a00004 	mov	r0, r4
    8540:	e3a02004 	mov	r2, #4
    8544:	e3a01000 	mov	r1, #0
    8548:	ebffffd0 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    854c:	e1a00004 	mov	r0, r4
    8550:	e8bd4010 	pop	{r4, lr}
    8554:	e3a02008 	mov	r2, #8
    8558:	e3a0101a 	mov	r1, #26
    855c:	eaffffcb 	b	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    8560:	6209f392 	.word	0x6209f392
    8564:	86852d95 	.word	0x86852d95
    8568:	e3ddafe9 	.word	0xe3ddafe9
    856c:	19bc0ea2 	.word	0x19bc0ea2

00008570 <CSWDLoader::LineReset()>:
    8570:	e92d4010 	push	{r4, lr}
    8574:	e1a04000 	mov	r4, r0
    8578:	e3a02020 	mov	r2, #32
    857c:	e3e01000 	mvn	r1, #0
    8580:	ebffffc2 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    8584:	e1a00004 	mov	r0, r4
    8588:	e8bd4010 	pop	{r4, lr}
    858c:	e3a0201c 	mov	r2, #28
    8590:	e59f1000 	ldr	r1, [pc]	; 8598 <CSWDLoader::LineReset()+0x28>
    8594:	eaffffbd 	b	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    8598:	000fffff 	.word	0x000fffff

0000859c <CSWDLoader::WriteIdle()>:
    859c:	e92d4070 	push	{r4, r5, r6, lr}
    85a0:	e1a05000 	mov	r5, r0
    85a4:	e3a02008 	mov	r2, #8
    85a8:	e3a01000 	mov	r1, #0
    85ac:	ebffffb7 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    85b0:	e2854058 	add	r4, r5, #88	; 0x58
    85b4:	e2850030 	add	r0, r5, #48	; 0x30
    85b8:	e3a01000 	mov	r1, #0
    85bc:	eb00059e 	bl	9c3c <CGPIOPin::Write(unsigned int)>
    85c0:	e1a00004 	mov	r0, r4
    85c4:	e3a01001 	mov	r1, #1
    85c8:	e3a02000 	mov	r2, #0
    85cc:	eb000530 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    85d0:	e1a00004 	mov	r0, r4
    85d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    85d8:	e3a01000 	mov	r1, #0
    85dc:	ea000596 	b	9c3c <CGPIOPin::Write(unsigned int)>

000085e0 <CSWDLoader::BeginTransaction()>:
    85e0:	e92d4010 	push	{r4, lr}
    85e4:	e1a04000 	mov	r4, r0
    85e8:	e3a00001 	mov	r0, #1
    85ec:	eb0027cd 	bl	12528 <EnterCritical>
    85f0:	e1a00004 	mov	r0, r4
    85f4:	e8bd4010 	pop	{r4, lr}
    85f8:	eaffffe7 	b	859c <CSWDLoader::WriteIdle()>

000085fc <CSWDLoader::EndTransaction()>:
    85fc:	e92d4010 	push	{r4, lr}
    8600:	ebffffe5 	bl	859c <CSWDLoader::WriteIdle()>
    8604:	e8bd4010 	pop	{r4, lr}
    8608:	ea0027f0 	b	125d0 <LeaveCritical>

0000860c <CSWDLoader::ReadBits(unsigned int)>:
    860c:	e3a02000 	mov	r2, #0
    8610:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8614:	e1a06001 	mov	r6, r1
    8618:	e2807058 	add	r7, r0, #88	; 0x58
    861c:	e1a08000 	mov	r8, r0
    8620:	e1a01002 	mov	r1, r2
    8624:	e1a00007 	mov	r0, r7
    8628:	eb000519 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    862c:	e3560000 	cmp	r6, #0
    8630:	0a00000c 	beq	8668 <CSWDLoader::ReadBits(unsigned int)+0x5c>
    8634:	e2469001 	sub	r9, r6, #1
    8638:	e1a05009 	mov	r5, r9
    863c:	e3a06000 	mov	r6, #0
    8640:	e1a00007 	mov	r0, r7
    8644:	eb0005a1 	bl	9cd0 <CGPIOPin::Read() const>
    8648:	e1a04000 	mov	r4, r0
    864c:	e2455001 	sub	r5, r5, #1
    8650:	e1a00008 	mov	r0, r8
    8654:	ebffff73 	bl	8428 <CSWDLoader::WriteClock()>
    8658:	e1a04914 	lsl	r4, r4, r9
    865c:	e3750001 	cmn	r5, #1
    8660:	e18460a6 	orr	r6, r4, r6, lsr #1
    8664:	1afffff5 	bne	8640 <CSWDLoader::ReadBits(unsigned int)+0x34>
    8668:	e1a00006 	mov	r0, r6
    866c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00008670 <CSWDLoader::WriteData(unsigned char, unsigned int)>:
    8670:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8674:	e1a06001 	mov	r6, r1
    8678:	e24dd014 	sub	sp, sp, #20
    867c:	e1a07002 	mov	r7, r2
    8680:	e3a02007 	mov	r2, #7
    8684:	e1a04000 	mov	r4, r0
    8688:	ebffff80 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    868c:	e3160080 	tst	r6, #128	; 0x80
    8690:	0a000025 	beq	872c <CSWDLoader::WriteData(unsigned char, unsigned int)+0xbc>
    8694:	e3a01002 	mov	r1, #2
    8698:	e1a00004 	mov	r0, r4
    869c:	ebffffda 	bl	860c <CSWDLoader::ReadBits(unsigned int)>
    86a0:	e3a01003 	mov	r1, #3
    86a4:	e1a00004 	mov	r0, r4
    86a8:	ebffffd7 	bl	860c <CSWDLoader::ReadBits(unsigned int)>
    86ac:	e1a05000 	mov	r5, r0
    86b0:	e3a01001 	mov	r1, #1
    86b4:	e1a00004 	mov	r0, r4
    86b8:	ebffffd3 	bl	860c <CSWDLoader::ReadBits(unsigned int)>
    86bc:	e3550001 	cmp	r5, #1
    86c0:	1a00000c 	bne	86f8 <CSWDLoader::WriteData(unsigned char, unsigned int)+0x88>
    86c4:	e1a01007 	mov	r1, r7
    86c8:	e3a02020 	mov	r2, #32
    86cc:	e1a00004 	mov	r0, r4
    86d0:	ebffff6e 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    86d4:	e1a00007 	mov	r0, r7
    86d8:	eb0032ce 	bl	15218 <__paritysi2>
    86dc:	e1a02005 	mov	r2, r5
    86e0:	e1a01000 	mov	r1, r0
    86e4:	e1a00004 	mov	r0, r4
    86e8:	ebffff68 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    86ec:	e1a00005 	mov	r0, r5
    86f0:	e28dd014 	add	sp, sp, #20
    86f4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    86f8:	e1a00004 	mov	r0, r4
    86fc:	ebffffa6 	bl	859c <CSWDLoader::WriteIdle()>
    8700:	eb0027b2 	bl	125d0 <LeaveCritical>
    8704:	eb000a78 	bl	b0ec <CLogger::Get()>
    8708:	e58d5008 	str	r5, [sp, #8]
    870c:	e1cd60f0 	strd	r6, [sp]
    8710:	e59f3024 	ldr	r3, [pc, #36]	; 873c <CSWDLoader::WriteData(unsigned char, unsigned int)+0xcc>
    8714:	e3a02002 	mov	r2, #2
    8718:	e59f1020 	ldr	r1, [pc, #32]	; 8740 <CSWDLoader::WriteData(unsigned char, unsigned int)+0xd0>
    871c:	eb0009b4 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8720:	e3a00000 	mov	r0, #0
    8724:	e28dd014 	add	sp, sp, #20
    8728:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    872c:	e3a02e17 	mov	r2, #368	; 0x170
    8730:	e59f100c 	ldr	r1, [pc, #12]	; 8744 <CSWDLoader::WriteData(unsigned char, unsigned int)+0xd4>
    8734:	e59f000c 	ldr	r0, [pc, #12]	; 8748 <CSWDLoader::WriteData(unsigned char, unsigned int)+0xd8>
    8738:	eb00027e 	bl	9138 <assertion_failed>
    873c:	0001727c 	.word	0x0001727c
    8740:	00017250 	.word	0x00017250
    8744:	0001725c 	.word	0x0001725c
    8748:	0001726c 	.word	0x0001726c

0000874c <CSWDLoader::WriteMem(unsigned int, unsigned int)>:
    874c:	e92d4070 	push	{r4, r5, r6, lr}
    8750:	e1a05002 	mov	r5, r2
    8754:	e1a02001 	mov	r2, r1
    8758:	e3a0108b 	mov	r1, #139	; 0x8b
    875c:	e1a04000 	mov	r4, r0
    8760:	ebffffc2 	bl	8670 <CSWDLoader::WriteData(unsigned char, unsigned int)>
    8764:	e3500000 	cmp	r0, #0
    8768:	08bd8070 	popeq	{r4, r5, r6, pc}
    876c:	e1a02005 	mov	r2, r5
    8770:	e1a00004 	mov	r0, r4
    8774:	e8bd4070 	pop	{r4, r5, r6, lr}
    8778:	e3a010bb 	mov	r1, #187	; 0xbb
    877c:	eaffffbb 	b	8670 <CSWDLoader::WriteData(unsigned char, unsigned int)>

00008780 <CSWDLoader::Start(unsigned int)>:
    8780:	e92d4070 	push	{r4, r5, r6, lr}
    8784:	e1a04000 	mov	r4, r0
    8788:	e1a05001 	mov	r5, r1
    878c:	e3a00001 	mov	r0, #1
    8790:	eb002764 	bl	12528 <EnterCritical>
    8794:	e1a00004 	mov	r0, r4
    8798:	ebffff7f 	bl	859c <CSWDLoader::WriteIdle()>
    879c:	e1a02005 	mov	r2, r5
    87a0:	e1a00004 	mov	r0, r4
    87a4:	e59f106c 	ldr	r1, [pc, #108]	; 8818 <CSWDLoader::Start(unsigned int)+0x98>
    87a8:	ebffffe7 	bl	874c <CSWDLoader::WriteMem(unsigned int, unsigned int)>
    87ac:	e3500000 	cmp	r0, #0
    87b0:	0a000005 	beq	87cc <CSWDLoader::Start(unsigned int)+0x4c>
    87b4:	e59f2060 	ldr	r2, [pc, #96]	; 881c <CSWDLoader::Start(unsigned int)+0x9c>
    87b8:	e59f1060 	ldr	r1, [pc, #96]	; 8820 <CSWDLoader::Start(unsigned int)+0xa0>
    87bc:	e1a00004 	mov	r0, r4
    87c0:	ebffffe1 	bl	874c <CSWDLoader::WriteMem(unsigned int, unsigned int)>
    87c4:	e3500000 	cmp	r0, #0
    87c8:	1a000007 	bne	87ec <CSWDLoader::Start(unsigned int)+0x6c>
    87cc:	e3a05000 	mov	r5, #0
    87d0:	eb000a45 	bl	b0ec <CLogger::Get()>
    87d4:	e59f3048 	ldr	r3, [pc, #72]	; 8824 <CSWDLoader::Start(unsigned int)+0xa4>
    87d8:	e3a02001 	mov	r2, #1
    87dc:	e59f1044 	ldr	r1, [pc, #68]	; 8828 <CSWDLoader::Start(unsigned int)+0xa8>
    87e0:	eb000983 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    87e4:	e1a00005 	mov	r0, r5
    87e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    87ec:	e59f2038 	ldr	r2, [pc, #56]	; 882c <CSWDLoader::Start(unsigned int)+0xac>
    87f0:	e59f1038 	ldr	r1, [pc, #56]	; 8830 <CSWDLoader::Start(unsigned int)+0xb0>
    87f4:	e1a00004 	mov	r0, r4
    87f8:	ebffffd3 	bl	874c <CSWDLoader::WriteMem(unsigned int, unsigned int)>
    87fc:	e2505000 	subs	r5, r0, #0
    8800:	0afffff1 	beq	87cc <CSWDLoader::Start(unsigned int)+0x4c>
    8804:	e1a00004 	mov	r0, r4
    8808:	ebffff63 	bl	859c <CSWDLoader::WriteIdle()>
    880c:	eb00276f 	bl	125d0 <LeaveCritical>
    8810:	e1a00005 	mov	r0, r5
    8814:	e8bd8070 	pop	{r4, r5, r6, pc}
    8818:	e000edf8 	.word	0xe000edf8
    881c:	0001000f 	.word	0x0001000f
    8820:	e000edf4 	.word	0xe000edf4
    8824:	000172ac 	.word	0x000172ac
    8828:	00017250 	.word	0x00017250
    882c:	a05f0001 	.word	0xa05f0001
    8830:	e000edf0 	.word	0xe000edf0

00008834 <CSWDLoader::Halt()>:
    8834:	e92d4070 	push	{r4, r5, r6, lr}
    8838:	e1a04000 	mov	r4, r0
    883c:	e3a00001 	mov	r0, #1
    8840:	eb002738 	bl	12528 <EnterCritical>
    8844:	e1a00004 	mov	r0, r4
    8848:	ebffff53 	bl	859c <CSWDLoader::WriteIdle()>
    884c:	e1a00004 	mov	r0, r4
    8850:	e59f2058 	ldr	r2, [pc, #88]	; 88b0 <CSWDLoader::Halt()+0x7c>
    8854:	e3a010a3 	mov	r1, #163	; 0xa3
    8858:	ebffff84 	bl	8670 <CSWDLoader::WriteData(unsigned char, unsigned int)>
    885c:	e3500000 	cmp	r0, #0
    8860:	0a000005 	beq	887c <CSWDLoader::Halt()+0x48>
    8864:	e59f2048 	ldr	r2, [pc, #72]	; 88b4 <CSWDLoader::Halt()+0x80>
    8868:	e59f1048 	ldr	r1, [pc, #72]	; 88b8 <CSWDLoader::Halt()+0x84>
    886c:	e1a00004 	mov	r0, r4
    8870:	ebffffb5 	bl	874c <CSWDLoader::WriteMem(unsigned int, unsigned int)>
    8874:	e2505000 	subs	r5, r0, #0
    8878:	1a000007 	bne	889c <CSWDLoader::Halt()+0x68>
    887c:	e3a05000 	mov	r5, #0
    8880:	eb000a19 	bl	b0ec <CLogger::Get()>
    8884:	e59f3030 	ldr	r3, [pc, #48]	; 88bc <CSWDLoader::Halt()+0x88>
    8888:	e3a02001 	mov	r2, #1
    888c:	e59f102c 	ldr	r1, [pc, #44]	; 88c0 <CSWDLoader::Halt()+0x8c>
    8890:	eb000957 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8894:	e1a00005 	mov	r0, r5
    8898:	e8bd8070 	pop	{r4, r5, r6, pc}
    889c:	e1a00004 	mov	r0, r4
    88a0:	ebffff3d 	bl	859c <CSWDLoader::WriteIdle()>
    88a4:	eb002749 	bl	125d0 <LeaveCritical>
    88a8:	e1a00005 	mov	r0, r5
    88ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    88b0:	a2000052 	.word	0xa2000052
    88b4:	a05f0003 	.word	0xa05f0003
    88b8:	e000edf0 	.word	0xe000edf0
    88bc:	000172c0 	.word	0x000172c0
    88c0:	00017250 	.word	0x00017250

000088c4 <CSWDLoader::ReadData(unsigned char, unsigned int*)>:
    88c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    88c8:	e1a06001 	mov	r6, r1
    88cc:	e24dd00c 	sub	sp, sp, #12
    88d0:	e1a07002 	mov	r7, r2
    88d4:	e3a02007 	mov	r2, #7
    88d8:	e1a04000 	mov	r4, r0
    88dc:	ebfffeeb 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    88e0:	e3160080 	tst	r6, #128	; 0x80
    88e4:	0a00003c 	beq	89dc <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x118>
    88e8:	e3a01002 	mov	r1, #2
    88ec:	e1a00004 	mov	r0, r4
    88f0:	ebffff45 	bl	860c <CSWDLoader::ReadBits(unsigned int)>
    88f4:	e3a01003 	mov	r1, #3
    88f8:	e1a00004 	mov	r0, r4
    88fc:	ebffff42 	bl	860c <CSWDLoader::ReadBits(unsigned int)>
    8900:	e3500001 	cmp	r0, #1
    8904:	e1a05000 	mov	r5, r0
    8908:	1a000014 	bne	8960 <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x9c>
    890c:	e3a01020 	mov	r1, #32
    8910:	e1a00004 	mov	r0, r4
    8914:	ebffff3c 	bl	860c <CSWDLoader::ReadBits(unsigned int)>
    8918:	e1a01005 	mov	r1, r5
    891c:	e1a08000 	mov	r8, r0
    8920:	e1a00004 	mov	r0, r4
    8924:	ebffff38 	bl	860c <CSWDLoader::ReadBits(unsigned int)>
    8928:	e1a09000 	mov	r9, r0
    892c:	e1a00008 	mov	r0, r8
    8930:	eb003238 	bl	15218 <__paritysi2>
    8934:	e1500009 	cmp	r0, r9
    8938:	1a000018 	bne	89a0 <CSWDLoader::ReadData(unsigned char, unsigned int*)+0xdc>
    893c:	e3570000 	cmp	r7, #0
    8940:	0a000029 	beq	89ec <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x128>
    8944:	e5878000 	str	r8, [r7]
    8948:	e1a00004 	mov	r0, r4
    894c:	e1a01005 	mov	r1, r5
    8950:	ebffff2d 	bl	860c <CSWDLoader::ReadBits(unsigned int)>
    8954:	e1a00005 	mov	r0, r5
    8958:	e28dd00c 	add	sp, sp, #12
    895c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    8960:	e3a01001 	mov	r1, #1
    8964:	e1a00004 	mov	r0, r4
    8968:	ebffff27 	bl	860c <CSWDLoader::ReadBits(unsigned int)>
    896c:	e1a00004 	mov	r0, r4
    8970:	ebffff09 	bl	859c <CSWDLoader::WriteIdle()>
    8974:	eb002715 	bl	125d0 <LeaveCritical>
    8978:	eb0009db 	bl	b0ec <CLogger::Get()>
    897c:	e58d5004 	str	r5, [sp, #4]
    8980:	e58d6000 	str	r6, [sp]
    8984:	e59f3070 	ldr	r3, [pc, #112]	; 89fc <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x138>
    8988:	e3a02002 	mov	r2, #2
    898c:	e59f106c 	ldr	r1, [pc, #108]	; 8a00 <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x13c>
    8990:	eb000917 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8994:	e3a00000 	mov	r0, #0
    8998:	e28dd00c 	add	sp, sp, #12
    899c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    89a0:	e1a01005 	mov	r1, r5
    89a4:	e1a00004 	mov	r0, r4
    89a8:	ebffff17 	bl	860c <CSWDLoader::ReadBits(unsigned int)>
    89ac:	e1a00004 	mov	r0, r4
    89b0:	ebfffef9 	bl	859c <CSWDLoader::WriteIdle()>
    89b4:	eb002705 	bl	125d0 <LeaveCritical>
    89b8:	eb0009cb 	bl	b0ec <CLogger::Get()>
    89bc:	e58d6000 	str	r6, [sp]
    89c0:	e59f303c 	ldr	r3, [pc, #60]	; 8a04 <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x140>
    89c4:	e3a02002 	mov	r2, #2
    89c8:	e59f1030 	ldr	r1, [pc, #48]	; 8a00 <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x13c>
    89cc:	eb000908 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    89d0:	e3a00000 	mov	r0, #0
    89d4:	e28dd00c 	add	sp, sp, #12
    89d8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    89dc:	e59f2024 	ldr	r2, [pc, #36]	; 8a08 <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x144>
    89e0:	e59f1024 	ldr	r1, [pc, #36]	; 8a0c <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x148>
    89e4:	e59f0024 	ldr	r0, [pc, #36]	; 8a10 <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x14c>
    89e8:	eb0001d2 	bl	9138 <assertion_failed>
    89ec:	e59f2020 	ldr	r2, [pc, #32]	; 8a14 <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x150>
    89f0:	e59f1014 	ldr	r1, [pc, #20]	; 8a0c <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x148>
    89f4:	e59f001c 	ldr	r0, [pc, #28]	; 8a18 <CSWDLoader::ReadData(unsigned char, unsigned int*)+0x154>
    89f8:	eb0001ce 	bl	9138 <assertion_failed>
    89fc:	000172d4 	.word	0x000172d4
    8a00:	00017250 	.word	0x00017250
    8a04:	000172f8 	.word	0x000172f8
    8a08:	0000018b 	.word	0x0000018b
    8a0c:	0001725c 	.word	0x0001725c
    8a10:	0001726c 	.word	0x0001726c
    8a14:	000001a9 	.word	0x000001a9
    8a18:	00017314 	.word	0x00017314

00008a1c <CSWDLoader::PowerOn()>:
    8a1c:	e92d4010 	push	{r4, lr}
    8a20:	e3a0201e 	mov	r2, #30
    8a24:	e24dd008 	sub	sp, sp, #8
    8a28:	e3a01081 	mov	r1, #129	; 0x81
    8a2c:	e1a04000 	mov	r4, r0
    8a30:	ebffff0e 	bl	8670 <CSWDLoader::WriteData(unsigned char, unsigned int)>
    8a34:	e3500000 	cmp	r0, #0
    8a38:	1a000002 	bne	8a48 <CSWDLoader::PowerOn()+0x2c>
    8a3c:	e3a00000 	mov	r0, #0
    8a40:	e28dd008 	add	sp, sp, #8
    8a44:	e8bd8010 	pop	{r4, pc}
    8a48:	e3a02000 	mov	r2, #0
    8a4c:	e3a010b1 	mov	r1, #177	; 0xb1
    8a50:	e1a00004 	mov	r0, r4
    8a54:	ebffff05 	bl	8670 <CSWDLoader::WriteData(unsigned char, unsigned int)>
    8a58:	e3500000 	cmp	r0, #0
    8a5c:	0afffff6 	beq	8a3c <CSWDLoader::PowerOn()+0x20>
    8a60:	e59f204c 	ldr	r2, [pc, #76]	; 8ab4 <CSWDLoader::PowerOn()+0x98>
    8a64:	e3a010a9 	mov	r1, #169	; 0xa9
    8a68:	e1a00004 	mov	r0, r4
    8a6c:	ebfffeff 	bl	8670 <CSWDLoader::WriteData(unsigned char, unsigned int)>
    8a70:	e3500000 	cmp	r0, #0
    8a74:	0afffff0 	beq	8a3c <CSWDLoader::PowerOn()+0x20>
    8a78:	e28d2004 	add	r2, sp, #4
    8a7c:	e3a0108d 	mov	r1, #141	; 0x8d
    8a80:	e1a00004 	mov	r0, r4
    8a84:	ebffff8e 	bl	88c4 <CSWDLoader::ReadData(unsigned char, unsigned int*)>
    8a88:	e3500000 	cmp	r0, #0
    8a8c:	0affffeb 	beq	8a40 <CSWDLoader::PowerOn()+0x24>
    8a90:	e59d3004 	ldr	r3, [sp, #4]
    8a94:	e3130202 	tst	r3, #536870912	; 0x20000000
    8a98:	0a000001 	beq	8aa4 <CSWDLoader::PowerOn()+0x88>
    8a9c:	e3530000 	cmp	r3, #0
    8aa0:	baffffe6 	blt	8a40 <CSWDLoader::PowerOn()+0x24>
    8aa4:	e1a00004 	mov	r0, r4
    8aa8:	ebfffebb 	bl	859c <CSWDLoader::WriteIdle()>
    8aac:	eb0026c7 	bl	125d0 <LeaveCritical>
    8ab0:	eaffffe1 	b	8a3c <CSWDLoader::PowerOn()+0x20>
    8ab4:	50000021 	.word	0x50000021

00008ab8 <CSWDLoader::ReadMem(unsigned int, unsigned int*)>:
    8ab8:	e92d4070 	push	{r4, r5, r6, lr}
    8abc:	e1a05002 	mov	r5, r2
    8ac0:	e1a02001 	mov	r2, r1
    8ac4:	e3a0108b 	mov	r1, #139	; 0x8b
    8ac8:	e1a04000 	mov	r4, r0
    8acc:	ebfffee7 	bl	8670 <CSWDLoader::WriteData(unsigned char, unsigned int)>
    8ad0:	e3500000 	cmp	r0, #0
    8ad4:	1a000001 	bne	8ae0 <CSWDLoader::ReadMem(unsigned int, unsigned int*)+0x28>
    8ad8:	e3a00000 	mov	r0, #0
    8adc:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ae0:	e1a02005 	mov	r2, r5
    8ae4:	e3a0109f 	mov	r1, #159	; 0x9f
    8ae8:	e1a00004 	mov	r0, r4
    8aec:	ebffff74 	bl	88c4 <CSWDLoader::ReadData(unsigned char, unsigned int*)>
    8af0:	e3500000 	cmp	r0, #0
    8af4:	0afffff7 	beq	8ad8 <CSWDLoader::ReadMem(unsigned int, unsigned int*)+0x20>
    8af8:	e1a02005 	mov	r2, r5
    8afc:	e1a00004 	mov	r0, r4
    8b00:	e8bd4070 	pop	{r4, r5, r6, lr}
    8b04:	e3a010bd 	mov	r1, #189	; 0xbd
    8b08:	eaffff6d 	b	88c4 <CSWDLoader::ReadData(unsigned char, unsigned int*)>

00008b0c <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)>:
    8b0c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b10:	e2514000 	subs	r4, r1, #0
    8b14:	e24dd014 	sub	sp, sp, #20
    8b18:	0a00002d 	beq	8bd4 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0xc8>
    8b1c:	e3120003 	tst	r2, #3
    8b20:	e1a05002 	mov	r5, r2
    8b24:	e594b000 	ldr	fp, [r4]
    8b28:	1a00002d 	bne	8be4 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0xd8>
    8b2c:	e3520000 	cmp	r2, #0
    8b30:	e1a06000 	mov	r6, r0
    8b34:	e1a0a003 	mov	sl, r3
    8b38:	0a000030 	beq	8c00 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0xf4>
    8b3c:	e1a09003 	mov	r9, r3
    8b40:	e3a00001 	mov	r0, #1
    8b44:	eb002677 	bl	12528 <EnterCritical>
    8b48:	e1a00006 	mov	r0, r6
    8b4c:	ebfffe92 	bl	859c <CSWDLoader::WriteIdle()>
    8b50:	e1a02009 	mov	r2, r9
    8b54:	e3a0108b 	mov	r1, #139	; 0x8b
    8b58:	e1a00006 	mov	r0, r6
    8b5c:	ebfffec3 	bl	8670 <CSWDLoader::WriteData(unsigned char, unsigned int)>
    8b60:	e2507000 	subs	r7, r0, #0
    8b64:	0a000040 	beq	8c6c <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x160>
    8b68:	e2848b01 	add	r8, r4, #1024	; 0x400
    8b6c:	ea000004 	b	8b84 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x78>
    8b70:	e3550004 	cmp	r5, #4
    8b74:	9a00001e 	bls	8bf4 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0xe8>
    8b78:	e1540008 	cmp	r4, r8
    8b7c:	e2455004 	sub	r5, r5, #4
    8b80:	0a00000e 	beq	8bc0 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0xb4>
    8b84:	e4942004 	ldr	r2, [r4], #4
    8b88:	e3a010bb 	mov	r1, #187	; 0xbb
    8b8c:	e1a00006 	mov	r0, r6
    8b90:	ebfffeb6 	bl	8670 <CSWDLoader::WriteData(unsigned char, unsigned int)>
    8b94:	e2507000 	subs	r7, r0, #0
    8b98:	1afffff4 	bne	8b70 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x64>
    8b9c:	eb000952 	bl	b0ec <CLogger::Get()>
    8ba0:	e58d9000 	str	r9, [sp]
    8ba4:	e59f30f8 	ldr	r3, [pc, #248]	; 8ca4 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x198>
    8ba8:	e3a02001 	mov	r2, #1
    8bac:	e59f10f4 	ldr	r1, [pc, #244]	; 8ca8 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x19c>
    8bb0:	eb00088f 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8bb4:	e1a00007 	mov	r0, r7
    8bb8:	e28dd014 	add	sp, sp, #20
    8bbc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bc0:	e1a00006 	mov	r0, r6
    8bc4:	e2899b01 	add	r9, r9, #1024	; 0x400
    8bc8:	ebfffe73 	bl	859c <CSWDLoader::WriteIdle()>
    8bcc:	eb00267f 	bl	125d0 <LeaveCritical>
    8bd0:	eaffffda 	b	8b40 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x34>
    8bd4:	e3a020e4 	mov	r2, #228	; 0xe4
    8bd8:	e59f10cc 	ldr	r1, [pc, #204]	; 8cac <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x1a0>
    8bdc:	e59f00cc 	ldr	r0, [pc, #204]	; 8cb0 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x1a4>
    8be0:	eb000154 	bl	9138 <assertion_failed>
    8be4:	e3a020e9 	mov	r2, #233	; 0xe9
    8be8:	e59f10bc 	ldr	r1, [pc, #188]	; 8cac <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x1a0>
    8bec:	e59f00c0 	ldr	r0, [pc, #192]	; 8cb4 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x1a8>
    8bf0:	eb000150 	bl	9138 <assertion_failed>
    8bf4:	e1a00006 	mov	r0, r6
    8bf8:	ebfffe67 	bl	859c <CSWDLoader::WriteIdle()>
    8bfc:	eb002673 	bl	125d0 <LeaveCritical>
    8c00:	e3a00001 	mov	r0, #1
    8c04:	eb002647 	bl	12528 <EnterCritical>
    8c08:	e1a00006 	mov	r0, r6
    8c0c:	ebfffe62 	bl	859c <CSWDLoader::WriteIdle()>
    8c10:	e28d200c 	add	r2, sp, #12
    8c14:	e1a0100a 	mov	r1, sl
    8c18:	e1a00006 	mov	r0, r6
    8c1c:	ebffffa5 	bl	8ab8 <CSWDLoader::ReadMem(unsigned int, unsigned int*)>
    8c20:	e3500000 	cmp	r0, #0
    8c24:	0a000017 	beq	8c88 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x17c>
    8c28:	e1a00006 	mov	r0, r6
    8c2c:	ebfffe5a 	bl	859c <CSWDLoader::WriteIdle()>
    8c30:	eb002666 	bl	125d0 <LeaveCritical>
    8c34:	e59d300c 	ldr	r3, [sp, #12]
    8c38:	e153000b 	cmp	r3, fp
    8c3c:	03a07001 	moveq	r7, #1
    8c40:	0affffdb 	beq	8bb4 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0xa8>
    8c44:	eb000928 	bl	b0ec <CLogger::Get()>
    8c48:	e59d300c 	ldr	r3, [sp, #12]
    8c4c:	e58db000 	str	fp, [sp]
    8c50:	e58d3004 	str	r3, [sp, #4]
    8c54:	e3a02001 	mov	r2, #1
    8c58:	e59f3058 	ldr	r3, [pc, #88]	; 8cb8 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x1ac>
    8c5c:	e59f1044 	ldr	r1, [pc, #68]	; 8ca8 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x19c>
    8c60:	eb000863 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8c64:	e3a07000 	mov	r7, #0
    8c68:	eaffffd1 	b	8bb4 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0xa8>
    8c6c:	eb00091e 	bl	b0ec <CLogger::Get()>
    8c70:	e58d9000 	str	r9, [sp]
    8c74:	e59f3040 	ldr	r3, [pc, #64]	; 8cbc <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x1b0>
    8c78:	e3a02001 	mov	r2, #1
    8c7c:	e59f1024 	ldr	r1, [pc, #36]	; 8ca8 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x19c>
    8c80:	eb00085b 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8c84:	eaffffca 	b	8bb4 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0xa8>
    8c88:	eb000917 	bl	b0ec <CLogger::Get()>
    8c8c:	e58da000 	str	sl, [sp]
    8c90:	e59f3028 	ldr	r3, [pc, #40]	; 8cc0 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x1b4>
    8c94:	e3a02001 	mov	r2, #1
    8c98:	e59f1008 	ldr	r1, [pc, #8]	; 8ca8 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x19c>
    8c9c:	eb000854 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8ca0:	eaffffe0 	b	8c28 <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)+0x11c>
    8ca4:	00017360 	.word	0x00017360
    8ca8:	00017250 	.word	0x00017250
    8cac:	0001725c 	.word	0x0001725c
    8cb0:	00017320 	.word	0x00017320
    8cb4:	00017330 	.word	0x00017330
    8cb8:	00017398 	.word	0x00017398
    8cbc:	00017348 	.word	0x00017348
    8cc0:	0001737c 	.word	0x0001737c

00008cc4 <CSWDLoader::Load(void const*, unsigned int, unsigned int)>:
    8cc4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8cc8:	ed2d8b02 	vpush	{d8}
    8ccc:	e24dd018 	sub	sp, sp, #24
    8cd0:	e1a08001 	mov	r8, r1
    8cd4:	e1a04002 	mov	r4, r2
    8cd8:	e1a06003 	mov	r6, r3
    8cdc:	e1a05000 	mov	r5, r0
    8ce0:	ebfffed3 	bl	8834 <CSWDLoader::Halt()>
    8ce4:	e3500000 	cmp	r0, #0
    8ce8:	1a000003 	bne	8cfc <CSWDLoader::Load(void const*, unsigned int, unsigned int)+0x38>
    8cec:	e3a00000 	mov	r0, #0
    8cf0:	e28dd018 	add	sp, sp, #24
    8cf4:	ecbd8b02 	vpop	{d8}
    8cf8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8cfc:	eb001cc8 	bl	10024 <CTimer::GetClockTicks()>
    8d00:	e1a03006 	mov	r3, r6
    8d04:	e1a07000 	mov	r7, r0
    8d08:	e1a02004 	mov	r2, r4
    8d0c:	e1a01008 	mov	r1, r8
    8d10:	e1a00005 	mov	r0, r5
    8d14:	ebffff7c 	bl	8b0c <CSWDLoader::LoadChunk(void const*, unsigned int, unsigned int)>
    8d18:	e3500000 	cmp	r0, #0
    8d1c:	0afffff2 	beq	8cec <CSWDLoader::Load(void const*, unsigned int, unsigned int)+0x28>
    8d20:	eb001cbf 	bl	10024 <CTimer::GetClockTicks()>
    8d24:	e0400007 	sub	r0, r0, r7
    8d28:	ee070a90 	vmov	s15, r0
    8d2c:	ed9f6b15 	vldr	d6, [pc, #84]	; 8d88 <CSWDLoader::Load(void const*, unsigned int, unsigned int)+0xc4>
    8d30:	eeb87b67 	vcvt.f64.u32	d7, s15
    8d34:	ee878b06 	vdiv.f64	d8, d7, d6
    8d38:	eb0008eb 	bl	b0ec <CLogger::Get()>
    8d3c:	ee074a90 	vmov	s15, r4
    8d40:	eeb85b67 	vcvt.f64.u32	d5, s15
    8d44:	ed9f6b11 	vldr	d6, [pc, #68]	; 8d90 <CSWDLoader::Load(void const*, unsigned int, unsigned int)+0xcc>
    8d48:	ee857b08 	vdiv.f64	d7, d5, d8
    8d4c:	ee277b06 	vmul.f64	d7, d7, d6
    8d50:	ed8d8b02 	vstr	d8, [sp, #8]
    8d54:	e58d4000 	str	r4, [sp]
    8d58:	ed8d7b04 	vstr	d7, [sp, #16]
    8d5c:	e59f3034 	ldr	r3, [pc, #52]	; 8d98 <CSWDLoader::Load(void const*, unsigned int, unsigned int)+0xd4>
    8d60:	e3a02003 	mov	r2, #3
    8d64:	e59f1030 	ldr	r1, [pc, #48]	; 8d9c <CSWDLoader::Load(void const*, unsigned int, unsigned int)+0xd8>
    8d68:	eb000821 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8d6c:	e1a01006 	mov	r1, r6
    8d70:	e1a00005 	mov	r0, r5
    8d74:	e28dd018 	add	sp, sp, #24
    8d78:	ecbd8b02 	vpop	{d8}
    8d7c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8d80:	eafffe7e 	b	8780 <CSWDLoader::Start(unsigned int)>
    8d84:	e320f000 	nop	{0}
    8d88:	00000000 	.word	0x00000000
    8d8c:	412e8480 	.word	0x412e8480
    8d90:	00000000 	.word	0x00000000
    8d94:	3f500000 	.word	0x3f500000
    8d98:	000173b8 	.word	0x000173b8
    8d9c:	00017250 	.word	0x00017250

00008da0 <CSWDLoader::SelectTarget(unsigned int, unsigned char)>:
    8da0:	e92d4070 	push	{r4, r5, r6, lr}
    8da4:	e1a04000 	mov	r4, r0
    8da8:	e1815e02 	orr	r5, r1, r2, lsl #28
    8dac:	e3a02007 	mov	r2, #7
    8db0:	e3a01099 	mov	r1, #153	; 0x99
    8db4:	ebfffdb5 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    8db8:	e1a00004 	mov	r0, r4
    8dbc:	e3a01006 	mov	r1, #6
    8dc0:	ebfffe11 	bl	860c <CSWDLoader::ReadBits(unsigned int)>
    8dc4:	e1a01005 	mov	r1, r5
    8dc8:	e1a00004 	mov	r0, r4
    8dcc:	e3a02020 	mov	r2, #32
    8dd0:	ebfffdae 	bl	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>
    8dd4:	e1a00005 	mov	r0, r5
    8dd8:	eb00310e 	bl	15218 <__paritysi2>
    8ddc:	e3a02001 	mov	r2, #1
    8de0:	e1a01000 	mov	r1, r0
    8de4:	e1a00004 	mov	r0, r4
    8de8:	e8bd4070 	pop	{r4, r5, r6, lr}
    8dec:	eafffda7 	b	8490 <CSWDLoader::WriteBits(unsigned int, unsigned int)>

00008df0 <CSWDLoader::Initialize()>:
    8df0:	e92d4030 	push	{r4, r5, lr}
    8df4:	e5903000 	ldr	r3, [r0]
    8df8:	e24dd014 	sub	sp, sp, #20
    8dfc:	e3530000 	cmp	r3, #0
    8e00:	e1a04000 	mov	r4, r0
    8e04:	1a00002e 	bne	8ec4 <CSWDLoader::Initialize()+0xd4>
    8e08:	e3a00001 	mov	r0, #1
    8e0c:	eb0025c5 	bl	12528 <EnterCritical>
    8e10:	e1a00004 	mov	r0, r4
    8e14:	ebfffde0 	bl	859c <CSWDLoader::WriteIdle()>
    8e18:	e1a00004 	mov	r0, r4
    8e1c:	ebfffdb1 	bl	84e8 <CSWDLoader::Dormant2SWD()>
    8e20:	e1a00004 	mov	r0, r4
    8e24:	ebfffddc 	bl	859c <CSWDLoader::WriteIdle()>
    8e28:	e1a00004 	mov	r0, r4
    8e2c:	ebfffdcf 	bl	8570 <CSWDLoader::LineReset()>
    8e30:	e3a02000 	mov	r2, #0
    8e34:	e59f1100 	ldr	r1, [pc, #256]	; 8f3c <CSWDLoader::Initialize()+0x14c>
    8e38:	e1a00004 	mov	r0, r4
    8e3c:	ebffffd7 	bl	8da0 <CSWDLoader::SelectTarget(unsigned int, unsigned char)>
    8e40:	e28d200c 	add	r2, sp, #12
    8e44:	e3a010a5 	mov	r1, #165	; 0xa5
    8e48:	e1a00004 	mov	r0, r4
    8e4c:	ebfffe9c 	bl	88c4 <CSWDLoader::ReadData(unsigned char, unsigned int*)>
    8e50:	e2505000 	subs	r5, r0, #0
    8e54:	0a000028 	beq	8efc <CSWDLoader::Initialize()+0x10c>
    8e58:	e59f30e0 	ldr	r3, [pc, #224]	; 8f40 <CSWDLoader::Initialize()+0x150>
    8e5c:	e59d200c 	ldr	r2, [sp, #12]
    8e60:	e1a00004 	mov	r0, r4
    8e64:	e1520003 	cmp	r2, r3
    8e68:	1a000008 	bne	8e90 <CSWDLoader::Initialize()+0xa0>
    8e6c:	ebfffeea 	bl	8a1c <CSWDLoader::PowerOn()>
    8e70:	e2505000 	subs	r5, r0, #0
    8e74:	0a000028 	beq	8f1c <CSWDLoader::Initialize()+0x12c>
    8e78:	e1a00004 	mov	r0, r4
    8e7c:	ebfffdc6 	bl	859c <CSWDLoader::WriteIdle()>
    8e80:	eb0025d2 	bl	125d0 <LeaveCritical>
    8e84:	e1a00005 	mov	r0, r5
    8e88:	e28dd014 	add	sp, sp, #20
    8e8c:	e8bd8030 	pop	{r4, r5, pc}
    8e90:	e3a05000 	mov	r5, #0
    8e94:	ebfffdc0 	bl	859c <CSWDLoader::WriteIdle()>
    8e98:	eb0025cc 	bl	125d0 <LeaveCritical>
    8e9c:	eb000892 	bl	b0ec <CLogger::Get()>
    8ea0:	e59d200c 	ldr	r2, [sp, #12]
    8ea4:	e59f3098 	ldr	r3, [pc, #152]	; 8f44 <CSWDLoader::Initialize()+0x154>
    8ea8:	e58d2000 	str	r2, [sp]
    8eac:	e59f1094 	ldr	r1, [pc, #148]	; 8f48 <CSWDLoader::Initialize()+0x158>
    8eb0:	e3a02001 	mov	r2, #1
    8eb4:	eb0007ce 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8eb8:	e1a00005 	mov	r0, r5
    8ebc:	e28dd014 	add	sp, sp, #20
    8ec0:	e8bd8030 	pop	{r4, r5, pc}
    8ec4:	e2845008 	add	r5, r4, #8
    8ec8:	e3a0000a 	mov	r0, #10
    8ecc:	eb001ef0 	bl	10a94 <CTimer::SimpleMsDelay(unsigned int)>
    8ed0:	e1a00005 	mov	r0, r5
    8ed4:	e3a01000 	mov	r1, #0
    8ed8:	eb000357 	bl	9c3c <CGPIOPin::Write(unsigned int)>
    8edc:	e3a0000a 	mov	r0, #10
    8ee0:	eb001eeb 	bl	10a94 <CTimer::SimpleMsDelay(unsigned int)>
    8ee4:	e1a00005 	mov	r0, r5
    8ee8:	e3a01001 	mov	r1, #1
    8eec:	eb000352 	bl	9c3c <CGPIOPin::Write(unsigned int)>
    8ef0:	e3a0000a 	mov	r0, #10
    8ef4:	eb001ee6 	bl	10a94 <CTimer::SimpleMsDelay(unsigned int)>
    8ef8:	eaffffc2 	b	8e08 <CSWDLoader::Initialize()+0x18>
    8efc:	eb00087a 	bl	b0ec <CLogger::Get()>
    8f00:	e59f3044 	ldr	r3, [pc, #68]	; 8f4c <CSWDLoader::Initialize()+0x15c>
    8f04:	e3a02001 	mov	r2, #1
    8f08:	e59f1038 	ldr	r1, [pc, #56]	; 8f48 <CSWDLoader::Initialize()+0x158>
    8f0c:	eb0007b8 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8f10:	e1a00005 	mov	r0, r5
    8f14:	e28dd014 	add	sp, sp, #20
    8f18:	e8bd8030 	pop	{r4, r5, pc}
    8f1c:	eb000872 	bl	b0ec <CLogger::Get()>
    8f20:	e59f3028 	ldr	r3, [pc, #40]	; 8f50 <CSWDLoader::Initialize()+0x160>
    8f24:	e3a02001 	mov	r2, #1
    8f28:	e59f1018 	ldr	r1, [pc, #24]	; 8f48 <CSWDLoader::Initialize()+0x158>
    8f2c:	eb0007b0 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8f30:	e1a00005 	mov	r0, r5
    8f34:	e28dd014 	add	sp, sp, #20
    8f38:	e8bd8030 	pop	{r4, r5, pc}
    8f3c:	01002927 	.word	0x01002927
    8f40:	0bc12477 	.word	0x0bc12477
    8f44:	00017400 	.word	0x00017400
    8f48:	00017250 	.word	0x00017250
    8f4c:	000173e8 	.word	0x000173e8
    8f50:	0001742c 	.word	0x0001742c

00008f54 <CSWDLoader::~CSWDLoader()>:
    8f54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8f58:	e1a04000 	mov	r4, r0
    8f5c:	e1a05000 	mov	r5, r0
    8f60:	e2807058 	add	r7, r0, #88	; 0x58
    8f64:	e1a00007 	mov	r0, r7
    8f68:	e3a02001 	mov	r2, #1
    8f6c:	e3a01000 	mov	r1, #0
    8f70:	e2846030 	add	r6, r4, #48	; 0x30
    8f74:	eb0002c6 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    8f78:	e1a00006 	mov	r0, r6
    8f7c:	e3a02001 	mov	r2, #1
    8f80:	e3a01000 	mov	r1, #0
    8f84:	eb0002c2 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    8f88:	e4953008 	ldr	r3, [r5], #8
    8f8c:	e3530000 	cmp	r3, #0
    8f90:	1a000007 	bne	8fb4 <CSWDLoader::~CSWDLoader()+0x60>
    8f94:	e1a00007 	mov	r0, r7
    8f98:	eb000295 	bl	99f4 <CGPIOPin::~CGPIOPin()>
    8f9c:	e1a00006 	mov	r0, r6
    8fa0:	eb000293 	bl	99f4 <CGPIOPin::~CGPIOPin()>
    8fa4:	e1a00005 	mov	r0, r5
    8fa8:	eb000291 	bl	99f4 <CGPIOPin::~CGPIOPin()>
    8fac:	e1a00004 	mov	r0, r4
    8fb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8fb4:	e3a02001 	mov	r2, #1
    8fb8:	e3a01000 	mov	r1, #0
    8fbc:	e1a00005 	mov	r0, r5
    8fc0:	eb0002b3 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    8fc4:	eafffff2 	b	8f94 <CSWDLoader::~CSWDLoader()+0x40>

00008fc8 <CActLED::CActLED(bool)>:
    8fc8:	e3a03000 	mov	r3, #0
    8fcc:	e59f2088 	ldr	r2, [pc, #136]	; 905c <CActLED::CActLED(bool)+0x94>
    8fd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8fd4:	e5803000 	str	r3, [r0]
    8fd8:	e5803004 	str	r3, [r0, #4]
    8fdc:	e1a07001 	mov	r7, r1
    8fe0:	e5820000 	str	r0, [r2]
    8fe4:	e1a05000 	mov	r5, r0
    8fe8:	eb000b7f 	bl	bdec <CMachineInfo::Get()>
    8fec:	eb000a90 	bl	ba34 <CMachineInfo::GetActLEDInfo() const>
    8ff0:	e2106080 	ands	r6, r0, #128	; 0x80
    8ff4:	e1a04000 	mov	r4, r0
    8ff8:	0a00000e 	beq	9038 <CActLED::CActLED(bool)+0x70>
    8ffc:	e3a00014 	mov	r0, #20
    9000:	eb002230 	bl	118c8 <operator new(unsigned int)>
    9004:	e1a06000 	mov	r6, r0
    9008:	e1a02007 	mov	r2, r7
    900c:	e204103f 	and	r1, r4, #63	; 0x3f
    9010:	eb002136 	bl	114f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
    9014:	e5856004 	str	r6, [r5, #4]
    9018:	e1a04324 	lsr	r4, r4, #6
    901c:	e2244001 	eor	r4, r4, #1
    9020:	e2044001 	and	r4, r4, #1
    9024:	e1a00005 	mov	r0, r5
    9028:	e5c54008 	strb	r4, [r5, #8]
    902c:	eb00001c 	bl	90a4 <CActLED::Off()>
    9030:	e1a00005 	mov	r0, r5
    9034:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9038:	e3a00028 	mov	r0, #40	; 0x28
    903c:	eb002221 	bl	118c8 <operator new(unsigned int)>
    9040:	e1a07000 	mov	r7, r0
    9044:	e1a03006 	mov	r3, r6
    9048:	e3a02001 	mov	r2, #1
    904c:	e204103f 	and	r1, r4, #63	; 0x3f
    9050:	eb000251 	bl	999c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    9054:	e5857000 	str	r7, [r5]
    9058:	eaffffee 	b	9018 <CActLED::CActLED(bool)+0x50>
    905c:	00019b40 	.word	0x00019b40

00009060 <CActLED::~CActLED()>:
    9060:	e3a02000 	mov	r2, #0
    9064:	e59f3004 	ldr	r3, [pc, #4]	; 9070 <CActLED::~CActLED()+0x10>
    9068:	e5832000 	str	r2, [r3]
    906c:	e12fff1e 	bx	lr
    9070:	00019b40 	.word	0x00019b40

00009074 <CActLED::On()>:
    9074:	e5903000 	ldr	r3, [r0]
    9078:	e3530000 	cmp	r3, #0
    907c:	0a000002 	beq	908c <CActLED::On()+0x18>
    9080:	e5d01008 	ldrb	r1, [r0, #8]
    9084:	e1a00003 	mov	r0, r3
    9088:	ea0002eb 	b	9c3c <CGPIOPin::Write(unsigned int)>
    908c:	e5903004 	ldr	r3, [r0, #4]
    9090:	e3530000 	cmp	r3, #0
    9094:	012fff1e 	bxeq	lr
    9098:	e5d01008 	ldrb	r1, [r0, #8]
    909c:	e1a00003 	mov	r0, r3
    90a0:	ea00216e 	b	11660 <CVirtualGPIOPin::Write(unsigned int)>

000090a4 <CActLED::Off()>:
    90a4:	e5903000 	ldr	r3, [r0]
    90a8:	e3530000 	cmp	r3, #0
    90ac:	0a000003 	beq	90c0 <CActLED::Off()+0x1c>
    90b0:	e5d01008 	ldrb	r1, [r0, #8]
    90b4:	e1a00003 	mov	r0, r3
    90b8:	e2211001 	eor	r1, r1, #1
    90bc:	ea0002de 	b	9c3c <CGPIOPin::Write(unsigned int)>
    90c0:	e5903004 	ldr	r3, [r0, #4]
    90c4:	e3530000 	cmp	r3, #0
    90c8:	012fff1e 	bxeq	lr
    90cc:	e5d01008 	ldrb	r1, [r0, #8]
    90d0:	e1a00003 	mov	r0, r3
    90d4:	e2211001 	eor	r1, r1, #1
    90d8:	ea002160 	b	11660 <CVirtualGPIOPin::Write(unsigned int)>

000090dc <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    90dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    90e0:	e2516000 	subs	r6, r1, #0
    90e4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    90e8:	e1a08003 	mov	r8, r3
    90ec:	e1a07002 	mov	r7, r2
    90f0:	e1a05000 	mov	r5, r0
    90f4:	e3a04001 	mov	r4, #1
    90f8:	e1a00005 	mov	r0, r5
    90fc:	ebffffdc 	bl	9074 <CActLED::On()>
    9100:	e1a00007 	mov	r0, r7
    9104:	eb001e62 	bl	10a94 <CTimer::SimpleMsDelay(unsigned int)>
    9108:	e1a00005 	mov	r0, r5
    910c:	ebffffe4 	bl	90a4 <CActLED::Off()>
    9110:	e2844001 	add	r4, r4, #1
    9114:	e1a00008 	mov	r0, r8
    9118:	eb001e5d 	bl	10a94 <CTimer::SimpleMsDelay(unsigned int)>
    911c:	e1560004 	cmp	r6, r4
    9120:	2afffff4 	bcs	90f8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
    9124:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009128 <CActLED::Get()>:
    9128:	e59f3004 	ldr	r3, [pc, #4]	; 9134 <CActLED::Get()+0xc>
    912c:	e5930000 	ldr	r0, [r3]
    9130:	e12fff1e 	bx	lr
    9134:	00019b40 	.word	0x00019b40

00009138 <assertion_failed>:
    9138:	e92d4080 	push	{r7, lr}
    913c:	e1a05000 	mov	r5, r0
    9140:	e24dd018 	sub	sp, sp, #24
    9144:	e1a06001 	mov	r6, r1
    9148:	e1a07002 	mov	r7, r2
    914c:	e1a0400d 	mov	r4, sp
    9150:	eb002651 	bl	12a9c <CInterruptSystem::DisableFIQ()>
    9154:	f1080040 	cpsie	f
    9158:	e28d0008 	add	r0, sp, #8
    915c:	eb0014f6 	bl	e53c <CString::CString()>
    9160:	e1a03007 	mov	r3, r7
    9164:	e1a02006 	mov	r2, r6
    9168:	e59f1044 	ldr	r1, [pc, #68]	; 91b4 <assertion_failed+0x7c>
    916c:	e28d0008 	add	r0, sp, #8
    9170:	eb001a9d 	bl	fbec <CString::Format(char const*, ...)>
    9174:	e28d0008 	add	r0, sp, #8
    9178:	eb001527 	bl	e61c <CString::operator char const*() const>
    917c:	e1a01000 	mov	r1, r0
    9180:	e1a00004 	mov	r0, r4
    9184:	eb000051 	bl	92d0 <debug_stacktrace(unsigned int const*, char const*)>
    9188:	eb0007d7 	bl	b0ec <CLogger::Get()>
    918c:	e1a04000 	mov	r4, r0
    9190:	e28d0008 	add	r0, sp, #8
    9194:	eb001520 	bl	e61c <CString::operator char const*() const>
    9198:	e58d5000 	str	r5, [sp]
    919c:	e1a01000 	mov	r1, r0
    91a0:	e59f3010 	ldr	r3, [pc, #16]	; 91b8 <assertion_failed+0x80>
    91a4:	e1a00004 	mov	r0, r4
    91a8:	e3a02000 	mov	r2, #0
    91ac:	eb000710 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    91b0:	eafffffe 	b	91b0 <assertion_failed+0x78>
    91b4:	00017444 	.word	0x00017444
    91b8:	0001744c 	.word	0x0001744c

000091bc <debug_hexdump(void const*, unsigned int, char const*)>:
    91bc:	e3520000 	cmp	r2, #0
    91c0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    91c4:	e1a06001 	mov	r6, r1
    91c8:	e59f80f4 	ldr	r8, [pc, #244]	; 92c4 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
    91cc:	e1a07000 	mov	r7, r0
    91d0:	11a08002 	movne	r8, r2
    91d4:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    91d8:	eb0007c3 	bl	b0ec <CLogger::Get()>
    91dc:	e1cd60f0 	strd	r6, [sp]
    91e0:	e1a01008 	mov	r1, r8
    91e4:	e59f30dc 	ldr	r3, [pc, #220]	; 92c8 <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
    91e8:	e3a02004 	mov	r2, #4
    91ec:	eb000700 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    91f0:	e3560000 	cmp	r6, #0
    91f4:	0a000030 	beq	92bc <debug_hexdump(void const*, unsigned int, char const*)+0x100>
    91f8:	e3c6300f 	bic	r3, r6, #15
    91fc:	e1a04007 	mov	r4, r7
    9200:	e0876006 	add	r6, r7, r6
    9204:	e59f90c0 	ldr	r9, [pc, #192]	; 92cc <debug_hexdump(void const*, unsigned int, char const*)+0x110>
    9208:	e0877003 	add	r7, r7, r3
    920c:	ea000001 	b	9218 <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
    9210:	e1540006 	cmp	r4, r6
    9214:	0a000028 	beq	92bc <debug_hexdump(void const*, unsigned int, char const*)+0x100>
    9218:	eb0007b3 	bl	b0ec <CLogger::Get()>
    921c:	e5d4300f 	ldrb	r3, [r4, #15]
    9220:	e5d45000 	ldrb	r5, [r4]
    9224:	e58d3040 	str	r3, [sp, #64]	; 0x40
    9228:	e5d4300e 	ldrb	r3, [r4, #14]
    922c:	e6ffc074 	uxth	ip, r4
    9230:	e58d303c 	str	r3, [sp, #60]	; 0x3c
    9234:	e5d4200d 	ldrb	r2, [r4, #13]
    9238:	e1a03009 	mov	r3, r9
    923c:	e58d2038 	str	r2, [sp, #56]	; 0x38
    9240:	e5d4100c 	ldrb	r1, [r4, #12]
    9244:	e3a02004 	mov	r2, #4
    9248:	e58d1034 	str	r1, [sp, #52]	; 0x34
    924c:	e5d4e00b 	ldrb	lr, [r4, #11]
    9250:	e1a01008 	mov	r1, r8
    9254:	e58de030 	str	lr, [sp, #48]	; 0x30
    9258:	e5d4e00a 	ldrb	lr, [r4, #10]
    925c:	e58de02c 	str	lr, [sp, #44]	; 0x2c
    9260:	e5d4e009 	ldrb	lr, [r4, #9]
    9264:	e58de028 	str	lr, [sp, #40]	; 0x28
    9268:	e5d4e008 	ldrb	lr, [r4, #8]
    926c:	e58de024 	str	lr, [sp, #36]	; 0x24
    9270:	e5d4e007 	ldrb	lr, [r4, #7]
    9274:	e58de020 	str	lr, [sp, #32]
    9278:	e5d4e006 	ldrb	lr, [r4, #6]
    927c:	e58de01c 	str	lr, [sp, #28]
    9280:	e5d4e005 	ldrb	lr, [r4, #5]
    9284:	e58de018 	str	lr, [sp, #24]
    9288:	e5d4e004 	ldrb	lr, [r4, #4]
    928c:	e58de014 	str	lr, [sp, #20]
    9290:	e5d4e003 	ldrb	lr, [r4, #3]
    9294:	e58de010 	str	lr, [sp, #16]
    9298:	e5d4e002 	ldrb	lr, [r4, #2]
    929c:	e58de00c 	str	lr, [sp, #12]
    92a0:	e5d4e001 	ldrb	lr, [r4, #1]
    92a4:	e98d4020 	stmib	sp, {r5, lr}
    92a8:	e58dc000 	str	ip, [sp]
    92ac:	eb0006d0 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    92b0:	e1540007 	cmp	r4, r7
    92b4:	e2844010 	add	r4, r4, #16
    92b8:	1affffd4 	bne	9210 <debug_hexdump(void const*, unsigned int, char const*)+0x54>
    92bc:	e28dd04c 	add	sp, sp, #76	; 0x4c
    92c0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    92c4:	00017464 	.word	0x00017464
    92c8:	0001746c 	.word	0x0001746c
    92cc:	00017494 	.word	0x00017494

000092d0 <debug_stacktrace(unsigned int const*, char const*)>:
    92d0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    92d4:	e3a04000 	mov	r4, #0
    92d8:	e1510004 	cmp	r1, r4
    92dc:	e59f8074 	ldr	r8, [pc, #116]	; 9358 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    92e0:	e24dd00c 	sub	sp, sp, #12
    92e4:	11a08001 	movne	r8, r1
    92e8:	e59f606c 	ldr	r6, [pc, #108]	; 935c <debug_stacktrace(unsigned int const*, char const*)+0x8c>
    92ec:	e59f706c 	ldr	r7, [pc, #108]	; 9360 <debug_stacktrace(unsigned int const*, char const*)+0x90>
    92f0:	e59f906c 	ldr	r9, [pc, #108]	; 9364 <debug_stacktrace(unsigned int const*, char const*)+0x94>
    92f4:	e2405004 	sub	r5, r0, #4
    92f8:	ea000002 	b	9308 <debug_stacktrace(unsigned int const*, char const*)+0x38>
    92fc:	e2844001 	add	r4, r4, #1
    9300:	e3540040 	cmp	r4, #64	; 0x40
    9304:	0a000011 	beq	9350 <debug_stacktrace(unsigned int const*, char const*)+0x80>
    9308:	e5b53004 	ldr	r3, [r5, #4]!
    930c:	e1530006 	cmp	r3, r6
    9310:	9afffff9 	bls	92fc <debug_stacktrace(unsigned int const*, char const*)+0x2c>
    9314:	e1530007 	cmp	r3, r7
    9318:	2afffff7 	bcs	92fc <debug_stacktrace(unsigned int const*, char const*)+0x2c>
    931c:	e3130003 	tst	r3, #3
    9320:	1afffff5 	bne	92fc <debug_stacktrace(unsigned int const*, char const*)+0x2c>
    9324:	eb000770 	bl	b0ec <CLogger::Get()>
    9328:	e5952000 	ldr	r2, [r5]
    932c:	e1a03009 	mov	r3, r9
    9330:	e58d2004 	str	r2, [sp, #4]
    9334:	e58d4000 	str	r4, [sp]
    9338:	e3a02004 	mov	r2, #4
    933c:	e1a01008 	mov	r1, r8
    9340:	e2844001 	add	r4, r4, #1
    9344:	eb0006aa 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9348:	e3540040 	cmp	r4, #64	; 0x40
    934c:	1affffed 	bne	9308 <debug_stacktrace(unsigned int const*, char const*)+0x38>
    9350:	e28dd00c 	add	sp, sp, #12
    9354:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    9358:	00017464 	.word	0x00017464
    935c:	00007fff 	.word	0x00007fff
    9360:	00015364 	.word	0x00015364
    9364:	000174ec 	.word	0x000174ec

00009368 <DelayLoop>:
    9368:	e1a01001 	mov	r1, r1
    936c:	e1a02002 	mov	r2, r2
    9370:	e2500001 	subs	r0, r0, #1
    9374:	8afffffb 	bhi	9368 <DelayLoop>
    9378:	e1a0f00e 	mov	pc, lr

0000937c <CDeviceNameService::CDeviceNameService()>:
    937c:	e3a02000 	mov	r2, #0
    9380:	e59f102c 	ldr	r1, [pc, #44]	; 93b4 <CDeviceNameService::CDeviceNameService()+0x38>
    9384:	e5802000 	str	r2, [r0]
    9388:	e591c000 	ldr	ip, [r1]
    938c:	e5802004 	str	r2, [r0, #4]
    9390:	e15c0002 	cmp	ip, r2
    9394:	1a000001 	bne	93a0 <CDeviceNameService::CDeviceNameService()+0x24>
    9398:	e5810000 	str	r0, [r1]
    939c:	e12fff1e 	bx	lr
    93a0:	e92d4010 	push	{r4, lr}
    93a4:	e3a0201f 	mov	r2, #31
    93a8:	e59f1008 	ldr	r1, [pc, #8]	; 93b8 <CDeviceNameService::CDeviceNameService()+0x3c>
    93ac:	e59f0008 	ldr	r0, [pc, #8]	; 93bc <CDeviceNameService::CDeviceNameService()+0x40>
    93b0:	ebffff60 	bl	9138 <assertion_failed>
    93b4:	00019b44 	.word	0x00019b44
    93b8:	00017500 	.word	0x00017500
    93bc:	00017518 	.word	0x00017518

000093c0 <CDeviceNameService::~CDeviceNameService()>:
    93c0:	e5903000 	ldr	r3, [r0]
    93c4:	e92d4070 	push	{r4, r5, r6, lr}
    93c8:	e3530000 	cmp	r3, #0
    93cc:	e1a05000 	mov	r5, r0
    93d0:	0a00000d 	beq	940c <CDeviceNameService::~CDeviceNameService()+0x4c>
    93d4:	e3a06000 	mov	r6, #0
    93d8:	e5930004 	ldr	r0, [r3, #4]
    93dc:	e5934000 	ldr	r4, [r3]
    93e0:	e3500000 	cmp	r0, #0
    93e4:	0a000000 	beq	93ec <CDeviceNameService::~CDeviceNameService()+0x2c>
    93e8:	eb002143 	bl	118fc <operator delete[](void*)>
    93ec:	e5950000 	ldr	r0, [r5]
    93f0:	e3a01010 	mov	r1, #16
    93f4:	e5806004 	str	r6, [r0, #4]
    93f8:	e5806008 	str	r6, [r0, #8]
    93fc:	eb00213f 	bl	11900 <operator delete(void*, unsigned int)>
    9400:	e2543000 	subs	r3, r4, #0
    9404:	e5854000 	str	r4, [r5]
    9408:	1afffff2 	bne	93d8 <CDeviceNameService::~CDeviceNameService()+0x18>
    940c:	e3a02000 	mov	r2, #0
    9410:	e59f3008 	ldr	r3, [pc, #8]	; 9420 <CDeviceNameService::~CDeviceNameService()+0x60>
    9414:	e1a00005 	mov	r0, r5
    9418:	e5832000 	str	r2, [r3]
    941c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9420:	00019b44 	.word	0x00019b44

00009424 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    9424:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9428:	e1a05000 	mov	r5, r0
    942c:	e5900004 	ldr	r0, [r0, #4]
    9430:	e1a06001 	mov	r6, r1
    9434:	e3500000 	cmp	r0, #0
    9438:	e1a07002 	mov	r7, r2
    943c:	e1a08003 	mov	r8, r3
    9440:	1a000017 	bne	94a4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
    9444:	e3a00010 	mov	r0, #16
    9448:	eb00211e 	bl	118c8 <operator new(unsigned int)>
    944c:	e3560000 	cmp	r6, #0
    9450:	e1a04000 	mov	r4, r0
    9454:	0a000014 	beq	94ac <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
    9458:	e1a00006 	mov	r0, r6
    945c:	eb001df6 	bl	10c3c <strlen>
    9460:	e2800001 	add	r0, r0, #1
    9464:	eb00211d 	bl	118e0 <operator new[](unsigned int)>
    9468:	e1a01006 	mov	r1, r6
    946c:	e5840004 	str	r0, [r4, #4]
    9470:	eb001e84 	bl	10e88 <strcpy>
    9474:	e3570000 	cmp	r7, #0
    9478:	0a00000f 	beq	94bc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
    947c:	e5952004 	ldr	r2, [r5, #4]
    9480:	e5953000 	ldr	r3, [r5]
    9484:	e3520000 	cmp	r2, #0
    9488:	e5847008 	str	r7, [r4, #8]
    948c:	e5c4800c 	strb	r8, [r4, #12]
    9490:	e5843000 	str	r3, [r4]
    9494:	e5854000 	str	r4, [r5]
    9498:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    949c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    94a0:	ea00244a 	b	125d0 <LeaveCritical>
    94a4:	eb00241f 	bl	12528 <EnterCritical>
    94a8:	eaffffe5 	b	9444 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    94ac:	e3a0203b 	mov	r2, #59	; 0x3b
    94b0:	e59f1014 	ldr	r1, [pc, #20]	; 94cc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
    94b4:	e59f0014 	ldr	r0, [pc, #20]	; 94d0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xac>
    94b8:	ebffff1e 	bl	9138 <assertion_failed>
    94bc:	e3a02040 	mov	r2, #64	; 0x40
    94c0:	e59f1004 	ldr	r1, [pc, #4]	; 94cc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
    94c4:	e59f0008 	ldr	r0, [pc, #8]	; 94d4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
    94c8:	ebffff1a 	bl	9138 <assertion_failed>
    94cc:	00017500 	.word	0x00017500
    94d0:	00017524 	.word	0x00017524
    94d4:	00017530 	.word	0x00017530

000094d8 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    94d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    94dc:	e2515000 	subs	r5, r1, #0
    94e0:	0a00003e 	beq	95e0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
    94e4:	e1a08000 	mov	r8, r0
    94e8:	e5900004 	ldr	r0, [r0, #4]
    94ec:	e1a07002 	mov	r7, r2
    94f0:	e3500000 	cmp	r0, #0
    94f4:	1a00001a 	bne	9564 <CDeviceNameService::RemoveDevice(char const*, bool)+0x8c>
    94f8:	e5984000 	ldr	r4, [r8]
    94fc:	e3540000 	cmp	r4, #0
    9500:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9504:	e5941004 	ldr	r1, [r4, #4]
    9508:	e3510000 	cmp	r1, #0
    950c:	13a06000 	movne	r6, #0
    9510:	1a000001 	bne	951c <CDeviceNameService::RemoveDevice(char const*, bool)+0x44>
    9514:	ea00000e 	b	9554 <CDeviceNameService::RemoveDevice(char const*, bool)+0x7c>
    9518:	e1a04003 	mov	r4, r3
    951c:	e1a00005 	mov	r0, r5
    9520:	eb001dcf 	bl	10c64 <strcmp>
    9524:	e3500000 	cmp	r0, #0
    9528:	1a000002 	bne	9538 <CDeviceNameService::RemoveDevice(char const*, bool)+0x60>
    952c:	e5d4300c 	ldrb	r3, [r4, #12]
    9530:	e1530007 	cmp	r3, r7
    9534:	0a000013 	beq	9588 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb0>
    9538:	e5943000 	ldr	r3, [r4]
    953c:	e3530000 	cmp	r3, #0
    9540:	0a00000b 	beq	9574 <CDeviceNameService::RemoveDevice(char const*, bool)+0x9c>
    9544:	e5931004 	ldr	r1, [r3, #4]
    9548:	e1a06004 	mov	r6, r4
    954c:	e3510000 	cmp	r1, #0
    9550:	1afffff0 	bne	9518 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    9554:	e3a0205e 	mov	r2, #94	; 0x5e
    9558:	e59f1090 	ldr	r1, [pc, #144]	; 95f0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x118>
    955c:	e59f0090 	ldr	r0, [pc, #144]	; 95f4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x11c>
    9560:	ebfffef4 	bl	9138 <assertion_failed>
    9564:	eb0023ef 	bl	12528 <EnterCritical>
    9568:	e5984000 	ldr	r4, [r8]
    956c:	e3540000 	cmp	r4, #0
    9570:	1affffe3 	bne	9504 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    9574:	e5983004 	ldr	r3, [r8, #4]
    9578:	e3530000 	cmp	r3, #0
    957c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9580:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9584:	ea002411 	b	125d0 <LeaveCritical>
    9588:	e5943000 	ldr	r3, [r4]
    958c:	e3560000 	cmp	r6, #0
    9590:	15863000 	strne	r3, [r6]
    9594:	0a00000f 	beq	95d8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
    9598:	e5983004 	ldr	r3, [r8, #4]
    959c:	e3530000 	cmp	r3, #0
    95a0:	1a00000a 	bne	95d0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf8>
    95a4:	e5940004 	ldr	r0, [r4, #4]
    95a8:	e3500000 	cmp	r0, #0
    95ac:	0a000000 	beq	95b4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
    95b0:	eb0020d1 	bl	118fc <operator delete[](void*)>
    95b4:	e3a03000 	mov	r3, #0
    95b8:	e1a00004 	mov	r0, r4
    95bc:	e5843004 	str	r3, [r4, #4]
    95c0:	e5843008 	str	r3, [r4, #8]
    95c4:	e3a01010 	mov	r1, #16
    95c8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    95cc:	ea0020cb 	b	11900 <operator delete(void*, unsigned int)>
    95d0:	eb0023fe 	bl	125d0 <LeaveCritical>
    95d4:	eafffff2 	b	95a4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xcc>
    95d8:	e5883000 	str	r3, [r8]
    95dc:	eaffffed 	b	9598 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
    95e0:	e3a02056 	mov	r2, #86	; 0x56
    95e4:	e59f1004 	ldr	r1, [pc, #4]	; 95f0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x118>
    95e8:	e59f0008 	ldr	r0, [pc, #8]	; 95f8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x120>
    95ec:	ebfffed1 	bl	9138 <assertion_failed>
    95f0:	00017500 	.word	0x00017500
    95f4:	00017540 	.word	0x00017540
    95f8:	00017524 	.word	0x00017524

000095fc <CDeviceNameService::GetDevice(char const*, bool)>:
    95fc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9600:	e2515000 	subs	r5, r1, #0
    9604:	e24dd00c 	sub	sp, sp, #12
    9608:	0a000024 	beq	96a0 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
    960c:	e1a07000 	mov	r7, r0
    9610:	e5900004 	ldr	r0, [r0, #4]
    9614:	e1a06002 	mov	r6, r2
    9618:	e3500000 	cmp	r0, #0
    961c:	1a000014 	bne	9674 <CDeviceNameService::GetDevice(char const*, bool)+0x78>
    9620:	e5974000 	ldr	r4, [r7]
    9624:	e3540000 	cmp	r4, #0
    9628:	1a00000a 	bne	9658 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    962c:	ea000018 	b	9694 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    9630:	e1a00005 	mov	r0, r5
    9634:	eb001d8a 	bl	10c64 <strcmp>
    9638:	e3500000 	cmp	r0, #0
    963c:	1a000002 	bne	964c <CDeviceNameService::GetDevice(char const*, bool)+0x50>
    9640:	e5d4300c 	ldrb	r3, [r4, #12]
    9644:	e1530006 	cmp	r3, r6
    9648:	0a000018 	beq	96b0 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
    964c:	e5944000 	ldr	r4, [r4]
    9650:	e3540000 	cmp	r4, #0
    9654:	0a00000a 	beq	9684 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
    9658:	e5941004 	ldr	r1, [r4, #4]
    965c:	e3510000 	cmp	r1, #0
    9660:	1afffff2 	bne	9630 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
    9664:	e3a02092 	mov	r2, #146	; 0x92
    9668:	e59f1078 	ldr	r1, [pc, #120]	; 96e8 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    966c:	e59f0078 	ldr	r0, [pc, #120]	; 96ec <CDeviceNameService::GetDevice(char const*, bool)+0xf0>
    9670:	ebfffeb0 	bl	9138 <assertion_failed>
    9674:	eb0023ab 	bl	12528 <EnterCritical>
    9678:	e5974000 	ldr	r4, [r7]
    967c:	e3540000 	cmp	r4, #0
    9680:	1afffff4 	bne	9658 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
    9684:	e5973004 	ldr	r3, [r7, #4]
    9688:	e3530000 	cmp	r3, #0
    968c:	0a000000 	beq	9694 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    9690:	eb0023ce 	bl	125d0 <LeaveCritical>
    9694:	e3a00000 	mov	r0, #0
    9698:	e28dd00c 	add	sp, sp, #12
    969c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    96a0:	e3a0208b 	mov	r2, #139	; 0x8b
    96a4:	e59f103c 	ldr	r1, [pc, #60]	; 96e8 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    96a8:	e59f0040 	ldr	r0, [pc, #64]	; 96f0 <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
    96ac:	ebfffea1 	bl	9138 <assertion_failed>
    96b0:	e5973004 	ldr	r3, [r7, #4]
    96b4:	e5940008 	ldr	r0, [r4, #8]
    96b8:	e3530000 	cmp	r3, #0
    96bc:	1a000005 	bne	96d8 <CDeviceNameService::GetDevice(char const*, bool)+0xdc>
    96c0:	e3500000 	cmp	r0, #0
    96c4:	1afffff3 	bne	9698 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
    96c8:	e3a0209a 	mov	r2, #154	; 0x9a
    96cc:	e59f1014 	ldr	r1, [pc, #20]	; 96e8 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    96d0:	e59f001c 	ldr	r0, [pc, #28]	; 96f4 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
    96d4:	ebfffe97 	bl	9138 <assertion_failed>
    96d8:	e58d0004 	str	r0, [sp, #4]
    96dc:	eb0023bb 	bl	125d0 <LeaveCritical>
    96e0:	e59d0004 	ldr	r0, [sp, #4]
    96e4:	eafffff5 	b	96c0 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
    96e8:	00017500 	.word	0x00017500
    96ec:	00017540 	.word	0x00017540
    96f0:	00017524 	.word	0x00017524
    96f4:	00017554 	.word	0x00017554

000096f8 <CDeviceNameService::Get()>:
    96f8:	e59f301c 	ldr	r3, [pc, #28]	; 971c <CDeviceNameService::Get()+0x24>
    96fc:	e5930000 	ldr	r0, [r3]
    9700:	e3500000 	cmp	r0, #0
    9704:	112fff1e 	bxne	lr
    9708:	e92d4010 	push	{r4, lr}
    970c:	e3a020cc 	mov	r2, #204	; 0xcc
    9710:	e59f1008 	ldr	r1, [pc, #8]	; 9720 <CDeviceNameService::Get()+0x28>
    9714:	e59f0008 	ldr	r0, [pc, #8]	; 9724 <CDeviceNameService::Get()+0x2c>
    9718:	ebfffe86 	bl	9138 <assertion_failed>
    971c:	00019b44 	.word	0x00019b44
    9720:	00017500 	.word	0x00017500
    9724:	00017564 	.word	0x00017564

00009728 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    9728:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    972c:	e1a07001 	mov	r7, r1
    9730:	e1a08002 	mov	r8, r2
    9734:	e24dd010 	sub	sp, sp, #16
    9738:	e1a04000 	mov	r4, r0
    973c:	e1a0000d 	mov	r0, sp
    9740:	e1a05003 	mov	r5, r3
    9744:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
    9748:	eb00137b 	bl	e53c <CString::CString()>
    974c:	e1a03008 	mov	r3, r8
    9750:	e1a02007 	mov	r2, r7
    9754:	e1a0000d 	mov	r0, sp
    9758:	e59f102c 	ldr	r1, [pc, #44]	; 978c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
    975c:	eb001922 	bl	fbec <CString::Format(char const*, ...)>
    9760:	e1a0000d 	mov	r0, sp
    9764:	eb0013ac 	bl	e61c <CString::operator char const*() const>
    9768:	e1a03006 	mov	r3, r6
    976c:	e1a01000 	mov	r1, r0
    9770:	e1a02005 	mov	r2, r5
    9774:	e1a00004 	mov	r0, r4
    9778:	ebffff29 	bl	9424 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    977c:	e1a0000d 	mov	r0, sp
    9780:	eb00133a 	bl	e470 <CString::~CString()>
    9784:	e28dd010 	add	sp, sp, #16
    9788:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    978c:	00017570 	.word	0x00017570

00009790 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    9790:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9794:	e1a06001 	mov	r6, r1
    9798:	e1a07002 	mov	r7, r2
    979c:	e24dd014 	sub	sp, sp, #20
    97a0:	e1a04000 	mov	r4, r0
    97a4:	e1a0000d 	mov	r0, sp
    97a8:	e1a05003 	mov	r5, r3
    97ac:	eb001362 	bl	e53c <CString::CString()>
    97b0:	e1a03007 	mov	r3, r7
    97b4:	e1a02006 	mov	r2, r6
    97b8:	e1a0000d 	mov	r0, sp
    97bc:	e59f1028 	ldr	r1, [pc, #40]	; 97ec <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
    97c0:	eb001909 	bl	fbec <CString::Format(char const*, ...)>
    97c4:	e1a0000d 	mov	r0, sp
    97c8:	eb001393 	bl	e61c <CString::operator char const*() const>
    97cc:	e1a02005 	mov	r2, r5
    97d0:	e1a01000 	mov	r1, r0
    97d4:	e1a00004 	mov	r0, r4
    97d8:	ebffff3e 	bl	94d8 <CDeviceNameService::RemoveDevice(char const*, bool)>
    97dc:	e1a0000d 	mov	r0, sp
    97e0:	eb001322 	bl	e470 <CString::~CString()>
    97e4:	e28dd014 	add	sp, sp, #20
    97e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    97ec:	00017570 	.word	0x00017570

000097f0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    97f0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    97f4:	e1a06001 	mov	r6, r1
    97f8:	e1a07002 	mov	r7, r2
    97fc:	e24dd014 	sub	sp, sp, #20
    9800:	e1a04000 	mov	r4, r0
    9804:	e1a0000d 	mov	r0, sp
    9808:	e1a05003 	mov	r5, r3
    980c:	eb00134a 	bl	e53c <CString::CString()>
    9810:	e1a03007 	mov	r3, r7
    9814:	e1a02006 	mov	r2, r6
    9818:	e1a0000d 	mov	r0, sp
    981c:	e59f1030 	ldr	r1, [pc, #48]	; 9854 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
    9820:	eb0018f1 	bl	fbec <CString::Format(char const*, ...)>
    9824:	e1a0000d 	mov	r0, sp
    9828:	eb00137b 	bl	e61c <CString::operator char const*() const>
    982c:	e1a02005 	mov	r2, r5
    9830:	e1a01000 	mov	r1, r0
    9834:	e1a00004 	mov	r0, r4
    9838:	ebffff6f 	bl	95fc <CDeviceNameService::GetDevice(char const*, bool)>
    983c:	e1a04000 	mov	r4, r0
    9840:	e1a0000d 	mov	r0, sp
    9844:	eb001309 	bl	e470 <CString::~CString()>
    9848:	e1a00004 	mov	r0, r4
    984c:	e28dd014 	add	sp, sp, #20
    9850:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9854:	00017570 	.word	0x00017570

00009858 <CDeviceNameService::ListDevices(CDevice*)>:
    9858:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    985c:	e2516000 	subs	r6, r1, #0
    9860:	e24dd018 	sub	sp, sp, #24
    9864:	0a000034 	beq	993c <CDeviceNameService::ListDevices(CDevice*)+0xe4>
    9868:	e5904000 	ldr	r4, [r0]
    986c:	e3540000 	cmp	r4, #0
    9870:	0a00002f 	beq	9934 <CDeviceNameService::ListDevices(CDevice*)+0xdc>
    9874:	e3a05000 	mov	r5, #0
    9878:	e59f90cc 	ldr	r9, [pc, #204]	; 994c <CDeviceNameService::ListDevices(CDevice*)+0xf4>
    987c:	ea00001b 	b	98f0 <CDeviceNameService::ListDevices(CDevice*)+0x98>
    9880:	e5d4200c 	ldrb	r2, [r4, #12]
    9884:	e2855001 	add	r5, r5, #1
    9888:	e3520000 	cmp	r2, #0
    988c:	13a02062 	movne	r2, #98	; 0x62
    9890:	03a02063 	moveq	r2, #99	; 0x63
    9894:	e215a003 	ands	sl, r5, #3
    9898:	03a0100a 	moveq	r1, #10
    989c:	13a01020 	movne	r1, #32
    98a0:	e28d0008 	add	r0, sp, #8
    98a4:	e58d1000 	str	r1, [sp]
    98a8:	e1a01009 	mov	r1, r9
    98ac:	eb0018ce 	bl	fbec <CString::Format(char const*, ...)>
    98b0:	e5963000 	ldr	r3, [r6]
    98b4:	e28d0008 	add	r0, sp, #8
    98b8:	e593700c 	ldr	r7, [r3, #12]
    98bc:	eb001356 	bl	e61c <CString::operator char const*() const>
    98c0:	e1a08000 	mov	r8, r0
    98c4:	e28d0008 	add	r0, sp, #8
    98c8:	eb001391 	bl	e714 <CString::GetLength() const>
    98cc:	e1a01008 	mov	r1, r8
    98d0:	e1a02000 	mov	r2, r0
    98d4:	e1a00006 	mov	r0, r6
    98d8:	e12fff37 	blx	r7
    98dc:	e5944000 	ldr	r4, [r4]
    98e0:	e28d0008 	add	r0, sp, #8
    98e4:	eb0012e1 	bl	e470 <CString::~CString()>
    98e8:	e3540000 	cmp	r4, #0
    98ec:	0a000008 	beq	9914 <CDeviceNameService::ListDevices(CDevice*)+0xbc>
    98f0:	e28d0008 	add	r0, sp, #8
    98f4:	eb001310 	bl	e53c <CString::CString()>
    98f8:	e5943004 	ldr	r3, [r4, #4]
    98fc:	e3530000 	cmp	r3, #0
    9900:	1affffde 	bne	9880 <CDeviceNameService::ListDevices(CDevice*)+0x28>
    9904:	e3a020b9 	mov	r2, #185	; 0xb9
    9908:	e59f1040 	ldr	r1, [pc, #64]	; 9950 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
    990c:	e59f0040 	ldr	r0, [pc, #64]	; 9954 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
    9910:	ebfffe08 	bl	9138 <assertion_failed>
    9914:	e35a0000 	cmp	sl, #0
    9918:	0a000005 	beq	9934 <CDeviceNameService::ListDevices(CDevice*)+0xdc>
    991c:	e5963000 	ldr	r3, [r6]
    9920:	e1a00006 	mov	r0, r6
    9924:	e593300c 	ldr	r3, [r3, #12]
    9928:	e3a02001 	mov	r2, #1
    992c:	e59f1024 	ldr	r1, [pc, #36]	; 9958 <CDeviceNameService::ListDevices(CDevice*)+0x100>
    9930:	e12fff33 	blx	r3
    9934:	e28dd018 	add	sp, sp, #24
    9938:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    993c:	e3a020b0 	mov	r2, #176	; 0xb0
    9940:	e59f1008 	ldr	r1, [pc, #8]	; 9950 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
    9944:	e59f0010 	ldr	r0, [pc, #16]	; 995c <CDeviceNameService::ListDevices(CDevice*)+0x104>
    9948:	ebfffdfa 	bl	9138 <assertion_failed>
    994c:	00017588 	.word	0x00017588
    9950:	00017500 	.word	0x00017500
    9954:	00017540 	.word	0x00017540
    9958:	00017594 	.word	0x00017594
    995c:	00017578 	.word	0x00017578

00009960 <CGPIOPin::CGPIOPin()>:
    9960:	e92d4010 	push	{r4, lr}
    9964:	e3a01000 	mov	r1, #0
    9968:	e3a02006 	mov	r2, #6
    996c:	e3a04036 	mov	r4, #54	; 0x36
    9970:	e3a0c00a 	mov	ip, #10
    9974:	e59fe01c 	ldr	lr, [pc, #28]	; 9998 <CGPIOPin::CGPIOPin()+0x38>
    9978:	e5804004 	str	r4, [r0, #4]
    997c:	e580e000 	str	lr, [r0]
    9980:	e5c0c010 	strb	ip, [r0, #16]
    9984:	e5801018 	str	r1, [r0, #24]
    9988:	e580101c 	str	r1, [r0, #28]
    998c:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    9990:	e5c02026 	strb	r2, [r0, #38]	; 0x26
    9994:	e8bd8010 	pop	{r4, pc}
    9998:	000175a0 	.word	0x000175a0

0000999c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    999c:	e92d4070 	push	{r4, r5, r6, lr}
    99a0:	e3a0c006 	mov	ip, #6
    99a4:	e3a0e00a 	mov	lr, #10
    99a8:	e1a05002 	mov	r5, r2
    99ac:	e3a06036 	mov	r6, #54	; 0x36
    99b0:	e3a02000 	mov	r2, #0
    99b4:	e1a04000 	mov	r4, r0
    99b8:	e5803018 	str	r3, [r0, #24]
    99bc:	e59f302c 	ldr	r3, [pc, #44]	; 99f0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
    99c0:	e5c0e010 	strb	lr, [r0, #16]
    99c4:	e8800048 	stm	r0, {r3, r6}
    99c8:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
    99cc:	e5c0c026 	strb	ip, [r0, #38]	; 0x26
    99d0:	e580201c 	str	r2, [r0, #28]
    99d4:	eb00000d 	bl	9a10 <CGPIOPin::AssignPin(unsigned int)>
    99d8:	e1a00004 	mov	r0, r4
    99dc:	e1a01005 	mov	r1, r5
    99e0:	e3a02001 	mov	r2, #1
    99e4:	eb00002a 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    99e8:	e1a00004 	mov	r0, r4
    99ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    99f0:	000175a0 	.word	0x000175a0

000099f4 <CGPIOPin::~CGPIOPin()>:
    99f4:	e12fff1e 	bx	lr

000099f8 <CGPIOPin::~CGPIOPin()>:
    99f8:	e92d4010 	push	{r4, lr}
    99fc:	e1a04000 	mov	r4, r0
    9a00:	e3a01028 	mov	r1, #40	; 0x28
    9a04:	eb001fbd 	bl	11900 <operator delete(void*, unsigned int)>
    9a08:	e1a00004 	mov	r0, r4
    9a0c:	e8bd8010 	pop	{r4, pc}

00009a10 <CGPIOPin::AssignPin(unsigned int)>:
    9a10:	e5903004 	ldr	r3, [r0, #4]
    9a14:	e92d4070 	push	{r4, r5, r6, lr}
    9a18:	e3530036 	cmp	r3, #54	; 0x36
    9a1c:	1a000017 	bne	9a80 <CGPIOPin::AssignPin(unsigned int)+0x70>
    9a20:	e1a05000 	mov	r5, r0
    9a24:	e3510035 	cmp	r1, #53	; 0x35
    9a28:	e1a04001 	mov	r4, r1
    9a2c:	e5851004 	str	r1, [r5, #4]
    9a30:	8a000007 	bhi	9a54 <CGPIOPin::AssignPin(unsigned int)+0x44>
    9a34:	e3a03001 	mov	r3, #1
    9a38:	e204201f 	and	r2, r4, #31
    9a3c:	e1a042a4 	lsr	r4, r4, #5
    9a40:	e1a03213 	lsl	r3, r3, r2
    9a44:	e1a04104 	lsl	r4, r4, #2
    9a48:	e585300c 	str	r3, [r5, #12]
    9a4c:	e5854008 	str	r4, [r5, #8]
    9a50:	e8bd8070 	pop	{r4, r5, r6, pc}
    9a54:	eb0008e4 	bl	bdec <CMachineInfo::Get()>
    9a58:	e6ef1074 	uxtb	r1, r4
    9a5c:	eb000849 	bl	bb88 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9a60:	e3500035 	cmp	r0, #53	; 0x35
    9a64:	e1a04000 	mov	r4, r0
    9a68:	e5850004 	str	r0, [r5, #4]
    9a6c:	9afffff0 	bls	9a34 <CGPIOPin::AssignPin(unsigned int)+0x24>
    9a70:	e59f1018 	ldr	r1, [pc, #24]	; 9a90 <CGPIOPin::AssignPin(unsigned int)+0x80>
    9a74:	e3a02047 	mov	r2, #71	; 0x47
    9a78:	e2810020 	add	r0, r1, #32
    9a7c:	ebfffdad 	bl	9138 <assertion_failed>
    9a80:	e59f1008 	ldr	r1, [pc, #8]	; 9a90 <CGPIOPin::AssignPin(unsigned int)+0x80>
    9a84:	e3a02040 	mov	r2, #64	; 0x40
    9a88:	e281000c 	add	r0, r1, #12
    9a8c:	ebfffda9 	bl	9138 <assertion_failed>
    9a90:	000175a8 	.word	0x000175a8

00009a94 <CGPIOPin::SetMode(TGPIOMode, bool)>:
    9a94:	e3510009 	cmp	r1, #9
    9a98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9a9c:	8a000058 	bhi	9c04 <CGPIOPin::SetMode(TGPIOMode, bool)+0x170>
    9aa0:	e1a06002 	mov	r6, r2
    9aa4:	e1a05000 	mov	r5, r0
    9aa8:	e5c01010 	strb	r1, [r0, #16]
    9aac:	e3a02000 	mov	r2, #0
    9ab0:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    9ab4:	e5d03010 	ldrb	r3, [r0, #16]
    9ab8:	e2431004 	sub	r1, r3, #4
    9abc:	e6efc071 	uxtb	ip, r1
    9ac0:	e35c0005 	cmp	ip, #5
    9ac4:	9a000030 	bls	9b8c <CGPIOPin::SetMode(TGPIOMode, bool)+0xf8>
    9ac8:	e3530001 	cmp	r3, #1
    9acc:	13a03000 	movne	r3, #0
    9ad0:	02063001 	andeq	r3, r6, #1
    9ad4:	e3530000 	cmp	r3, #0
    9ad8:	1a00004d 	bne	9c14 <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
    9adc:	e5953004 	ldr	r3, [r5, #4]
    9ae0:	e3530035 	cmp	r3, #53	; 0x35
    9ae4:	8a00004d 	bhi	9c20 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>
    9ae8:	e59f4140 	ldr	r4, [pc, #320]	; 9c30 <CGPIOPin::SetMode(TGPIOMode, bool)+0x19c>
    9aec:	e59f7140 	ldr	r7, [pc, #320]	; 9c34 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a0>
    9af0:	e0842394 	umull	r2, r4, r4, r3
    9af4:	e5970000 	ldr	r0, [r7]
    9af8:	e1a041a4 	lsr	r4, r4, #3
    9afc:	e2842302 	add	r2, r4, #134217728	; 0x8000000
    9b00:	e0844104 	add	r4, r4, r4, lsl #2
    9b04:	e2822702 	add	r2, r2, #524288	; 0x80000
    9b08:	e0434084 	sub	r4, r3, r4, lsl #1
    9b0c:	e3500000 	cmp	r0, #0
    9b10:	e1a08102 	lsl	r8, r2, #2
    9b14:	e0844084 	add	r4, r4, r4, lsl #1
    9b18:	1a000026 	bne	9bb8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
    9b1c:	e5d52010 	ldrb	r2, [r5, #16]
    9b20:	e3a01007 	mov	r1, #7
    9b24:	e2422001 	sub	r2, r2, #1
    9b28:	e16f2f12 	clz	r2, r2
    9b2c:	e5983000 	ldr	r3, [r8]
    9b30:	e1a022a2 	lsr	r2, r2, #5
    9b34:	e1c33411 	bic	r3, r3, r1, lsl r4
    9b38:	e1834412 	orr	r4, r3, r2, lsl r4
    9b3c:	e5884000 	str	r4, [r8]
    9b40:	e5973000 	ldr	r3, [r7]
    9b44:	e3530000 	cmp	r3, #0
    9b48:	1a000016 	bne	9ba8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>
    9b4c:	e3560000 	cmp	r6, #0
    9b50:	0a00000a 	beq	9b80 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    9b54:	e5d53010 	ldrb	r3, [r5, #16]
    9b58:	e3530003 	cmp	r3, #3
    9b5c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9b60:	ea000006 	b	9b80 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    9b64:	00009be0 	.word	0x00009be0
    9b68:	00009bd0 	.word	0x00009bd0
    9b6c:	00009bc0 	.word	0x00009bc0
    9b70:	00009b74 	.word	0x00009b74
    9b74:	e1a00005 	mov	r0, r5
    9b78:	e3a01001 	mov	r1, #1
    9b7c:	eb0001e1 	bl	a308 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9b80:	e3a03000 	mov	r3, #0
    9b84:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9b88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9b8c:	e1560002 	cmp	r6, r2
    9b90:	1a000016 	bne	9bf0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
    9b94:	e1a00005 	mov	r0, r5
    9b98:	eb000202 	bl	a3a8 <CGPIOPin::SetAlternateFunction(unsigned int)>
    9b9c:	e3a03000 	mov	r3, #0
    9ba0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9ba4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9ba8:	eb002288 	bl	125d0 <LeaveCritical>
    9bac:	e3560000 	cmp	r6, #0
    9bb0:	0afffff2 	beq	9b80 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    9bb4:	eaffffe6 	b	9b54 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc0>
    9bb8:	eb00225a 	bl	12528 <EnterCritical>
    9bbc:	eaffffd6 	b	9b1c <CGPIOPin::SetMode(TGPIOMode, bool)+0x88>
    9bc0:	e1a00005 	mov	r0, r5
    9bc4:	e3a01002 	mov	r1, #2
    9bc8:	eb0001ce 	bl	a308 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9bcc:	eaffffeb 	b	9b80 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    9bd0:	e1a00005 	mov	r0, r5
    9bd4:	e3a01000 	mov	r1, #0
    9bd8:	eb000017 	bl	9c3c <CGPIOPin::Write(unsigned int)>
    9bdc:	eaffffe7 	b	9b80 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    9be0:	e1a00005 	mov	r0, r5
    9be4:	e3a01000 	mov	r1, #0
    9be8:	eb0001c6 	bl	a308 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9bec:	eaffffe3 	b	9b80 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
    9bf0:	e1a01002 	mov	r1, r2
    9bf4:	eb0001c3 	bl	a308 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9bf8:	e5d53010 	ldrb	r3, [r5, #16]
    9bfc:	e2431004 	sub	r1, r3, #4
    9c00:	eaffffe3 	b	9b94 <CGPIOPin::SetMode(TGPIOMode, bool)+0x100>
    9c04:	e59f102c 	ldr	r1, [pc, #44]	; 9c38 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
    9c08:	e3a0204f 	mov	r2, #79	; 0x4f
    9c0c:	e2810034 	add	r0, r1, #52	; 0x34
    9c10:	ebfffd48 	bl	9138 <assertion_failed>
    9c14:	e1a01002 	mov	r1, r2
    9c18:	eb0001ba 	bl	a308 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9c1c:	eaffffae 	b	9adc <CGPIOPin::SetMode(TGPIOMode, bool)+0x48>
    9c20:	e59f1010 	ldr	r1, [pc, #16]	; 9c38 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
    9c24:	e3a02068 	mov	r2, #104	; 0x68
    9c28:	e2810020 	add	r0, r1, #32
    9c2c:	ebfffd41 	bl	9138 <assertion_failed>
    9c30:	cccccccd 	.word	0xcccccccd
    9c34:	00019b48 	.word	0x00019b48
    9c38:	000175a8 	.word	0x000175a8

00009c3c <CGPIOPin::Write(unsigned int)>:
    9c3c:	e5903004 	ldr	r3, [r0, #4]
    9c40:	e92d4010 	push	{r4, lr}
    9c44:	e3530035 	cmp	r3, #53	; 0x35
    9c48:	8a000011 	bhi	9c94 <CGPIOPin::Write(unsigned int)+0x58>
    9c4c:	e5d03010 	ldrb	r3, [r0, #16]
    9c50:	e3530003 	cmp	r3, #3
    9c54:	8a000012 	bhi	9ca4 <CGPIOPin::Write(unsigned int)+0x68>
    9c58:	e3a02000 	mov	r2, #0
    9c5c:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
    9c60:	e3510001 	cmp	r1, #1
    9c64:	8a000012 	bhi	9cb4 <CGPIOPin::Write(unsigned int)+0x78>
    9c68:	e59f3054 	ldr	r3, [pc, #84]	; 9cc4 <CGPIOPin::Write(unsigned int)+0x88>
    9c6c:	e59fc054 	ldr	ip, [pc, #84]	; 9cc8 <CGPIOPin::Write(unsigned int)+0x8c>
    9c70:	e3510000 	cmp	r1, #0
    9c74:	e5801014 	str	r1, [r0, #20]
    9c78:	11a01003 	movne	r1, r3
    9c7c:	01a0100c 	moveq	r1, ip
    9c80:	e5903008 	ldr	r3, [r0, #8]
    9c84:	e590c00c 	ldr	ip, [r0, #12]
    9c88:	e781c003 	str	ip, [r1, r3]
    9c8c:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
    9c90:	e8bd8010 	pop	{r4, pc}
    9c94:	e59f1030 	ldr	r1, [pc, #48]	; 9ccc <CGPIOPin::Write(unsigned int)+0x90>
    9c98:	e3a02091 	mov	r2, #145	; 0x91
    9c9c:	e2810020 	add	r0, r1, #32
    9ca0:	ebfffd24 	bl	9138 <assertion_failed>
    9ca4:	e59f1020 	ldr	r1, [pc, #32]	; 9ccc <CGPIOPin::Write(unsigned int)+0x90>
    9ca8:	e3a02094 	mov	r2, #148	; 0x94
    9cac:	e281004c 	add	r0, r1, #76	; 0x4c
    9cb0:	ebfffd20 	bl	9138 <assertion_failed>
    9cb4:	e59f1010 	ldr	r1, [pc, #16]	; 9ccc <CGPIOPin::Write(unsigned int)+0x90>
    9cb8:	e3a02098 	mov	r2, #152	; 0x98
    9cbc:	e2810070 	add	r0, r1, #112	; 0x70
    9cc0:	ebfffd1c 	bl	9138 <assertion_failed>
    9cc4:	2020001c 	.word	0x2020001c
    9cc8:	20200028 	.word	0x20200028
    9ccc:	000175a8 	.word	0x000175a8

00009cd0 <CGPIOPin::Read() const>:
    9cd0:	e5903004 	ldr	r3, [r0, #4]
    9cd4:	e92d4010 	push	{r4, lr}
    9cd8:	e3530035 	cmp	r3, #53	; 0x35
    9cdc:	8a00000f 	bhi	9d20 <CGPIOPin::Read() const+0x50>
    9ce0:	e5d03010 	ldrb	r3, [r0, #16]
    9ce4:	e2432002 	sub	r2, r3, #2
    9ce8:	e3530000 	cmp	r3, #0
    9cec:	13520001 	cmpne	r2, #1
    9cf0:	8a00000e 	bhi	9d30 <CGPIOPin::Read() const+0x60>
    9cf4:	e3a03000 	mov	r3, #0
    9cf8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9cfc:	e59f103c 	ldr	r1, [pc, #60]	; 9d40 <CGPIOPin::Read() const+0x70>
    9d00:	e590c008 	ldr	ip, [r0, #8]
    9d04:	e590200c 	ldr	r2, [r0, #12]
    9d08:	e79c1001 	ldr	r1, [ip, r1]
    9d0c:	e1110002 	tst	r1, r2
    9d10:	13a00001 	movne	r0, #1
    9d14:	01a00003 	moveq	r0, r3
    9d18:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9d1c:	e8bd8010 	pop	{r4, pc}
    9d20:	e59f101c 	ldr	r1, [pc, #28]	; 9d44 <CGPIOPin::Read() const+0x74>
    9d24:	e3a020a4 	mov	r2, #164	; 0xa4
    9d28:	e2810020 	add	r0, r1, #32
    9d2c:	ebfffd01 	bl	9138 <assertion_failed>
    9d30:	e59f100c 	ldr	r1, [pc, #12]	; 9d44 <CGPIOPin::Read() const+0x74>
    9d34:	e3a020a8 	mov	r2, #168	; 0xa8
    9d38:	e2810090 	add	r0, r1, #144	; 0x90
    9d3c:	ebfffcfd 	bl	9138 <assertion_failed>
    9d40:	20200034 	.word	0x20200034
    9d44:	000175a8 	.word	0x000175a8

00009d48 <CGPIOPin::Invert()>:
    9d48:	e5d02010 	ldrb	r2, [r0, #16]
    9d4c:	e3520001 	cmp	r2, #1
    9d50:	1a000002 	bne	9d60 <CGPIOPin::Invert()+0x18>
    9d54:	e5901014 	ldr	r1, [r0, #20]
    9d58:	e2211001 	eor	r1, r1, #1
    9d5c:	eaffffb6 	b	9c3c <CGPIOPin::Write(unsigned int)>
    9d60:	e59f100c 	ldr	r1, [pc, #12]	; 9d74 <CGPIOPin::Invert()+0x2c>
    9d64:	e92d4010 	push	{r4, lr}
    9d68:	e3a020b5 	mov	r2, #181	; 0xb5
    9d6c:	e28100ec 	add	r0, r1, #236	; 0xec
    9d70:	ebfffcf0 	bl	9138 <assertion_failed>
    9d74:	000175a8 	.word	0x000175a8

00009d78 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
    9d78:	e5d0c010 	ldrb	ip, [r0, #16]
    9d7c:	e92d4010 	push	{r4, lr}
    9d80:	e24ce002 	sub	lr, ip, #2
    9d84:	e35c0000 	cmp	ip, #0
    9d88:	135e0001 	cmpne	lr, #1
    9d8c:	8a000028 	bhi	9e34 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
    9d90:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
    9d94:	e35c0006 	cmp	ip, #6
    9d98:	1a000011 	bne	9de4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
    9d9c:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
    9da0:	e35c0006 	cmp	ip, #6
    9da4:	1a000012 	bne	9df4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
    9da8:	e3510000 	cmp	r1, #0
    9dac:	0a000014 	beq	9e04 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
    9db0:	e590c01c 	ldr	ip, [r0, #28]
    9db4:	e35c0000 	cmp	ip, #0
    9db8:	1a000015 	bne	9e14 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
    9dbc:	e590c018 	ldr	ip, [r0, #24]
    9dc0:	e580101c 	str	r1, [r0, #28]
    9dc4:	e35c0000 	cmp	ip, #0
    9dc8:	e5802020 	str	r2, [r0, #32]
    9dcc:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    9dd0:	0a000013 	beq	9e24 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
    9dd4:	e8bd4010 	pop	{r4, lr}
    9dd8:	e1a01000 	mov	r1, r0
    9ddc:	e1a0000c 	mov	r0, ip
    9de0:	ea002947 	b	14304 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    9de4:	e59f1058 	ldr	r1, [pc, #88]	; 9e44 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9de8:	e3a020c0 	mov	r2, #192	; 0xc0
    9dec:	e2810f42 	add	r0, r1, #264	; 0x108
    9df0:	ebfffcd0 	bl	9138 <assertion_failed>
    9df4:	e59f1048 	ldr	r1, [pc, #72]	; 9e44 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9df8:	e3a020c1 	mov	r2, #193	; 0xc1
    9dfc:	e2810f4b 	add	r0, r1, #300	; 0x12c
    9e00:	ebfffccc 	bl	9138 <assertion_failed>
    9e04:	e59f1038 	ldr	r1, [pc, #56]	; 9e44 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9e08:	e3a020c3 	mov	r2, #195	; 0xc3
    9e0c:	e2810f55 	add	r0, r1, #340	; 0x154
    9e10:	ebfffcc8 	bl	9138 <assertion_failed>
    9e14:	e59f1028 	ldr	r1, [pc, #40]	; 9e44 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9e18:	e3a020c4 	mov	r2, #196	; 0xc4
    9e1c:	e2810f59 	add	r0, r1, #356	; 0x164
    9e20:	ebfffcc4 	bl	9138 <assertion_failed>
    9e24:	e59f1018 	ldr	r1, [pc, #24]	; 9e44 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9e28:	e3a020cb 	mov	r2, #203	; 0xcb
    9e2c:	e2810f5d 	add	r0, r1, #372	; 0x174
    9e30:	ebfffcc0 	bl	9138 <assertion_failed>
    9e34:	e59f1008 	ldr	r1, [pc, #8]	; 9e44 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9e38:	e3a020be 	mov	r2, #190	; 0xbe
    9e3c:	e2810090 	add	r0, r1, #144	; 0x90
    9e40:	ebfffcbc 	bl	9138 <assertion_failed>
    9e44:	000175a8 	.word	0x000175a8

00009e48 <CGPIOPin::DisconnectInterrupt()>:
    9e48:	e5d03010 	ldrb	r3, [r0, #16]
    9e4c:	e92d4010 	push	{r4, lr}
    9e50:	e2432002 	sub	r2, r3, #2
    9e54:	e3530000 	cmp	r3, #0
    9e58:	13520001 	cmpne	r2, #1
    9e5c:	8a000020 	bhi	9ee4 <CGPIOPin::DisconnectInterrupt()+0x9c>
    9e60:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9e64:	e1a01000 	mov	r1, r0
    9e68:	e3530006 	cmp	r3, #6
    9e6c:	1a00000c 	bne	9ea4 <CGPIOPin::DisconnectInterrupt()+0x5c>
    9e70:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    9e74:	e3530006 	cmp	r3, #6
    9e78:	1a00000d 	bne	9eb4 <CGPIOPin::DisconnectInterrupt()+0x6c>
    9e7c:	e590301c 	ldr	r3, [r0, #28]
    9e80:	e3530000 	cmp	r3, #0
    9e84:	0a00000e 	beq	9ec4 <CGPIOPin::DisconnectInterrupt()+0x7c>
    9e88:	e3a03000 	mov	r3, #0
    9e8c:	e5900018 	ldr	r0, [r0, #24]
    9e90:	e581301c 	str	r3, [r1, #28]
    9e94:	e1500003 	cmp	r0, r3
    9e98:	0a00000d 	beq	9ed4 <CGPIOPin::DisconnectInterrupt()+0x8c>
    9e9c:	e8bd4010 	pop	{r4, lr}
    9ea0:	ea00293b 	b	14394 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    9ea4:	e59f1048 	ldr	r1, [pc, #72]	; 9ef4 <CGPIOPin::DisconnectInterrupt()+0xac>
    9ea8:	e3a020d5 	mov	r2, #213	; 0xd5
    9eac:	e2810f42 	add	r0, r1, #264	; 0x108
    9eb0:	ebfffca0 	bl	9138 <assertion_failed>
    9eb4:	e59f1038 	ldr	r1, [pc, #56]	; 9ef4 <CGPIOPin::DisconnectInterrupt()+0xac>
    9eb8:	e3a020d6 	mov	r2, #214	; 0xd6
    9ebc:	e2810f4b 	add	r0, r1, #300	; 0x12c
    9ec0:	ebfffc9c 	bl	9138 <assertion_failed>
    9ec4:	e59f1028 	ldr	r1, [pc, #40]	; 9ef4 <CGPIOPin::DisconnectInterrupt()+0xac>
    9ec8:	e3a020d8 	mov	r2, #216	; 0xd8
    9ecc:	e2810f61 	add	r0, r1, #388	; 0x184
    9ed0:	ebfffc98 	bl	9138 <assertion_failed>
    9ed4:	e59f1018 	ldr	r1, [pc, #24]	; 9ef4 <CGPIOPin::DisconnectInterrupt()+0xac>
    9ed8:	e3a020db 	mov	r2, #219	; 0xdb
    9edc:	e2810f5d 	add	r0, r1, #372	; 0x174
    9ee0:	ebfffc94 	bl	9138 <assertion_failed>
    9ee4:	e59f1008 	ldr	r1, [pc, #8]	; 9ef4 <CGPIOPin::DisconnectInterrupt()+0xac>
    9ee8:	e3a020d3 	mov	r2, #211	; 0xd3
    9eec:	e2810090 	add	r0, r1, #144	; 0x90
    9ef0:	ebfffc90 	bl	9138 <assertion_failed>
    9ef4:	000175a8 	.word	0x000175a8

00009ef8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    9ef8:	e5d03010 	ldrb	r3, [r0, #16]
    9efc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9f00:	e2432002 	sub	r2, r3, #2
    9f04:	e3530000 	cmp	r3, #0
    9f08:	13520001 	cmpne	r2, #1
    9f0c:	8a000030 	bhi	9fd4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
    9f10:	e590301c 	ldr	r3, [r0, #28]
    9f14:	e1a04000 	mov	r4, r0
    9f18:	e3530000 	cmp	r3, #0
    9f1c:	0a00001c 	beq	9f94 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
    9f20:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9f24:	e3530006 	cmp	r3, #6
    9f28:	1a00001d 	bne	9fa4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
    9f2c:	e3510005 	cmp	r1, #5
    9f30:	8a00001f 	bhi	9fb4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xbc>
    9f34:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    9f38:	e1530001 	cmp	r3, r1
    9f3c:	0a000020 	beq	9fc4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
    9f40:	e59f709c 	ldr	r7, [pc, #156]	; 9fe4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
    9f44:	e5903008 	ldr	r3, [r0, #8]
    9f48:	e5970000 	ldr	r0, [r7]
    9f4c:	e59f6094 	ldr	r6, [pc, #148]	; 9fe8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
    9f50:	e0815081 	add	r5, r1, r1, lsl #1
    9f54:	e3500000 	cmp	r0, #0
    9f58:	e5c41025 	strb	r1, [r4, #37]	; 0x25
    9f5c:	e1a05105 	lsl	r5, r5, #2
    9f60:	e0836006 	add	r6, r3, r6
    9f64:	1a000008 	bne	9f8c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
    9f68:	e594200c 	ldr	r2, [r4, #12]
    9f6c:	e7963005 	ldr	r3, [r6, r5]
    9f70:	e1833002 	orr	r3, r3, r2
    9f74:	e7863005 	str	r3, [r6, r5]
    9f78:	e5973000 	ldr	r3, [r7]
    9f7c:	e3530000 	cmp	r3, #0
    9f80:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9f84:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9f88:	ea002190 	b	125d0 <LeaveCritical>
    9f8c:	eb002165 	bl	12528 <EnterCritical>
    9f90:	eafffff4 	b	9f68 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x70>
    9f94:	e59f1050 	ldr	r1, [pc, #80]	; 9fec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9f98:	e3a020e4 	mov	r2, #228	; 0xe4
    9f9c:	e2810f61 	add	r0, r1, #388	; 0x184
    9fa0:	ebfffc64 	bl	9138 <assertion_failed>
    9fa4:	e59f1040 	ldr	r1, [pc, #64]	; 9fec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9fa8:	e3a020e6 	mov	r2, #230	; 0xe6
    9fac:	e2810f42 	add	r0, r1, #264	; 0x108
    9fb0:	ebfffc60 	bl	9138 <assertion_failed>
    9fb4:	e59f1030 	ldr	r1, [pc, #48]	; 9fec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9fb8:	e3a020e7 	mov	r2, #231	; 0xe7
    9fbc:	e2810f65 	add	r0, r1, #404	; 0x194
    9fc0:	ebfffc5c 	bl	9138 <assertion_failed>
    9fc4:	e59f1020 	ldr	r1, [pc, #32]	; 9fec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9fc8:	e3a020e8 	mov	r2, #232	; 0xe8
    9fcc:	e2810f6e 	add	r0, r1, #440	; 0x1b8
    9fd0:	ebfffc58 	bl	9138 <assertion_failed>
    9fd4:	e59f1010 	ldr	r1, [pc, #16]	; 9fec <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9fd8:	e3a020e3 	mov	r2, #227	; 0xe3
    9fdc:	e2810090 	add	r0, r1, #144	; 0x90
    9fe0:	ebfffc54 	bl	9138 <assertion_failed>
    9fe4:	00019b48 	.word	0x00019b48
    9fe8:	2020004c 	.word	0x2020004c
    9fec:	000175a8 	.word	0x000175a8

00009ff0 <CGPIOPin::DisableInterrupt()>:
    9ff0:	e5d03010 	ldrb	r3, [r0, #16]
    9ff4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9ff8:	e2432002 	sub	r2, r3, #2
    9ffc:	e3530000 	cmp	r3, #0
    a000:	13520001 	cmpne	r2, #1
    a004:	8a00001e 	bhi	a084 <CGPIOPin::DisableInterrupt()+0x94>
    a008:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    a00c:	e1a05000 	mov	r5, r0
    a010:	e3530005 	cmp	r3, #5
    a014:	8a000016 	bhi	a074 <CGPIOPin::DisableInterrupt()+0x84>
    a018:	e59f7074 	ldr	r7, [pc, #116]	; a094 <CGPIOPin::DisableInterrupt()+0xa4>
    a01c:	e5902008 	ldr	r2, [r0, #8]
    a020:	e5970000 	ldr	r0, [r7]
    a024:	e59f606c 	ldr	r6, [pc, #108]	; a098 <CGPIOPin::DisableInterrupt()+0xa8>
    a028:	e0833083 	add	r3, r3, r3, lsl #1
    a02c:	e3500000 	cmp	r0, #0
    a030:	e1a04103 	lsl	r4, r3, #2
    a034:	e0826006 	add	r6, r2, r6
    a038:	1a000009 	bne	a064 <CGPIOPin::DisableInterrupt()+0x74>
    a03c:	e7963004 	ldr	r3, [r6, r4]
    a040:	e595200c 	ldr	r2, [r5, #12]
    a044:	e1c33002 	bic	r3, r3, r2
    a048:	e7863004 	str	r3, [r6, r4]
    a04c:	e5973000 	ldr	r3, [r7]
    a050:	e3530000 	cmp	r3, #0
    a054:	1a000004 	bne	a06c <CGPIOPin::DisableInterrupt()+0x7c>
    a058:	e3a03006 	mov	r3, #6
    a05c:	e5c53025 	strb	r3, [r5, #37]	; 0x25
    a060:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a064:	eb00212f 	bl	12528 <EnterCritical>
    a068:	eafffff3 	b	a03c <CGPIOPin::DisableInterrupt()+0x4c>
    a06c:	eb002157 	bl	125d0 <LeaveCritical>
    a070:	eafffff8 	b	a058 <CGPIOPin::DisableInterrupt()+0x68>
    a074:	e59f1020 	ldr	r1, [pc, #32]	; a09c <CGPIOPin::DisableInterrupt()+0xac>
    a078:	e3a020fb 	mov	r2, #251	; 0xfb
    a07c:	e2810f75 	add	r0, r1, #468	; 0x1d4
    a080:	ebfffc2c 	bl	9138 <assertion_failed>
    a084:	e59f1010 	ldr	r1, [pc, #16]	; a09c <CGPIOPin::DisableInterrupt()+0xac>
    a088:	e3a020f9 	mov	r2, #249	; 0xf9
    a08c:	e2810090 	add	r0, r1, #144	; 0x90
    a090:	ebfffc28 	bl	9138 <assertion_failed>
    a094:	00019b48 	.word	0x00019b48
    a098:	2020004c 	.word	0x2020004c
    a09c:	000175a8 	.word	0x000175a8

0000a0a0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    a0a0:	e5d03010 	ldrb	r3, [r0, #16]
    a0a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a0a8:	e2432002 	sub	r2, r3, #2
    a0ac:	e3530000 	cmp	r3, #0
    a0b0:	13520001 	cmpne	r2, #1
    a0b4:	8a000030 	bhi	a17c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
    a0b8:	e590301c 	ldr	r3, [r0, #28]
    a0bc:	e1a04000 	mov	r4, r0
    a0c0:	e3530000 	cmp	r3, #0
    a0c4:	0a00001c 	beq	a13c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
    a0c8:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    a0cc:	e3530006 	cmp	r3, #6
    a0d0:	1a00001d 	bne	a14c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
    a0d4:	e3510005 	cmp	r1, #5
    a0d8:	8a00001f 	bhi	a15c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xbc>
    a0dc:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    a0e0:	e1530001 	cmp	r3, r1
    a0e4:	0a000020 	beq	a16c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
    a0e8:	e59f709c 	ldr	r7, [pc, #156]	; a18c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
    a0ec:	e5903008 	ldr	r3, [r0, #8]
    a0f0:	e5970000 	ldr	r0, [r7]
    a0f4:	e59f6094 	ldr	r6, [pc, #148]	; a190 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
    a0f8:	e0815081 	add	r5, r1, r1, lsl #1
    a0fc:	e3500000 	cmp	r0, #0
    a100:	e5c41026 	strb	r1, [r4, #38]	; 0x26
    a104:	e1a05105 	lsl	r5, r5, #2
    a108:	e0836006 	add	r6, r3, r6
    a10c:	1a000008 	bne	a134 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
    a110:	e594200c 	ldr	r2, [r4, #12]
    a114:	e7963005 	ldr	r3, [r6, r5]
    a118:	e1833002 	orr	r3, r3, r2
    a11c:	e7863005 	str	r3, [r6, r5]
    a120:	e5973000 	ldr	r3, [r7]
    a124:	e3530000 	cmp	r3, #0
    a128:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a12c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a130:	ea002126 	b	125d0 <LeaveCritical>
    a134:	eb0020fb 	bl	12528 <EnterCritical>
    a138:	eafffff4 	b	a110 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x70>
    a13c:	e59f1050 	ldr	r1, [pc, #80]	; a194 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    a140:	e59f2050 	ldr	r2, [pc, #80]	; a198 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
    a144:	e2810f61 	add	r0, r1, #388	; 0x184
    a148:	ebfffbfa 	bl	9138 <assertion_failed>
    a14c:	e59f1040 	ldr	r1, [pc, #64]	; a194 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    a150:	e59f2044 	ldr	r2, [pc, #68]	; a19c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
    a154:	e2810f4b 	add	r0, r1, #300	; 0x12c
    a158:	ebfffbf6 	bl	9138 <assertion_failed>
    a15c:	e59f1030 	ldr	r1, [pc, #48]	; a194 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    a160:	e3a02e11 	mov	r2, #272	; 0x110
    a164:	e2810f65 	add	r0, r1, #404	; 0x194
    a168:	ebfffbf2 	bl	9138 <assertion_failed>
    a16c:	e59f1020 	ldr	r1, [pc, #32]	; a194 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    a170:	e59f2028 	ldr	r2, [pc, #40]	; a1a0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
    a174:	e2810f7e 	add	r0, r1, #504	; 0x1f8
    a178:	ebfffbee 	bl	9138 <assertion_failed>
    a17c:	e59f1010 	ldr	r1, [pc, #16]	; a194 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    a180:	e3a02f43 	mov	r2, #268	; 0x10c
    a184:	e2810090 	add	r0, r1, #144	; 0x90
    a188:	ebfffbea 	bl	9138 <assertion_failed>
    a18c:	00019b48 	.word	0x00019b48
    a190:	2020004c 	.word	0x2020004c
    a194:	000175a8 	.word	0x000175a8
    a198:	0000010d 	.word	0x0000010d
    a19c:	0000010f 	.word	0x0000010f
    a1a0:	00000111 	.word	0x00000111

0000a1a4 <CGPIOPin::DisableInterrupt2()>:
    a1a4:	e5d03010 	ldrb	r3, [r0, #16]
    a1a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a1ac:	e2432002 	sub	r2, r3, #2
    a1b0:	e3530000 	cmp	r3, #0
    a1b4:	13520001 	cmpne	r2, #1
    a1b8:	8a00001e 	bhi	a238 <CGPIOPin::DisableInterrupt2()+0x94>
    a1bc:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    a1c0:	e1a05000 	mov	r5, r0
    a1c4:	e3530005 	cmp	r3, #5
    a1c8:	8a000016 	bhi	a228 <CGPIOPin::DisableInterrupt2()+0x84>
    a1cc:	e59f7074 	ldr	r7, [pc, #116]	; a248 <CGPIOPin::DisableInterrupt2()+0xa4>
    a1d0:	e5902008 	ldr	r2, [r0, #8]
    a1d4:	e5970000 	ldr	r0, [r7]
    a1d8:	e59f606c 	ldr	r6, [pc, #108]	; a24c <CGPIOPin::DisableInterrupt2()+0xa8>
    a1dc:	e0833083 	add	r3, r3, r3, lsl #1
    a1e0:	e3500000 	cmp	r0, #0
    a1e4:	e1a04103 	lsl	r4, r3, #2
    a1e8:	e0826006 	add	r6, r2, r6
    a1ec:	1a000009 	bne	a218 <CGPIOPin::DisableInterrupt2()+0x74>
    a1f0:	e7963004 	ldr	r3, [r6, r4]
    a1f4:	e595200c 	ldr	r2, [r5, #12]
    a1f8:	e1c33002 	bic	r3, r3, r2
    a1fc:	e7863004 	str	r3, [r6, r4]
    a200:	e5973000 	ldr	r3, [r7]
    a204:	e3530000 	cmp	r3, #0
    a208:	1a000004 	bne	a220 <CGPIOPin::DisableInterrupt2()+0x7c>
    a20c:	e3a03006 	mov	r3, #6
    a210:	e5c53026 	strb	r3, [r5, #38]	; 0x26
    a214:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a218:	eb0020c2 	bl	12528 <EnterCritical>
    a21c:	eafffff3 	b	a1f0 <CGPIOPin::DisableInterrupt2()+0x4c>
    a220:	eb0020ea 	bl	125d0 <LeaveCritical>
    a224:	eafffff8 	b	a20c <CGPIOPin::DisableInterrupt2()+0x68>
    a228:	e59f1020 	ldr	r1, [pc, #32]	; a250 <CGPIOPin::DisableInterrupt2()+0xac>
    a22c:	e3a02f49 	mov	r2, #292	; 0x124
    a230:	e2810f85 	add	r0, r1, #532	; 0x214
    a234:	ebfffbbf 	bl	9138 <assertion_failed>
    a238:	e59f1010 	ldr	r1, [pc, #16]	; a250 <CGPIOPin::DisableInterrupt2()+0xac>
    a23c:	e59f2010 	ldr	r2, [pc, #16]	; a254 <CGPIOPin::DisableInterrupt2()+0xb0>
    a240:	e2810090 	add	r0, r1, #144	; 0x90
    a244:	ebfffbbb 	bl	9138 <assertion_failed>
    a248:	00019b48 	.word	0x00019b48
    a24c:	2020004c 	.word	0x2020004c
    a250:	000175a8 	.word	0x000175a8
    a254:	00000122 	.word	0x00000122

0000a258 <CGPIOPin::AcknowledgeInterrupt()>:
    a258:	e590301c 	ldr	r3, [r0, #28]
    a25c:	e92d4010 	push	{r4, lr}
    a260:	e3530000 	cmp	r3, #0
    a264:	0a000009 	beq	a290 <CGPIOPin::AcknowledgeInterrupt()+0x38>
    a268:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
    a26c:	e3530000 	cmp	r3, #0
    a270:	1a00000a 	bne	a2a0 <CGPIOPin::AcknowledgeInterrupt()+0x48>
    a274:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a278:	e59f2030 	ldr	r2, [pc, #48]	; a2b0 <CGPIOPin::AcknowledgeInterrupt()+0x58>
    a27c:	e590c00c 	ldr	ip, [r0, #12]
    a280:	e5901008 	ldr	r1, [r0, #8]
    a284:	e781c002 	str	ip, [r1, r2]
    a288:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a28c:	e8bd8010 	pop	{r4, pc}
    a290:	e59f101c 	ldr	r1, [pc, #28]	; a2b4 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
    a294:	e59f201c 	ldr	r2, [pc, #28]	; a2b8 <CGPIOPin::AcknowledgeInterrupt()+0x60>
    a298:	e2810f61 	add	r0, r1, #388	; 0x184
    a29c:	ebfffba5 	bl	9138 <assertion_failed>
    a2a0:	e59f100c 	ldr	r1, [pc, #12]	; a2b4 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
    a2a4:	e3a02f4d 	mov	r2, #308	; 0x134
    a2a8:	e2810f8e 	add	r0, r1, #568	; 0x238
    a2ac:	ebfffba1 	bl	9138 <assertion_failed>
    a2b0:	20200040 	.word	0x20200040
    a2b4:	000175a8 	.word	0x000175a8
    a2b8:	00000133 	.word	0x00000133

0000a2bc <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
    a2bc:	e3a03000 	mov	r3, #0
    a2c0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a2c4:	e1d13000 	bics	r3, r1, r0
    a2c8:	159f2018 	ldrne	r2, [pc, #24]	; a2e8 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
    a2cc:	15823028 	strne	r3, [r2, #40]	; 0x28
    a2d0:	e0100001 	ands	r0, r0, r1
    a2d4:	159f300c 	ldrne	r3, [pc, #12]	; a2e8 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
    a2d8:	1583001c 	strne	r0, [r3, #28]
    a2dc:	e3a03000 	mov	r3, #0
    a2e0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a2e4:	e12fff1e 	bx	lr
    a2e8:	20200000 	.word	0x20200000

0000a2ec <CGPIOPin::ReadAll()>:
    a2ec:	e3a03000 	mov	r3, #0
    a2f0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a2f4:	e59f2008 	ldr	r2, [pc, #8]	; a304 <CGPIOPin::ReadAll()+0x18>
    a2f8:	e5920034 	ldr	r0, [r2, #52]	; 0x34
    a2fc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a300:	e12fff1e 	bx	lr
    a304:	20200000 	.word	0x20200000

0000a308 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
    a308:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a30c:	e59f5080 	ldr	r5, [pc, #128]	; a394 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x8c>
    a310:	e1a06000 	mov	r6, r0
    a314:	e5950000 	ldr	r0, [r5]
    a318:	e1a07001 	mov	r7, r1
    a31c:	e3500000 	cmp	r0, #0
    a320:	1a000015 	bne	a37c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x74>
    a324:	e3a04000 	mov	r4, #0
    a328:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    a32c:	e3570002 	cmp	r7, #2
    a330:	e5969008 	ldr	r9, [r6, #8]
    a334:	e59f805c 	ldr	r8, [pc, #92]	; a398 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
    a338:	8a000011 	bhi	a384 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x7c>
    a33c:	e59fa058 	ldr	sl, [pc, #88]	; a39c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
    a340:	e3a00005 	mov	r0, #5
    a344:	e58a7094 	str	r7, [sl, #148]	; 0x94
    a348:	eb0019d8 	bl	10ab0 <CTimer::SimpleusDelay(unsigned int)>
    a34c:	e596300c 	ldr	r3, [r6, #12]
    a350:	e3a00005 	mov	r0, #5
    a354:	e7893008 	str	r3, [r9, r8]
    a358:	eb0019d4 	bl	10ab0 <CTimer::SimpleusDelay(unsigned int)>
    a35c:	e58a4094 	str	r4, [sl, #148]	; 0x94
    a360:	e7894008 	str	r4, [r9, r8]
    a364:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
    a368:	e5953000 	ldr	r3, [r5]
    a36c:	e3530000 	cmp	r3, #0
    a370:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a374:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    a378:	ea002094 	b	125d0 <LeaveCritical>
    a37c:	eb002069 	bl	12528 <EnterCritical>
    a380:	eaffffe7 	b	a324 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x1c>
    a384:	e59f1014 	ldr	r1, [pc, #20]	; a3a0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
    a388:	e59f2014 	ldr	r2, [pc, #20]	; a3a4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x9c>
    a38c:	e2810f91 	add	r0, r1, #580	; 0x244
    a390:	ebfffb68 	bl	9138 <assertion_failed>
    a394:	00019b48 	.word	0x00019b48
    a398:	20200098 	.word	0x20200098
    a39c:	20200000 	.word	0x20200000
    a3a0:	000175a8 	.word	0x000175a8
    a3a4:	00000165 	.word	0x00000165

0000a3a8 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    a3a8:	e5903004 	ldr	r3, [r0, #4]
    a3ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a3b0:	e3530035 	cmp	r3, #53	; 0x35
    a3b4:	8a00001e 	bhi	a434 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
    a3b8:	e59f2094 	ldr	r2, [pc, #148]	; a454 <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
    a3bc:	e1a06001 	mov	r6, r1
    a3c0:	e3510005 	cmp	r1, #5
    a3c4:	e0821392 	umull	r1, r2, r2, r3
    a3c8:	e1a021a2 	lsr	r2, r2, #3
    a3cc:	e2820302 	add	r0, r2, #134217728	; 0x8000000
    a3d0:	e0822102 	add	r2, r2, r2, lsl #2
    a3d4:	e2800702 	add	r0, r0, #524288	; 0x80000
    a3d8:	e0433082 	sub	r3, r3, r2, lsl #1
    a3dc:	e1a05100 	lsl	r5, r0, #2
    a3e0:	e0834083 	add	r4, r3, r3, lsl #1
    a3e4:	8a000016 	bhi	a444 <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
    a3e8:	e59f7068 	ldr	r7, [pc, #104]	; a458 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
    a3ec:	e5970000 	ldr	r0, [r7]
    a3f0:	e3500000 	cmp	r0, #0
    a3f4:	1a00000c 	bne	a42c <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
    a3f8:	e3a03007 	mov	r3, #7
    a3fc:	e59f1058 	ldr	r1, [pc, #88]	; a45c <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
    a400:	e5952000 	ldr	r2, [r5]
    a404:	e0811106 	add	r1, r1, r6, lsl #2
    a408:	e5911260 	ldr	r1, [r1, #608]	; 0x260
    a40c:	e1c23413 	bic	r3, r2, r3, lsl r4
    a410:	e1833411 	orr	r3, r3, r1, lsl r4
    a414:	e5853000 	str	r3, [r5]
    a418:	e5973000 	ldr	r3, [r7]
    a41c:	e3530000 	cmp	r3, #0
    a420:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a424:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a428:	ea002068 	b	125d0 <LeaveCritical>
    a42c:	eb00203d 	bl	12528 <EnterCritical>
    a430:	eafffff0 	b	a3f8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
    a434:	e59f1024 	ldr	r1, [pc, #36]	; a460 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    a438:	e59f2024 	ldr	r2, [pc, #36]	; a464 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    a43c:	e2810020 	add	r0, r1, #32
    a440:	ebfffb3c 	bl	9138 <assertion_failed>
    a444:	e59f1014 	ldr	r1, [pc, #20]	; a460 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    a448:	e59f2018 	ldr	r2, [pc, #24]	; a468 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
    a44c:	e2810f9a 	add	r0, r1, #616	; 0x268
    a450:	ebfffb38 	bl	9138 <assertion_failed>
    a454:	cccccccd 	.word	0xcccccccd
    a458:	00019b48 	.word	0x00019b48
    a45c:	00017598 	.word	0x00017598
    a460:	000175a8 	.word	0x000175a8
    a464:	00000181 	.word	0x00000181
    a468:	00000185 	.word	0x00000185

0000a46c <CGPIOPin::InterruptHandler()>:
    a46c:	e5d03010 	ldrb	r3, [r0, #16]
    a470:	e92d4010 	push	{r4, lr}
    a474:	e2432002 	sub	r2, r3, #2
    a478:	e3530000 	cmp	r3, #0
    a47c:	13520001 	cmpne	r2, #1
    a480:	8a000013 	bhi	a4d4 <CGPIOPin::InterruptHandler()+0x68>
    a484:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    a488:	e3530005 	cmp	r3, #5
    a48c:	8a000005 	bhi	a4a8 <CGPIOPin::InterruptHandler()+0x3c>
    a490:	e590301c 	ldr	r3, [r0, #28]
    a494:	e3530000 	cmp	r3, #0
    a498:	0a000009 	beq	a4c4 <CGPIOPin::InterruptHandler()+0x58>
    a49c:	e8bd4010 	pop	{r4, lr}
    a4a0:	e5900020 	ldr	r0, [r0, #32]
    a4a4:	e12fff13 	bx	r3
    a4a8:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    a4ac:	e3530005 	cmp	r3, #5
    a4b0:	9afffff6 	bls	a490 <CGPIOPin::InterruptHandler()+0x24>
    a4b4:	e59f1028 	ldr	r1, [pc, #40]	; a4e4 <CGPIOPin::InterruptHandler()+0x78>
    a4b8:	e59f2028 	ldr	r2, [pc, #40]	; a4e8 <CGPIOPin::InterruptHandler()+0x7c>
    a4bc:	e2810f9e 	add	r0, r1, #632	; 0x278
    a4c0:	ebfffb1c 	bl	9138 <assertion_failed>
    a4c4:	e59f1018 	ldr	r1, [pc, #24]	; a4e4 <CGPIOPin::InterruptHandler()+0x78>
    a4c8:	e3a02f66 	mov	r2, #408	; 0x198
    a4cc:	e2810f61 	add	r0, r1, #388	; 0x184
    a4d0:	ebfffb18 	bl	9138 <assertion_failed>
    a4d4:	e59f1008 	ldr	r1, [pc, #8]	; a4e4 <CGPIOPin::InterruptHandler()+0x78>
    a4d8:	e3a02f65 	mov	r2, #404	; 0x194
    a4dc:	e2810090 	add	r0, r1, #144	; 0x90
    a4e0:	ebfffb14 	bl	9138 <assertion_failed>
    a4e4:	000175a8 	.word	0x000175a8
    a4e8:	00000196 	.word	0x00000196

0000a4ec <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    a4ec:	e3500035 	cmp	r0, #53	; 0x35
    a4f0:	e92d4070 	push	{r4, r5, r6, lr}
    a4f4:	8a000018 	bhi	a55c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    a4f8:	e3a02001 	mov	r2, #1
    a4fc:	e59f6068 	ldr	r6, [pc, #104]	; a56c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x80>
    a500:	e59f4068 	ldr	r4, [pc, #104]	; a570 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
    a504:	e5963000 	ldr	r3, [r6]
    a508:	e08442a0 	add	r4, r4, r0, lsr #5
    a50c:	e200501f 	and	r5, r0, #31
    a510:	e3530000 	cmp	r3, #0
    a514:	e1a04104 	lsl	r4, r4, #2
    a518:	e1a05512 	lsl	r5, r2, r5
    a51c:	1a00000b 	bne	a550 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
    a520:	e1e02005 	mvn	r2, r5
    a524:	e59f1048 	ldr	r1, [pc, #72]	; a574 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    a528:	e5943000 	ldr	r3, [r4]
    a52c:	e0033002 	and	r3, r3, r2
    a530:	e484300c 	str	r3, [r4], #12
    a534:	e1540001 	cmp	r4, r1
    a538:	9afffffa 	bls	a528 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
    a53c:	e5963000 	ldr	r3, [r6]
    a540:	e3530000 	cmp	r3, #0
    a544:	08bd8070 	popeq	{r4, r5, r6, pc}
    a548:	e8bd4070 	pop	{r4, r5, r6, lr}
    a54c:	ea00201f 	b	125d0 <LeaveCritical>
    a550:	e1a00003 	mov	r0, r3
    a554:	eb001ff3 	bl	12528 <EnterCritical>
    a558:	eafffff0 	b	a520 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
    a55c:	e59f1014 	ldr	r1, [pc, #20]	; a578 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
    a560:	e59f2014 	ldr	r2, [pc, #20]	; a57c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x90>
    a564:	e2810fb1 	add	r0, r1, #708	; 0x2c4
    a568:	ebfffaf2 	bl	9138 <assertion_failed>
    a56c:	00019b48 	.word	0x00019b48
    a570:	08080013 	.word	0x08080013
    a574:	2020008b 	.word	0x2020008b
    a578:	000175a8 	.word	0x000175a8
    a57c:	0000019e 	.word	0x0000019e

0000a580 <__static_initialization_and_destruction_0(int, int)>:
    a580:	e59f3014 	ldr	r3, [pc, #20]	; a59c <__static_initialization_and_destruction_0(int, int)+0x1c>
    a584:	e1510003 	cmp	r1, r3
    a588:	03500001 	cmpeq	r0, #1
    a58c:	03a02001 	moveq	r2, #1
    a590:	059f3008 	ldreq	r3, [pc, #8]	; a5a0 <__static_initialization_and_destruction_0(int, int)+0x20>
    a594:	05832000 	streq	r2, [r3]
    a598:	e12fff1e 	bx	lr
    a59c:	0000ffff 	.word	0x0000ffff
    a5a0:	00019b48 	.word	0x00019b48

0000a5a4 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    a5a4:	e3a02001 	mov	r2, #1
    a5a8:	e59f3004 	ldr	r3, [pc, #4]	; a5b4 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
    a5ac:	e5832000 	str	r2, [r3]
    a5b0:	e12fff1e 	bx	lr
    a5b4:	00019b48 	.word	0x00019b48

0000a5b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    a5b8:	e3a01000 	mov	r1, #0
    a5bc:	ea00000a 	b	a5ec <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    a5c0:	e3520009 	cmp	r2, #9
    a5c4:	8a000011 	bhi	a610 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    a5c8:	e3730001 	cmn	r3, #1
    a5cc:	13a02000 	movne	r2, #0
    a5d0:	03a02001 	moveq	r2, #1
    a5d4:	e1510003 	cmp	r1, r3
    a5d8:	91a01002 	movls	r1, r2
    a5dc:	83821001 	orrhi	r1, r2, #1
    a5e0:	e3510000 	cmp	r1, #0
    a5e4:	1a000009 	bne	a610 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
    a5e8:	e1a01003 	mov	r1, r3
    a5ec:	e0d0c0d1 	ldrsb	ip, [r0], #1
    a5f0:	e0813101 	add	r3, r1, r1, lsl #2
    a5f4:	e24c2030 	sub	r2, ip, #48	; 0x30
    a5f8:	e35c0000 	cmp	ip, #0
    a5fc:	e0823083 	add	r3, r2, r3, lsl #1
    a600:	e6ef2072 	uxtb	r2, r2
    a604:	1affffed 	bne	a5c0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    a608:	e1a00001 	mov	r0, r1
    a60c:	e12fff1e 	bx	lr
    a610:	e3e01000 	mvn	r1, #0
    a614:	e1a00001 	mov	r0, r1
    a618:	e12fff1e 	bx	lr

0000a61c <CKernelOptions::~CKernelOptions()>:
    a61c:	e3a02000 	mov	r2, #0
    a620:	e59f3004 	ldr	r3, [pc, #4]	; a62c <CKernelOptions::~CKernelOptions()+0x10>
    a624:	e5832000 	str	r2, [r3]
    a628:	e12fff1e 	bx	lr
    a62c:	00019b4c 	.word	0x00019b4c

0000a630 <CKernelOptions::GetWidth() const>:
    a630:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    a634:	e12fff1e 	bx	lr

0000a638 <CKernelOptions::GetHeight() const>:
    a638:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    a63c:	e12fff1e 	bx	lr

0000a640 <CKernelOptions::GetLogDevice() const>:
    a640:	e2800e81 	add	r0, r0, #2064	; 0x810
    a644:	e2800008 	add	r0, r0, #8
    a648:	e12fff1e 	bx	lr

0000a64c <CKernelOptions::GetLogLevel() const>:
    a64c:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    a650:	e12fff1e 	bx	lr

0000a654 <CKernelOptions::GetKeyMap() const>:
    a654:	e2800e83 	add	r0, r0, #2096	; 0x830
    a658:	e12fff1e 	bx	lr

0000a65c <CKernelOptions::GetUSBPowerDelay() const>:
    a65c:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    a660:	e12fff1e 	bx	lr

0000a664 <CKernelOptions::GetUSBFullSpeed() const>:
    a664:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    a668:	e12fff1e 	bx	lr

0000a66c <CKernelOptions::GetUSBIgnore() const>:
    a66c:	e2800e83 	add	r0, r0, #2096	; 0x830
    a670:	e2800009 	add	r0, r0, #9
    a674:	e12fff1e 	bx	lr

0000a678 <CKernelOptions::GetSoundDevice() const>:
    a678:	e2800d21 	add	r0, r0, #2112	; 0x840
    a67c:	e280000d 	add	r0, r0, #13
    a680:	e12fff1e 	bx	lr

0000a684 <CKernelOptions::GetSoundOption() const>:
    a684:	e5900864 	ldr	r0, [r0, #2148]	; 0x864
    a688:	e12fff1e 	bx	lr

0000a68c <CKernelOptions::GetCPUSpeed() const>:
    a68c:	e5d00868 	ldrb	r0, [r0, #2152]	; 0x868
    a690:	e12fff1e 	bx	lr

0000a694 <CKernelOptions::GetSoCMaxTemp() const>:
    a694:	e590086c 	ldr	r0, [r0, #2156]	; 0x86c
    a698:	e12fff1e 	bx	lr

0000a69c <CKernelOptions::GetGPIOFanPin() const>:
    a69c:	e5900870 	ldr	r0, [r0, #2160]	; 0x870
    a6a0:	e12fff1e 	bx	lr

0000a6a4 <CKernelOptions::GetTouchScreen() const>:
    a6a4:	e5d03874 	ldrb	r3, [r0, #2164]	; 0x874
    a6a8:	e3530000 	cmp	r3, #0
    a6ac:	12800e87 	addne	r0, r0, #2160	; 0x870
    a6b0:	12800008 	addne	r0, r0, #8
    a6b4:	01a00003 	moveq	r0, r3
    a6b8:	e12fff1e 	bx	lr

0000a6bc <CKernelOptions::Get()>:
    a6bc:	e59f3004 	ldr	r3, [pc, #4]	; a6c8 <CKernelOptions::Get()+0xc>
    a6c0:	e5930000 	ldr	r0, [r3]
    a6c4:	e12fff1e 	bx	lr
    a6c8:	00019b4c 	.word	0x00019b4c

0000a6cc <CKernelOptions::GetToken()>:
    a6cc:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    a6d0:	e1d320d0 	ldrsb	r2, [r3]
    a6d4:	e3520000 	cmp	r2, #0
    a6d8:	1a000005 	bne	a6f4 <CKernelOptions::GetToken()+0x28>
    a6dc:	ea000016 	b	a73c <CKernelOptions::GetToken()+0x70>
    a6e0:	e2833001 	add	r3, r3, #1
    a6e4:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    a6e8:	e1d320d0 	ldrsb	r2, [r3]
    a6ec:	e3520000 	cmp	r2, #0
    a6f0:	0a000011 	beq	a73c <CKernelOptions::GetToken()+0x70>
    a6f4:	e3520020 	cmp	r2, #32
    a6f8:	0afffff8 	beq	a6e0 <CKernelOptions::GetToken()+0x14>
    a6fc:	e1a02003 	mov	r2, r3
    a700:	ea000000 	b	a708 <CKernelOptions::GetToken()+0x3c>
    a704:	e1a02001 	mov	r2, r1
    a708:	e2821001 	add	r1, r2, #1
    a70c:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    a710:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    a714:	e35c0000 	cmp	ip, #0
    a718:	0a000008 	beq	a740 <CKernelOptions::GetToken()+0x74>
    a71c:	e35c0020 	cmp	ip, #32
    a720:	1afffff7 	bne	a704 <CKernelOptions::GetToken()+0x38>
    a724:	e3a0c000 	mov	ip, #0
    a728:	e2822002 	add	r2, r2, #2
    a72c:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    a730:	e5c1c000 	strb	ip, [r1]
    a734:	e1a00003 	mov	r0, r3
    a738:	e12fff1e 	bx	lr
    a73c:	e3a03000 	mov	r3, #0
    a740:	e1a00003 	mov	r0, r3
    a744:	e12fff1e 	bx	lr

0000a748 <CKernelOptions::GetOptionValue(char*)>:
    a748:	e1d030d0 	ldrsb	r3, [r0]
    a74c:	e3530000 	cmp	r3, #0
    a750:	1a000003 	bne	a764 <CKernelOptions::GetOptionValue(char*)+0x1c>
    a754:	ea000007 	b	a778 <CKernelOptions::GetOptionValue(char*)+0x30>
    a758:	e1f030d1 	ldrsb	r3, [r0, #1]!
    a75c:	e3530000 	cmp	r3, #0
    a760:	0a000004 	beq	a778 <CKernelOptions::GetOptionValue(char*)+0x30>
    a764:	e353003d 	cmp	r3, #61	; 0x3d
    a768:	1afffffa 	bne	a758 <CKernelOptions::GetOptionValue(char*)+0x10>
    a76c:	e3a03000 	mov	r3, #0
    a770:	e4c03001 	strb	r3, [r0], #1
    a774:	e12fff1e 	bx	lr
    a778:	e1a00003 	mov	r0, r3
    a77c:	e12fff1e 	bx	lr

0000a780 <CKernelOptions::GetDecimal(char*)>:
    a780:	e2503000 	subs	r3, r0, #0
    a784:	0a000003 	beq	a798 <CKernelOptions::GetDecimal(char*)+0x18>
    a788:	e1d330d0 	ldrsb	r3, [r3]
    a78c:	e3530000 	cmp	r3, #0
    a790:	0a000000 	beq	a798 <CKernelOptions::GetDecimal(char*)+0x18>
    a794:	eaffff87 	b	a5b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a798:	e3e00000 	mvn	r0, #0
    a79c:	e12fff1e 	bx	lr

0000a7a0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
    a7a0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a7a4:	e3520000 	cmp	r2, #0
    a7a8:	e24dd00c 	sub	sp, sp, #12
    a7ac:	028d6004 	addeq	r6, sp, #4
    a7b0:	0a000013 	beq	a804 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x64>
    a7b4:	e1a05001 	mov	r5, r1
    a7b8:	e59f706c 	ldr	r7, [pc, #108]	; a82c <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x8c>
    a7bc:	e2424001 	sub	r4, r2, #1
    a7c0:	e28d6004 	add	r6, sp, #4
    a7c4:	e1a02006 	mov	r2, r6
    a7c8:	e1a01007 	mov	r1, r7
    a7cc:	eb001a05 	bl	10fe8 <strtok_r>
    a7d0:	e2503000 	subs	r3, r0, #0
    a7d4:	e2444001 	sub	r4, r4, #1
    a7d8:	0a000010 	beq	a820 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x80>
    a7dc:	e1d330d0 	ldrsb	r3, [r3]
    a7e0:	e3530000 	cmp	r3, #0
    a7e4:	0a00000d 	beq	a820 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x80>
    a7e8:	ebffff72 	bl	a5b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a7ec:	e3700001 	cmn	r0, #1
    a7f0:	0a00000a 	beq	a820 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x80>
    a7f4:	e3740001 	cmn	r4, #1
    a7f8:	e4850004 	str	r0, [r5], #4
    a7fc:	e3a00000 	mov	r0, #0
    a800:	1affffef 	bne	a7c4 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x24>
    a804:	e1a02006 	mov	r2, r6
    a808:	e59f101c 	ldr	r1, [pc, #28]	; a82c <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x8c>
    a80c:	e3a00000 	mov	r0, #0
    a810:	eb0019f4 	bl	10fe8 <strtok_r>
    a814:	e16f0f10 	clz	r0, r0
    a818:	e1a002a0 	lsr	r0, r0, #5
    a81c:	ea000000 	b	a824 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x84>
    a820:	e3a00000 	mov	r0, #0
    a824:	e28dd00c 	add	sp, sp, #12
    a828:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a82c:	00017880 	.word	0x00017880

0000a830 <CKernelOptions::CKernelOptions()>:
    a830:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a834:	e3a02004 	mov	r2, #4
    a838:	e1a04000 	mov	r4, r0
    a83c:	e3a05000 	mov	r5, #0
    a840:	e3a0303c 	mov	r3, #60	; 0x3c
    a844:	e2807e81 	add	r7, r0, #2064	; 0x810
    a848:	e2877008 	add	r7, r7, #8
    a84c:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    a850:	e580386c 	str	r3, [r0, #2156]	; 0x86c
    a854:	e24dd014 	sub	sp, sp, #20
    a858:	e59f1418 	ldr	r1, [pc, #1048]	; ac78 <CKernelOptions::CKernelOptions()+0x448>
    a85c:	e1a00007 	mov	r0, r7
    a860:	e5845810 	str	r5, [r4, #2064]	; 0x810
    a864:	e5845814 	str	r5, [r4, #2068]	; 0x814
    a868:	e5845834 	str	r5, [r4, #2100]	; 0x834
    a86c:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
    a870:	e5845864 	str	r5, [r4, #2148]	; 0x864
    a874:	e5c45868 	strb	r5, [r4, #2152]	; 0x868
    a878:	e5845870 	str	r5, [r4, #2160]	; 0x870
    a87c:	e5c45874 	strb	r5, [r4, #2164]	; 0x874
    a880:	e2849e83 	add	r9, r4, #2096	; 0x830
    a884:	eb00197f 	bl	10e88 <strcpy>
    a888:	e59f13ec 	ldr	r1, [pc, #1004]	; ac7c <CKernelOptions::CKernelOptions()+0x44c>
    a88c:	e1a00009 	mov	r0, r9
    a890:	eb00197c 	bl	10e88 <strcpy>
    a894:	e59f33e4 	ldr	r3, [pc, #996]	; ac80 <CKernelOptions::CKernelOptions()+0x450>
    a898:	e1a01005 	mov	r1, r5
    a89c:	e5c45839 	strb	r5, [r4, #2105]	; 0x839
    a8a0:	e5c4584d 	strb	r5, [r4, #2125]	; 0x84d
    a8a4:	e28d0008 	add	r0, sp, #8
    a8a8:	e5834000 	str	r4, [r3]
    a8ac:	eb002222 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
    a8b0:	e58d5000 	str	r5, [sp]
    a8b4:	e1a02004 	mov	r2, r4
    a8b8:	e28d0008 	add	r0, sp, #8
    a8bc:	e59f33c0 	ldr	r3, [pc, #960]	; ac84 <CKernelOptions::CKernelOptions()+0x454>
    a8c0:	e59f13c0 	ldr	r1, [pc, #960]	; ac88 <CKernelOptions::CKernelOptions()+0x458>
    a8c4:	eb002228 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a8c8:	e1500005 	cmp	r0, r5
    a8cc:	0a000037 	beq	a9b0 <CKernelOptions::CKernelOptions()+0x180>
    a8d0:	e5943008 	ldr	r3, [r4, #8]
    a8d4:	e3530b02 	cmp	r3, #2048	; 0x800
    a8d8:	2a000034 	bcs	a9b0 <CKernelOptions::CKernelOptions()+0x180>
    a8dc:	e0843003 	add	r3, r4, r3
    a8e0:	e284200c 	add	r2, r4, #12
    a8e4:	e59f83a0 	ldr	r8, [pc, #928]	; ac8c <CKernelOptions::CKernelOptions()+0x45c>
    a8e8:	e59fa3a0 	ldr	sl, [pc, #928]	; ac90 <CKernelOptions::CKernelOptions()+0x460>
    a8ec:	e5c3500c 	strb	r5, [r3, #12]
    a8f0:	e584280c 	str	r2, [r4, #2060]	; 0x80c
    a8f4:	e1a00004 	mov	r0, r4
    a8f8:	ebffff73 	bl	a6cc <CKernelOptions::GetToken()>
    a8fc:	e2506000 	subs	r6, r0, #0
    a900:	0a00002a 	beq	a9b0 <CKernelOptions::CKernelOptions()+0x180>
    a904:	e1d630d0 	ldrsb	r3, [r6]
    a908:	e3530000 	cmp	r3, #0
    a90c:	0a000008 	beq	a934 <CKernelOptions::CKernelOptions()+0x104>
    a910:	e353003d 	cmp	r3, #61	; 0x3d
    a914:	e1a05006 	mov	r5, r6
    a918:	1a000002 	bne	a928 <CKernelOptions::CKernelOptions()+0xf8>
    a91c:	ea000028 	b	a9c4 <CKernelOptions::CKernelOptions()+0x194>
    a920:	e353003d 	cmp	r3, #61	; 0x3d
    a924:	0a000026 	beq	a9c4 <CKernelOptions::CKernelOptions()+0x194>
    a928:	e1f530d1 	ldrsb	r3, [r5, #1]!
    a92c:	e3530000 	cmp	r3, #0
    a930:	1afffffa 	bne	a920 <CKernelOptions::CKernelOptions()+0xf0>
    a934:	e1a01008 	mov	r1, r8
    a938:	e1a00006 	mov	r0, r6
    a93c:	eb0018c8 	bl	10c64 <strcmp>
    a940:	e3500000 	cmp	r0, #0
    a944:	0affffea 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    a948:	e1a0100a 	mov	r1, sl
    a94c:	e1a00006 	mov	r0, r6
    a950:	eb0018c3 	bl	10c64 <strcmp>
    a954:	e3500000 	cmp	r0, #0
    a958:	13a0b000 	movne	fp, #0
    a95c:	0affffe4 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    a960:	e59f132c 	ldr	r1, [pc, #812]	; ac94 <CKernelOptions::CKernelOptions()+0x464>
    a964:	e1a00006 	mov	r0, r6
    a968:	eb0018bd 	bl	10c64 <strcmp>
    a96c:	e2505000 	subs	r5, r0, #0
    a970:	0a000034 	beq	aa48 <CKernelOptions::CKernelOptions()+0x218>
    a974:	e59f131c 	ldr	r1, [pc, #796]	; ac98 <CKernelOptions::CKernelOptions()+0x468>
    a978:	e1a00006 	mov	r0, r6
    a97c:	eb0018b8 	bl	10c64 <strcmp>
    a980:	e3500000 	cmp	r0, #0
    a984:	1a000035 	bne	aa60 <CKernelOptions::CKernelOptions()+0x230>
    a988:	e35b0000 	cmp	fp, #0
    a98c:	0affffd8 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    a990:	e1db30d0 	ldrsb	r3, [fp]
    a994:	e3530000 	cmp	r3, #0
    a998:	0affffd5 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    a99c:	e1a0000b 	mov	r0, fp
    a9a0:	ebffff04 	bl	a5b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    a9a4:	e3500004 	cmp	r0, #4
    a9a8:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
    a9ac:	eaffffd0 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    a9b0:	e28d0008 	add	r0, sp, #8
    a9b4:	eb0021e7 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
    a9b8:	e1a00004 	mov	r0, r4
    a9bc:	e28dd014 	add	sp, sp, #20
    a9c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9c4:	e3a03000 	mov	r3, #0
    a9c8:	e1a0b005 	mov	fp, r5
    a9cc:	e1a01008 	mov	r1, r8
    a9d0:	e4cb3001 	strb	r3, [fp], #1
    a9d4:	e1a00006 	mov	r0, r6
    a9d8:	eb0018a1 	bl	10c64 <strcmp>
    a9dc:	e3500000 	cmp	r0, #0
    a9e0:	1a000009 	bne	aa0c <CKernelOptions::CKernelOptions()+0x1dc>
    a9e4:	e35b0000 	cmp	fp, #0
    a9e8:	0affffc1 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    a9ec:	e1d530d1 	ldrsb	r3, [r5, #1]
    a9f0:	e3530000 	cmp	r3, #0
    a9f4:	0affffbe 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    a9f8:	e1a0000b 	mov	r0, fp
    a9fc:	ebfffeed 	bl	a5b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    aa00:	e3700001 	cmn	r0, #1
    aa04:	15840810 	strne	r0, [r4, #2064]	; 0x810
    aa08:	eaffffb9 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    aa0c:	e1a0100a 	mov	r1, sl
    aa10:	e1a00006 	mov	r0, r6
    aa14:	eb001892 	bl	10c64 <strcmp>
    aa18:	e3500000 	cmp	r0, #0
    aa1c:	1affffcf 	bne	a960 <CKernelOptions::CKernelOptions()+0x130>
    aa20:	e35b0000 	cmp	fp, #0
    aa24:	0affffb2 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    aa28:	e1d530d1 	ldrsb	r3, [r5, #1]
    aa2c:	e3530000 	cmp	r3, #0
    aa30:	0affffaf 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    aa34:	e1a0000b 	mov	r0, fp
    aa38:	ebfffede 	bl	a5b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    aa3c:	e3700001 	cmn	r0, #1
    aa40:	15840814 	strne	r0, [r4, #2068]	; 0x814
    aa44:	eaffffaa 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    aa48:	e1a0100b 	mov	r1, fp
    aa4c:	e3a02013 	mov	r2, #19
    aa50:	e1a00007 	mov	r0, r7
    aa54:	eb001916 	bl	10eb4 <strncpy>
    aa58:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
    aa5c:	eaffffa4 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    aa60:	e59f1234 	ldr	r1, [pc, #564]	; ac9c <CKernelOptions::CKernelOptions()+0x46c>
    aa64:	e1a00006 	mov	r0, r6
    aa68:	eb00187d 	bl	10c64 <strcmp>
    aa6c:	e2505000 	subs	r5, r0, #0
    aa70:	0a000010 	beq	aab8 <CKernelOptions::CKernelOptions()+0x288>
    aa74:	e59f1224 	ldr	r1, [pc, #548]	; aca0 <CKernelOptions::CKernelOptions()+0x470>
    aa78:	e1a00006 	mov	r0, r6
    aa7c:	eb001878 	bl	10c64 <strcmp>
    aa80:	e3500000 	cmp	r0, #0
    aa84:	1a000011 	bne	aad0 <CKernelOptions::CKernelOptions()+0x2a0>
    aa88:	e35b0000 	cmp	fp, #0
    aa8c:	0affff98 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    aa90:	e1db30d0 	ldrsb	r3, [fp]
    aa94:	e3530000 	cmp	r3, #0
    aa98:	0affff95 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    aa9c:	e1a0000b 	mov	r0, fp
    aaa0:	ebfffec4 	bl	a5b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    aaa4:	e59f31f8 	ldr	r3, [pc, #504]	; aca4 <CKernelOptions::CKernelOptions()+0x474>
    aaa8:	e24020c8 	sub	r2, r0, #200	; 0xc8
    aaac:	e1520003 	cmp	r2, r3
    aab0:	95840834 	strls	r0, [r4, #2100]	; 0x834
    aab4:	eaffff8e 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    aab8:	e1a0100b 	mov	r1, fp
    aabc:	e3a02002 	mov	r2, #2
    aac0:	e1a00009 	mov	r0, r9
    aac4:	eb0018fa 	bl	10eb4 <strncpy>
    aac8:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
    aacc:	eaffff88 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    aad0:	e59f11d0 	ldr	r1, [pc, #464]	; aca8 <CKernelOptions::CKernelOptions()+0x478>
    aad4:	e1a00006 	mov	r0, r6
    aad8:	eb001861 	bl	10c64 <strcmp>
    aadc:	e3500000 	cmp	r0, #0
    aae0:	1a000006 	bne	ab00 <CKernelOptions::CKernelOptions()+0x2d0>
    aae4:	e1a0000b 	mov	r0, fp
    aae8:	e59f11bc 	ldr	r1, [pc, #444]	; acac <CKernelOptions::CKernelOptions()+0x47c>
    aaec:	eb00185c 	bl	10c64 <strcmp>
    aaf0:	e3500000 	cmp	r0, #0
    aaf4:	03a03001 	moveq	r3, #1
    aaf8:	05c43838 	strbeq	r3, [r4, #2104]	; 0x838
    aafc:	eaffff7c 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ab00:	e59f11a8 	ldr	r1, [pc, #424]	; acb0 <CKernelOptions::CKernelOptions()+0x480>
    ab04:	e1a00006 	mov	r0, r6
    ab08:	eb001855 	bl	10c64 <strcmp>
    ab0c:	e2505000 	subs	r5, r0, #0
    ab10:	1a000005 	bne	ab2c <CKernelOptions::CKernelOptions()+0x2fc>
    ab14:	e1a0100b 	mov	r1, fp
    ab18:	e3a02013 	mov	r2, #19
    ab1c:	e2890009 	add	r0, r9, #9
    ab20:	eb0018e3 	bl	10eb4 <strncpy>
    ab24:	e5c4584c 	strb	r5, [r4, #2124]	; 0x84c
    ab28:	eaffff71 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ab2c:	e59f1180 	ldr	r1, [pc, #384]	; acb4 <CKernelOptions::CKernelOptions()+0x484>
    ab30:	e1a00006 	mov	r0, r6
    ab34:	eb00184a 	bl	10c64 <strcmp>
    ab38:	e2505000 	subs	r5, r0, #0
    ab3c:	1a000006 	bne	ab5c <CKernelOptions::CKernelOptions()+0x32c>
    ab40:	e2840d21 	add	r0, r4, #2112	; 0x840
    ab44:	e1a0100b 	mov	r1, fp
    ab48:	e280000d 	add	r0, r0, #13
    ab4c:	e3a02013 	mov	r2, #19
    ab50:	eb0018d7 	bl	10eb4 <strncpy>
    ab54:	e5c45860 	strb	r5, [r4, #2144]	; 0x860
    ab58:	eaffff65 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ab5c:	e59f1154 	ldr	r1, [pc, #340]	; acb8 <CKernelOptions::CKernelOptions()+0x488>
    ab60:	e1a00006 	mov	r0, r6
    ab64:	eb00183e 	bl	10c64 <strcmp>
    ab68:	e3500000 	cmp	r0, #0
    ab6c:	1a000009 	bne	ab98 <CKernelOptions::CKernelOptions()+0x368>
    ab70:	e35b0000 	cmp	fp, #0
    ab74:	0affff5e 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ab78:	e1db30d0 	ldrsb	r3, [fp]
    ab7c:	e3530000 	cmp	r3, #0
    ab80:	0affff5b 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ab84:	e1a0000b 	mov	r0, fp
    ab88:	ebfffe8a 	bl	a5b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    ab8c:	e3500002 	cmp	r0, #2
    ab90:	95840864 	strls	r0, [r4, #2148]	; 0x864
    ab94:	eaffff56 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ab98:	e59f111c 	ldr	r1, [pc, #284]	; acbc <CKernelOptions::CKernelOptions()+0x48c>
    ab9c:	e1a00006 	mov	r0, r6
    aba0:	eb00182f 	bl	10c64 <strcmp>
    aba4:	e3500000 	cmp	r0, #0
    aba8:	1a000006 	bne	abc8 <CKernelOptions::CKernelOptions()+0x398>
    abac:	e1a0000b 	mov	r0, fp
    abb0:	e59f1108 	ldr	r1, [pc, #264]	; acc0 <CKernelOptions::CKernelOptions()+0x490>
    abb4:	eb00182a 	bl	10c64 <strcmp>
    abb8:	e3500000 	cmp	r0, #0
    abbc:	03a03001 	moveq	r3, #1
    abc0:	05c43868 	strbeq	r3, [r4, #2152]	; 0x868
    abc4:	eaffff4a 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    abc8:	e59f10f4 	ldr	r1, [pc, #244]	; acc4 <CKernelOptions::CKernelOptions()+0x494>
    abcc:	e1a00006 	mov	r0, r6
    abd0:	eb001823 	bl	10c64 <strcmp>
    abd4:	e3500000 	cmp	r0, #0
    abd8:	1a00000a 	bne	ac08 <CKernelOptions::CKernelOptions()+0x3d8>
    abdc:	e35b0000 	cmp	fp, #0
    abe0:	0affff43 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    abe4:	e1db30d0 	ldrsb	r3, [fp]
    abe8:	e3530000 	cmp	r3, #0
    abec:	0affff40 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    abf0:	e1a0000b 	mov	r0, fp
    abf4:	ebfffe6f 	bl	a5b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    abf8:	e2403028 	sub	r3, r0, #40	; 0x28
    abfc:	e3530026 	cmp	r3, #38	; 0x26
    ac00:	9584086c 	strls	r0, [r4, #2156]	; 0x86c
    ac04:	eaffff3a 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ac08:	e59f10b8 	ldr	r1, [pc, #184]	; acc8 <CKernelOptions::CKernelOptions()+0x498>
    ac0c:	e1a00006 	mov	r0, r6
    ac10:	eb001813 	bl	10c64 <strcmp>
    ac14:	e3500000 	cmp	r0, #0
    ac18:	1a00000a 	bne	ac48 <CKernelOptions::CKernelOptions()+0x418>
    ac1c:	e35b0000 	cmp	fp, #0
    ac20:	0affff33 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ac24:	e1db30d0 	ldrsb	r3, [fp]
    ac28:	e3530000 	cmp	r3, #0
    ac2c:	0affff30 	beq	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ac30:	e1a0000b 	mov	r0, fp
    ac34:	ebfffe5f 	bl	a5b8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    ac38:	e2403002 	sub	r3, r0, #2
    ac3c:	e3530019 	cmp	r3, #25
    ac40:	95840870 	strls	r0, [r4, #2160]	; 0x870
    ac44:	eaffff2a 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ac48:	e1a00006 	mov	r0, r6
    ac4c:	e59f1078 	ldr	r1, [pc, #120]	; accc <CKernelOptions::CKernelOptions()+0x49c>
    ac50:	eb001803 	bl	10c64 <strcmp>
    ac54:	e3500000 	cmp	r0, #0
    ac58:	1affff25 	bne	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ac5c:	e2841e87 	add	r1, r4, #2160	; 0x870
    ac60:	e1a0000b 	mov	r0, fp
    ac64:	e2811008 	add	r1, r1, #8
    ac68:	e3a02004 	mov	r2, #4
    ac6c:	ebfffecb 	bl	a7a0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
    ac70:	e5c40874 	strb	r0, [r4, #2164]	; 0x874
    ac74:	eaffff1e 	b	a8f4 <CKernelOptions::CKernelOptions()+0xc4>
    ac78:	00017884 	.word	0x00017884
    ac7c:	0001788c 	.word	0x0001788c
    ac80:	00019b4c 	.word	0x00019b4c
    ac84:	0000080c 	.word	0x0000080c
    ac88:	00050001 	.word	0x00050001
    ac8c:	00017930 	.word	0x00017930
    ac90:	00017890 	.word	0x00017890
    ac94:	00017898 	.word	0x00017898
    ac98:	000178a0 	.word	0x000178a0
    ac9c:	000178ac 	.word	0x000178ac
    aca0:	000178b4 	.word	0x000178b4
    aca4:	00001e78 	.word	0x00001e78
    aca8:	000178c4 	.word	0x000178c4
    acac:	000178d0 	.word	0x000178d0
    acb0:	000178d8 	.word	0x000178d8
    acb4:	000178e4 	.word	0x000178e4
    acb8:	000178f0 	.word	0x000178f0
    acbc:	000178fc 	.word	0x000178fc
    acc0:	00017904 	.word	0x00017904
    acc4:	0001790c 	.word	0x0001790c
    acc8:	00017918 	.word	0x00017918
    accc:	00017924 	.word	0x00017924

0000acd0 <CLogger::CLogger(unsigned int, CTimer*, bool)>:
    acd0:	e92d4010 	push	{r4, lr}
    acd4:	e3a0c001 	mov	ip, #1
    acd8:	e1a04000 	mov	r4, r0
    acdc:	e3a00000 	mov	r0, #0
    ace0:	e5c43008 	strb	r3, [r4, #8]
    ace4:	e584000c 	str	r0, [r4, #12]
    ace8:	e5840010 	str	r0, [r4, #16]
    acec:	e5840014 	str	r0, [r4, #20]
    acf0:	e5840018 	str	r0, [r4, #24]
    acf4:	e58400e8 	str	r0, [r4, #232]	; 0xe8
    acf8:	e58400ec 	str	r0, [r4, #236]	; 0xec
    acfc:	e58400f4 	str	r0, [r4, #244]	; 0xf4
    ad00:	e58400f8 	str	r0, [r4, #248]	; 0xf8
    ad04:	e8840006 	stm	r4, {r1, r2}
    ad08:	e584c01c 	str	ip, [r4, #28]
    ad0c:	e584c0f0 	str	ip, [r4, #240]	; 0xf0
    ad10:	e3a00901 	mov	r0, #16384	; 0x4000
    ad14:	eb001af1 	bl	118e0 <operator new[](unsigned int)>
    ad18:	e59f300c 	ldr	r3, [pc, #12]	; ad2c <CLogger::CLogger(unsigned int, CTimer*, bool)+0x5c>
    ad1c:	e5840010 	str	r0, [r4, #16]
    ad20:	e5834000 	str	r4, [r3]
    ad24:	e1a00004 	mov	r0, r4
    ad28:	e8bd8010 	pop	{r4, pc}
    ad2c:	00019b50 	.word	0x00019b50

0000ad30 <CLogger::~CLogger()>:
    ad30:	e3a02000 	mov	r2, #0
    ad34:	e59f1060 	ldr	r1, [pc, #96]	; ad9c <CLogger::~CLogger()+0x6c>
    ad38:	e92d4070 	push	{r4, r5, r6, lr}
    ad3c:	e59030ec 	ldr	r3, [r0, #236]	; 0xec
    ad40:	e1a04000 	mov	r4, r0
    ad44:	e1a05002 	mov	r5, r2
    ad48:	e5812000 	str	r2, [r1]
    ad4c:	ea000008 	b	ad74 <CLogger::~CLogger()+0x44>
    ad50:	e7940101 	ldr	r0, [r4, r1, lsl #2]
    ad54:	e3a01f42 	mov	r1, #264	; 0x108
    ad58:	eb001ae8 	bl	11900 <operator delete(void*, unsigned int)>
    ad5c:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    ad60:	e2833001 	add	r3, r3, #1
    ad64:	e3530032 	cmp	r3, #50	; 0x32
    ad68:	e58430ec 	str	r3, [r4, #236]	; 0xec
    ad6c:	03a03000 	moveq	r3, #0
    ad70:	058450ec 	streq	r5, [r4, #236]	; 0xec
    ad74:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
    ad78:	e2831008 	add	r1, r3, #8
    ad7c:	e1520003 	cmp	r2, r3
    ad80:	1afffff2 	bne	ad50 <CLogger::~CLogger()+0x20>
    ad84:	e5940010 	ldr	r0, [r4, #16]
    ad88:	e3500000 	cmp	r0, #0
    ad8c:	0a000000 	beq	ad94 <CLogger::~CLogger()+0x64>
    ad90:	eb001ad9 	bl	118fc <operator delete[](void*)>
    ad94:	e1a00004 	mov	r0, r4
    ad98:	e8bd8070 	pop	{r4, r5, r6, pc}
    ad9c:	00019b50 	.word	0x00019b50

0000ada0 <CLogger::Initialize(CDevice*)>:
    ada0:	e92d4010 	push	{r4, lr}
    ada4:	e580100c 	str	r1, [r0, #12]
    ada8:	e24dd008 	sub	sp, sp, #8
    adac:	e1a04000 	mov	r4, r0
    adb0:	eb00040d 	bl	bdec <CMachineInfo::Get()>
    adb4:	eb000308 	bl	b9dc <CMachineInfo::GetMachineName() const>
    adb8:	e59f3024 	ldr	r3, [pc, #36]	; ade4 <CLogger::Initialize(CDevice*)+0x44>
    adbc:	e59f2024 	ldr	r2, [pc, #36]	; ade8 <CLogger::Initialize(CDevice*)+0x48>
    adc0:	e58d0004 	str	r0, [sp, #4]
    adc4:	e58d2000 	str	r2, [sp]
    adc8:	e1a00004 	mov	r0, r4
    adcc:	e2831018 	add	r1, r3, #24
    add0:	e3a02003 	mov	r2, #3
    add4:	eb000006 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    add8:	e3a00001 	mov	r0, #1
    addc:	e28dd008 	add	sp, sp, #8
    ade0:	e8bd8010 	pop	{r4, pc}
    ade4:	00017938 	.word	0x00017938
    ade8:	00019b78 	.word	0x00019b78

0000adec <CLogger::SetNewTarget(CDevice*)>:
    adec:	e580100c 	str	r1, [r0, #12]
    adf0:	e12fff1e 	bx	lr

0000adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    adf4:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    adf8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    adfc:	e24dd010 	sub	sp, sp, #16
    ae00:	e28dc018 	add	ip, sp, #24
    ae04:	e58dc000 	str	ip, [sp]
    ae08:	e59d3014 	ldr	r3, [sp, #20]
    ae0c:	e58dc00c 	str	ip, [sp, #12]
    ae10:	eb000003 	bl	ae24 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    ae14:	e28dd010 	add	sp, sp, #16
    ae18:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ae1c:	e28dd004 	add	sp, sp, #4
    ae20:	e12fff1e 	bx	lr

0000ae24 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    ae24:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ae28:	e1a07003 	mov	r7, r3
    ae2c:	e24dd024 	sub	sp, sp, #36	; 0x24
    ae30:	e1a04000 	mov	r4, r0
    ae34:	e1a0000d 	mov	r0, sp
    ae38:	e1a05002 	mov	r5, r2
    ae3c:	e1a06001 	mov	r6, r1
    ae40:	eb000dbd 	bl	e53c <CString::CString()>
    ae44:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    ae48:	e1a01007 	mov	r1, r7
    ae4c:	e1a0000d 	mov	r0, sp
    ae50:	eb001010 	bl	ee98 <CString::FormatV(char const*, std::__va_list)>
    ae54:	e1a0000d 	mov	r0, sp
    ae58:	eb000def 	bl	e61c <CString::operator char const*() const>
    ae5c:	e1a02005 	mov	r2, r5
    ae60:	e1a03000 	mov	r3, r0
    ae64:	e1a01006 	mov	r1, r6
    ae68:	e1a00004 	mov	r0, r4
    ae6c:	eb000127 	bl	b310 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    ae70:	e5943000 	ldr	r3, [r4]
    ae74:	e1550003 	cmp	r5, r3
    ae78:	8a000029 	bhi	af24 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x100>
    ae7c:	e28d0010 	add	r0, sp, #16
    ae80:	eb000dad 	bl	e53c <CString::CString()>
    ae84:	e3550000 	cmp	r5, #0
    ae88:	0a000029 	beq	af34 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x110>
    ae8c:	e5940004 	ldr	r0, [r4, #4]
    ae90:	e3500000 	cmp	r0, #0
    ae94:	0a00000d 	beq	aed0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    ae98:	eb0014e1 	bl	10224 <CTimer::GetTimeString()>
    ae9c:	e2505000 	subs	r5, r0, #0
    aea0:	0a00000a 	beq	aed0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    aea4:	eb000ddc 	bl	e61c <CString::operator char const*() const>
    aea8:	e1a01000 	mov	r1, r0
    aeac:	e28d0010 	add	r0, sp, #16
    aeb0:	eb000e1b 	bl	e724 <CString::Append(char const*)>
    aeb4:	e28d0010 	add	r0, sp, #16
    aeb8:	e59f1138 	ldr	r1, [pc, #312]	; aff8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
    aebc:	eb000e18 	bl	e724 <CString::Append(char const*)>
    aec0:	e5953000 	ldr	r3, [r5]
    aec4:	e1a00005 	mov	r0, r5
    aec8:	e5933004 	ldr	r3, [r3, #4]
    aecc:	e12fff33 	blx	r3
    aed0:	e1a01006 	mov	r1, r6
    aed4:	e28d0010 	add	r0, sp, #16
    aed8:	eb000e11 	bl	e724 <CString::Append(char const*)>
    aedc:	e59f1118 	ldr	r1, [pc, #280]	; affc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    aee0:	e28d0010 	add	r0, sp, #16
    aee4:	eb000e0e 	bl	e724 <CString::Append(char const*)>
    aee8:	e1a0000d 	mov	r0, sp
    aeec:	eb000dca 	bl	e61c <CString::operator char const*() const>
    aef0:	e1a01000 	mov	r1, r0
    aef4:	e28d0010 	add	r0, sp, #16
    aef8:	eb000e09 	bl	e724 <CString::Append(char const*)>
    aefc:	e59f10fc 	ldr	r1, [pc, #252]	; b000 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    af00:	e28d0010 	add	r0, sp, #16
    af04:	eb000e06 	bl	e724 <CString::Append(char const*)>
    af08:	e28d0010 	add	r0, sp, #16
    af0c:	eb000dc2 	bl	e61c <CString::operator char const*() const>
    af10:	e1a01000 	mov	r1, r0
    af14:	e1a00004 	mov	r0, r4
    af18:	eb000093 	bl	b16c <CLogger::Write(char const*)>
    af1c:	e28d0010 	add	r0, sp, #16
    af20:	eb000d52 	bl	e470 <CString::~CString()>
    af24:	e1a0000d 	mov	r0, sp
    af28:	eb000d50 	bl	e470 <CString::~CString()>
    af2c:	e28dd024 	add	sp, sp, #36	; 0x24
    af30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    af34:	e59f10c8 	ldr	r1, [pc, #200]	; b004 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    af38:	e28d0010 	add	r0, sp, #16
    af3c:	eb000dbc 	bl	e634 <CString::operator=(char const*)>
    af40:	e5940004 	ldr	r0, [r4, #4]
    af44:	e3500000 	cmp	r0, #0
    af48:	0a00000d 	beq	af84 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    af4c:	eb0014b4 	bl	10224 <CTimer::GetTimeString()>
    af50:	e2505000 	subs	r5, r0, #0
    af54:	0a00000a 	beq	af84 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
    af58:	eb000daf 	bl	e61c <CString::operator char const*() const>
    af5c:	e1a01000 	mov	r1, r0
    af60:	e28d0010 	add	r0, sp, #16
    af64:	eb000dee 	bl	e724 <CString::Append(char const*)>
    af68:	e28d0010 	add	r0, sp, #16
    af6c:	e59f1084 	ldr	r1, [pc, #132]	; aff8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
    af70:	eb000deb 	bl	e724 <CString::Append(char const*)>
    af74:	e5953000 	ldr	r3, [r5]
    af78:	e1a00005 	mov	r0, r5
    af7c:	e5933004 	ldr	r3, [r3, #4]
    af80:	e12fff33 	blx	r3
    af84:	e1a01006 	mov	r1, r6
    af88:	e28d0010 	add	r0, sp, #16
    af8c:	eb000de4 	bl	e724 <CString::Append(char const*)>
    af90:	e59f1064 	ldr	r1, [pc, #100]	; affc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    af94:	e28d0010 	add	r0, sp, #16
    af98:	eb000de1 	bl	e724 <CString::Append(char const*)>
    af9c:	e1a0000d 	mov	r0, sp
    afa0:	eb000d9d 	bl	e61c <CString::operator char const*() const>
    afa4:	e1a01000 	mov	r1, r0
    afa8:	e28d0010 	add	r0, sp, #16
    afac:	eb000ddc 	bl	e724 <CString::Append(char const*)>
    afb0:	e59f1050 	ldr	r1, [pc, #80]	; b008 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    afb4:	e28d0010 	add	r0, sp, #16
    afb8:	eb000dd9 	bl	e724 <CString::Append(char const*)>
    afbc:	e59f103c 	ldr	r1, [pc, #60]	; b000 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    afc0:	e28d0010 	add	r0, sp, #16
    afc4:	eb000dd6 	bl	e724 <CString::Append(char const*)>
    afc8:	e28d0010 	add	r0, sp, #16
    afcc:	eb000d92 	bl	e61c <CString::operator char const*() const>
    afd0:	e1a01000 	mov	r1, r0
    afd4:	e1a00004 	mov	r0, r4
    afd8:	eb000063 	bl	b16c <CLogger::Write(char const*)>
    afdc:	e59430f8 	ldr	r3, [r4, #248]	; 0xf8
    afe0:	e3530000 	cmp	r3, #0
    afe4:	0a000000 	beq	afec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c8>
    afe8:	e12fff33 	blx	r3
    afec:	e3a000ff 	mov	r0, #255	; 0xff
    aff0:	eb00130d 	bl	fc2c <set_qemu_exit_status>
    aff4:	eb001310 	bl	fc3c <halt>
    aff8:	00017970 	.word	0x00017970
    affc:	0001796c 	.word	0x0001796c
    b000:	00017960 	.word	0x00017960
    b004:	00017958 	.word	0x00017958
    b008:	00017964 	.word	0x00017964

0000b00c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    b00c:	e590c000 	ldr	ip, [r0]
    b010:	e152000c 	cmp	r2, ip
    b014:	812fff1e 	bxhi	lr
    b018:	e92d4070 	push	{r4, r5, r6, lr}
    b01c:	e1a05003 	mov	r5, r3
    b020:	e3a03000 	mov	r3, #0
    b024:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    b028:	e1520003 	cmp	r2, r3
    b02c:	e1a04000 	mov	r4, r0
    b030:	e5cd3000 	strb	r3, [sp]
    b034:	0a00000f 	beq	b078 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    b038:	e1a0000d 	mov	r0, sp
    b03c:	eb0017ae 	bl	10efc <strcat>
    b040:	e1a0000d 	mov	r0, sp
    b044:	e59f1090 	ldr	r1, [pc, #144]	; b0dc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    b048:	eb0017ab 	bl	10efc <strcat>
    b04c:	e1a01005 	mov	r1, r5
    b050:	e1a0000d 	mov	r0, sp
    b054:	eb0017a8 	bl	10efc <strcat>
    b058:	e1a0000d 	mov	r0, sp
    b05c:	e59f107c 	ldr	r1, [pc, #124]	; b0e0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    b060:	eb0017a5 	bl	10efc <strcat>
    b064:	e1a0100d 	mov	r1, sp
    b068:	e1a00004 	mov	r0, r4
    b06c:	eb00003e 	bl	b16c <CLogger::Write(char const*)>
    b070:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    b074:	e8bd8070 	pop	{r4, r5, r6, pc}
    b078:	e1a06001 	mov	r6, r1
    b07c:	e1a0000d 	mov	r0, sp
    b080:	e59f105c 	ldr	r1, [pc, #92]	; b0e4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
    b084:	eb00177f 	bl	10e88 <strcpy>
    b088:	e1a01006 	mov	r1, r6
    b08c:	e1a0000d 	mov	r0, sp
    b090:	eb001799 	bl	10efc <strcat>
    b094:	e59f1040 	ldr	r1, [pc, #64]	; b0dc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
    b098:	e1a0000d 	mov	r0, sp
    b09c:	eb001796 	bl	10efc <strcat>
    b0a0:	e1a01005 	mov	r1, r5
    b0a4:	e1a0000d 	mov	r0, sp
    b0a8:	eb001793 	bl	10efc <strcat>
    b0ac:	e59f1034 	ldr	r1, [pc, #52]	; b0e8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
    b0b0:	e1a0000d 	mov	r0, sp
    b0b4:	eb001790 	bl	10efc <strcat>
    b0b8:	e59f1020 	ldr	r1, [pc, #32]	; b0e0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    b0bc:	e1a0000d 	mov	r0, sp
    b0c0:	eb00178d 	bl	10efc <strcat>
    b0c4:	e1a0100d 	mov	r1, sp
    b0c8:	e1a00004 	mov	r0, r4
    b0cc:	eb000026 	bl	b16c <CLogger::Write(char const*)>
    b0d0:	e3a000ff 	mov	r0, #255	; 0xff
    b0d4:	eb0012d4 	bl	fc2c <set_qemu_exit_status>
    b0d8:	eb0012d7 	bl	fc3c <halt>
    b0dc:	0001796c 	.word	0x0001796c
    b0e0:	00017960 	.word	0x00017960
    b0e4:	00017958 	.word	0x00017958
    b0e8:	00017964 	.word	0x00017964

0000b0ec <CLogger::Get()>:
    b0ec:	e92d4070 	push	{r4, r5, r6, lr}
    b0f0:	e59f5070 	ldr	r5, [pc, #112]	; b168 <CLogger::Get()+0x7c>
    b0f4:	e5954000 	ldr	r4, [r5]
    b0f8:	e3540000 	cmp	r4, #0
    b0fc:	0a000001 	beq	b108 <CLogger::Get()+0x1c>
    b100:	e1a00004 	mov	r0, r4
    b104:	e8bd8070 	pop	{r4, r5, r6, pc}
    b108:	e3a000fc 	mov	r0, #252	; 0xfc
    b10c:	eb0019ed 	bl	118c8 <operator new(unsigned int)>
    b110:	e3a03000 	mov	r3, #0
    b114:	e3a02001 	mov	r2, #1
    b118:	e1a04000 	mov	r4, r0
    b11c:	e5803000 	str	r3, [r0]
    b120:	e5803004 	str	r3, [r0, #4]
    b124:	e580300c 	str	r3, [r0, #12]
    b128:	e5803010 	str	r3, [r0, #16]
    b12c:	e5803014 	str	r3, [r0, #20]
    b130:	e5803018 	str	r3, [r0, #24]
    b134:	e58030e8 	str	r3, [r0, #232]	; 0xe8
    b138:	e58030ec 	str	r3, [r0, #236]	; 0xec
    b13c:	e58030f4 	str	r3, [r0, #244]	; 0xf4
    b140:	e58030f8 	str	r3, [r0, #248]	; 0xf8
    b144:	e5c02008 	strb	r2, [r0, #8]
    b148:	e580201c 	str	r2, [r0, #28]
    b14c:	e58020f0 	str	r2, [r0, #240]	; 0xf0
    b150:	e3a00901 	mov	r0, #16384	; 0x4000
    b154:	eb0019e1 	bl	118e0 <operator new[](unsigned int)>
    b158:	e5854000 	str	r4, [r5]
    b15c:	e5840010 	str	r0, [r4, #16]
    b160:	e1a00004 	mov	r0, r4
    b164:	e8bd8070 	pop	{r4, r5, r6, pc}
    b168:	00019b50 	.word	0x00019b50

0000b16c <CLogger::Write(char const*)>:
    b16c:	e92d4070 	push	{r4, r5, r6, lr}
    b170:	e1a04000 	mov	r4, r0
    b174:	e1a00001 	mov	r0, r1
    b178:	e1a05001 	mov	r5, r1
    b17c:	eb0016ae 	bl	10c3c <strlen>
    b180:	e1a06000 	mov	r6, r0
    b184:	e594000c 	ldr	r0, [r4, #12]
    b188:	e3500000 	cmp	r0, #0
    b18c:	0a000004 	beq	b1a4 <CLogger::Write(char const*)+0x38>
    b190:	e5903000 	ldr	r3, [r0]
    b194:	e1a02006 	mov	r2, r6
    b198:	e593300c 	ldr	r3, [r3, #12]
    b19c:	e1a01005 	mov	r1, r5
    b1a0:	e12fff33 	blx	r3
    b1a4:	e594001c 	ldr	r0, [r4, #28]
    b1a8:	e3500000 	cmp	r0, #0
    b1ac:	1a00001d 	bne	b228 <CLogger::Write(char const*)+0xbc>
    b1b0:	e59f2088 	ldr	r2, [pc, #136]	; b240 <CLogger::Write(char const*)+0xd4>
    b1b4:	e0850006 	add	r0, r5, r6
    b1b8:	e1500005 	cmp	r0, r5
    b1bc:	0a000014 	beq	b214 <CLogger::Write(char const*)+0xa8>
    b1c0:	e0d530d1 	ldrsb	r3, [r5], #1
    b1c4:	e353000d 	cmp	r3, #13
    b1c8:	0afffffa 	beq	b1b8 <CLogger::Write(char const*)+0x4c>
    b1cc:	e5941014 	ldr	r1, [r4, #20]
    b1d0:	e594c010 	ldr	ip, [r4, #16]
    b1d4:	e7cc3001 	strb	r3, [ip, r1]
    b1d8:	e5943014 	ldr	r3, [r4, #20]
    b1dc:	e5941018 	ldr	r1, [r4, #24]
    b1e0:	e2833001 	add	r3, r3, #1
    b1e4:	e0033002 	and	r3, r3, r2
    b1e8:	e1530001 	cmp	r3, r1
    b1ec:	e5843014 	str	r3, [r4, #20]
    b1f0:	1afffff0 	bne	b1b8 <CLogger::Write(char const*)+0x4c>
    b1f4:	e5d4c008 	ldrb	ip, [r4, #8]
    b1f8:	e2831001 	add	r1, r3, #1
    b1fc:	e35c0000 	cmp	ip, #0
    b200:	e0011002 	and	r1, r1, r2
    b204:	0a000009 	beq	b230 <CLogger::Write(char const*)+0xc4>
    b208:	e1500005 	cmp	r0, r5
    b20c:	e5841018 	str	r1, [r4, #24]
    b210:	1affffea 	bne	b1c0 <CLogger::Write(char const*)+0x54>
    b214:	e594301c 	ldr	r3, [r4, #28]
    b218:	e3530000 	cmp	r3, #0
    b21c:	08bd8070 	popeq	{r4, r5, r6, pc}
    b220:	e8bd4070 	pop	{r4, r5, r6, lr}
    b224:	ea001ce9 	b	125d0 <LeaveCritical>
    b228:	eb001cbe 	bl	12528 <EnterCritical>
    b22c:	eaffffdf 	b	b1b0 <CLogger::Write(char const*)+0x44>
    b230:	e2433001 	sub	r3, r3, #1
    b234:	e0033002 	and	r3, r3, r2
    b238:	e5843014 	str	r3, [r4, #20]
    b23c:	eafffff4 	b	b214 <CLogger::Write(char const*)+0xa8>
    b240:	00003fff 	.word	0x00003fff

0000b244 <CLogger::Read(void*, unsigned int, bool)>:
    b244:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b248:	e1a04000 	mov	r4, r0
    b24c:	e590001c 	ldr	r0, [r0, #28]
    b250:	e1a05001 	mov	r5, r1
    b254:	e3500000 	cmp	r0, #0
    b258:	e1a07002 	mov	r7, r2
    b25c:	e1a08003 	mov	r8, r3
    b260:	1a00001b 	bne	b2d4 <CLogger::Read(void*, unsigned int, bool)+0x90>
    b264:	e594c018 	ldr	ip, [r4, #24]
    b268:	e5943014 	ldr	r3, [r4, #20]
    b26c:	e153000c 	cmp	r3, ip
    b270:	0a000020 	beq	b2f8 <CLogger::Read(void*, unsigned int, bool)+0xb4>
    b274:	e1a09007 	mov	r9, r7
    b278:	e3a0e000 	mov	lr, #0
    b27c:	e59f2088 	ldr	r2, [pc, #136]	; b30c <CLogger::Read(void*, unsigned int, bool)+0xc8>
    b280:	ea000007 	b	b2a4 <CLogger::Read(void*, unsigned int, bool)+0x60>
    b284:	e5946010 	ldr	r6, [r4, #16]
    b288:	e28ee001 	add	lr, lr, #1
    b28c:	e19660dc 	ldrsb	r6, [r6, ip]
    b290:	e001c002 	and	ip, r1, r2
    b294:	e4c56001 	strb	r6, [r5], #1
    b298:	e5941014 	ldr	r1, [r4, #20]
    b29c:	e151000c 	cmp	r1, ip
    b2a0:	0a000009 	beq	b2cc <CLogger::Read(void*, unsigned int, bool)+0x88>
    b2a4:	e15e0007 	cmp	lr, r7
    b2a8:	e28c1001 	add	r1, ip, #1
    b2ac:	1afffff4 	bne	b284 <CLogger::Read(void*, unsigned int, bool)+0x40>
    b2b0:	e594301c 	ldr	r3, [r4, #28]
    b2b4:	e3580000 	cmp	r8, #0
    b2b8:	1584c018 	strne	ip, [r4, #24]
    b2bc:	e3530000 	cmp	r3, #0
    b2c0:	1a00000e 	bne	b300 <CLogger::Read(void*, unsigned int, bool)+0xbc>
    b2c4:	e1a00009 	mov	r0, r9
    b2c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b2cc:	e1a0900e 	mov	r9, lr
    b2d0:	eafffff6 	b	b2b0 <CLogger::Read(void*, unsigned int, bool)+0x6c>
    b2d4:	eb001c93 	bl	12528 <EnterCritical>
    b2d8:	e594c018 	ldr	ip, [r4, #24]
    b2dc:	e5943014 	ldr	r3, [r4, #20]
    b2e0:	e153000c 	cmp	r3, ip
    b2e4:	1affffe2 	bne	b274 <CLogger::Read(void*, unsigned int, bool)+0x30>
    b2e8:	e594301c 	ldr	r3, [r4, #28]
    b2ec:	e3530000 	cmp	r3, #0
    b2f0:	0a000000 	beq	b2f8 <CLogger::Read(void*, unsigned int, bool)+0xb4>
    b2f4:	eb001cb5 	bl	125d0 <LeaveCritical>
    b2f8:	e3e09000 	mvn	r9, #0
    b2fc:	eafffff0 	b	b2c4 <CLogger::Read(void*, unsigned int, bool)+0x80>
    b300:	eb001cb2 	bl	125d0 <LeaveCritical>
    b304:	e1a00009 	mov	r0, r9
    b308:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b30c:	00003fff 	.word	0x00003fff

0000b310 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    b310:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b314:	e1a04000 	mov	r4, r0
    b318:	e24dd00c 	sub	sp, sp, #12
    b31c:	e3a00f42 	mov	r0, #264	; 0x108
    b320:	e1a07003 	mov	r7, r3
    b324:	e1a09002 	mov	r9, r2
    b328:	e1a08001 	mov	r8, r1
    b32c:	eb001965 	bl	118c8 <operator new(unsigned int)>
    b330:	e3a06000 	mov	r6, #0
    b334:	e1a05000 	mov	r5, r0
    b338:	e1a01008 	mov	r1, r8
    b33c:	e3a02032 	mov	r2, #50	; 0x32
    b340:	e4c09001 	strb	r9, [r0], #1
    b344:	eb0016da 	bl	10eb4 <strncpy>
    b348:	e1a01007 	mov	r1, r7
    b34c:	e2850033 	add	r0, r5, #51	; 0x33
    b350:	e3a020c8 	mov	r2, #200	; 0xc8
    b354:	e5c56032 	strb	r6, [r5, #50]	; 0x32
    b358:	eb0016d5 	bl	10eb4 <strncpy>
    b35c:	e5940004 	ldr	r0, [r4, #4]
    b360:	e5c560fa 	strb	r6, [r5, #250]	; 0xfa
    b364:	e1500006 	cmp	r0, r6
    b368:	0a000004 	beq	b380 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    b36c:	e28d2004 	add	r2, sp, #4
    b370:	e1a0100d 	mov	r1, sp
    b374:	eb001337 	bl	10058 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    b378:	e1500006 	cmp	r0, r6
    b37c:	1a000038 	bne	b464 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
    b380:	e3a03000 	mov	r3, #0
    b384:	e58530fc 	str	r3, [r5, #252]	; 0xfc
    b388:	e5853100 	str	r3, [r5, #256]	; 0x100
    b38c:	e5853104 	str	r3, [r5, #260]	; 0x104
    b390:	e59410f0 	ldr	r1, [r4, #240]	; 0xf0
    b394:	e3510000 	cmp	r1, #0
    b398:	1a00002d 	bne	b454 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x144>
    b39c:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
    b3a0:	e2823001 	add	r3, r2, #1
    b3a4:	e2820008 	add	r0, r2, #8
    b3a8:	e3530032 	cmp	r3, #50	; 0x32
    b3ac:	e7845100 	str	r5, [r4, r0, lsl #2]
    b3b0:	0a00001b 	beq	b424 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x114>
    b3b4:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    b3b8:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    b3bc:	e1530000 	cmp	r3, r0
    b3c0:	0a000007 	beq	b3e4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
    b3c4:	e3510000 	cmp	r1, #0
    b3c8:	1a000013 	bne	b41c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x10c>
    b3cc:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    b3d0:	e3530000 	cmp	r3, #0
    b3d4:	0a000000 	beq	b3dc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    b3d8:	e12fff33 	blx	r3
    b3dc:	e28dd00c 	add	sp, sp, #12
    b3e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b3e4:	e2833001 	add	r3, r3, #1
    b3e8:	e3530032 	cmp	r3, #50	; 0x32
    b3ec:	03a03000 	moveq	r3, #0
    b3f0:	e2822009 	add	r2, r2, #9
    b3f4:	e3510000 	cmp	r1, #0
    b3f8:	e7945102 	ldr	r5, [r4, r2, lsl #2]
    b3fc:	e58430ec 	str	r3, [r4, #236]	; 0xec
    b400:	1a000011 	bne	b44c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x13c>
    b404:	e3550000 	cmp	r5, #0
    b408:	0affffef 	beq	b3cc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    b40c:	e1a00005 	mov	r0, r5
    b410:	e3a01f42 	mov	r1, #264	; 0x108
    b414:	eb001939 	bl	11900 <operator delete(void*, unsigned int)>
    b418:	eaffffeb 	b	b3cc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    b41c:	eb001c6b 	bl	125d0 <LeaveCritical>
    b420:	eaffffe9 	b	b3cc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    b424:	e3a02000 	mov	r2, #0
    b428:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    b42c:	e58420e8 	str	r2, [r4, #232]	; 0xe8
    b430:	e1530002 	cmp	r3, r2
    b434:	1affffe2 	bne	b3c4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
    b438:	e3a03001 	mov	r3, #1
    b43c:	e3510000 	cmp	r1, #0
    b440:	e5945020 	ldr	r5, [r4, #32]
    b444:	e58430ec 	str	r3, [r4, #236]	; 0xec
    b448:	0affffed 	beq	b404 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
    b44c:	eb001c5f 	bl	125d0 <LeaveCritical>
    b450:	eaffffeb 	b	b404 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
    b454:	e1a00001 	mov	r0, r1
    b458:	eb001c32 	bl	12528 <EnterCritical>
    b45c:	e59410f0 	ldr	r1, [r4, #240]	; 0xf0
    b460:	eaffffcd 	b	b39c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    b464:	e59d3004 	ldr	r3, [sp, #4]
    b468:	e59f1020 	ldr	r1, [pc, #32]	; b490 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x180>
    b46c:	e59d2000 	ldr	r2, [sp]
    b470:	e0831391 	umull	r1, r3, r1, r3
    b474:	e1a036a3 	lsr	r3, r3, #13
    b478:	e5940004 	ldr	r0, [r4, #4]
    b47c:	e5853100 	str	r3, [r5, #256]	; 0x100
    b480:	e58520fc 	str	r2, [r5, #252]	; 0xfc
    b484:	eb0012b9 	bl	ff70 <CTimer::GetTimeZone() const>
    b488:	e5850104 	str	r0, [r5, #260]	; 0x104
    b48c:	eaffffbf 	b	b390 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>
    b490:	d1b71759 	.word	0xd1b71759

0000b494 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    b494:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b498:	e1a04000 	mov	r4, r0
    b49c:	e59000f0 	ldr	r0, [r0, #240]	; 0xf0
    b4a0:	e1a07001 	mov	r7, r1
    b4a4:	e3500000 	cmp	r0, #0
    b4a8:	e1a08002 	mov	r8, r2
    b4ac:	e1a06003 	mov	r6, r3
    b4b0:	1a000021 	bne	b53c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa8>
    b4b4:	e1c42ed8 	ldrd	r2, [r4, #232]	; 0xe8
    b4b8:	e1530002 	cmp	r3, r2
    b4bc:	0a000027 	beq	b560 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xcc>
    b4c0:	e283c001 	add	ip, r3, #1
    b4c4:	e35c0032 	cmp	ip, #50	; 0x32
    b4c8:	e2833008 	add	r3, r3, #8
    b4cc:	e7945103 	ldr	r5, [r4, r3, lsl #2]
    b4d0:	03a03000 	moveq	r3, #0
    b4d4:	1584c0ec 	strne	ip, [r4, #236]	; 0xec
    b4d8:	058430ec 	streq	r3, [r4, #236]	; 0xec
    b4dc:	e3500000 	cmp	r0, #0
    b4e0:	1a000020 	bne	b568 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
    b4e4:	e1a01005 	mov	r1, r5
    b4e8:	e4d12001 	ldrb	r2, [r1], #1
    b4ec:	e1a00008 	mov	r0, r8
    b4f0:	e5c72000 	strb	r2, [r7]
    b4f4:	eb001663 	bl	10e88 <strcpy>
    b4f8:	e2851033 	add	r1, r5, #51	; 0x33
    b4fc:	e1a00006 	mov	r0, r6
    b500:	eb001660 	bl	10e88 <strcpy>
    b504:	e59530fc 	ldr	r3, [r5, #252]	; 0xfc
    b508:	e59d2018 	ldr	r2, [sp, #24]
    b50c:	e1a00005 	mov	r0, r5
    b510:	e5823000 	str	r3, [r2]
    b514:	e5953100 	ldr	r3, [r5, #256]	; 0x100
    b518:	e59d201c 	ldr	r2, [sp, #28]
    b51c:	e3a01f42 	mov	r1, #264	; 0x108
    b520:	e5823000 	str	r3, [r2]
    b524:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    b528:	e59d2020 	ldr	r2, [sp, #32]
    b52c:	e5823000 	str	r3, [r2]
    b530:	eb0018f2 	bl	11900 <operator delete(void*, unsigned int)>
    b534:	e3a00001 	mov	r0, #1
    b538:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b53c:	eb001bf9 	bl	12528 <EnterCritical>
    b540:	e1c42ed8 	ldrd	r2, [r4, #232]	; 0xe8
    b544:	e1520003 	cmp	r2, r3
    b548:	159400f0 	ldrne	r0, [r4, #240]	; 0xf0
    b54c:	1affffdb 	bne	b4c0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x2c>
    b550:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    b554:	e3530000 	cmp	r3, #0
    b558:	0a000000 	beq	b560 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xcc>
    b55c:	eb001c1b 	bl	125d0 <LeaveCritical>
    b560:	e3a00000 	mov	r0, #0
    b564:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b568:	eb001c18 	bl	125d0 <LeaveCritical>
    b56c:	eaffffdc 	b	b4e4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x50>

0000b570 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    b570:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    b574:	e12fff1e 	bx	lr

0000b578 <CLogger::RegisterPanicHandler(void (*)())>:
    b578:	e58010f8 	str	r1, [r0, #248]	; 0xf8
    b57c:	e12fff1e 	bx	lr

0000b580 <CMachineInfo::CMachineInfo()>:
    b580:	e92d4810 	push	{r4, fp, lr}
    b584:	e28db008 	add	fp, sp, #8
    b588:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    b58c:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
    b590:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b594:	e3a02000 	mov	r2, #0
    b598:	e5832000 	str	r2, [r3]
    b59c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b5a0:	e3a02013 	mov	r2, #19
    b5a4:	e5c32004 	strb	r2, [r3, #4]
    b5a8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b5ac:	e3a02000 	mov	r2, #0
    b5b0:	e5832008 	str	r2, [r3, #8]
    b5b4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b5b8:	e3a02000 	mov	r2, #0
    b5bc:	e583200c 	str	r2, [r3, #12]
    b5c0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b5c4:	e3a02004 	mov	r2, #4
    b5c8:	e5c32010 	strb	r2, [r3, #16]
    b5cc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b5d0:	e3a02000 	mov	r2, #0
    b5d4:	e5832014 	str	r2, [r3, #20]
    b5d8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b5dc:	e59f23b4 	ldr	r2, [pc, #948]	; b998 <CMachineInfo::CMachineInfo()+0x418>
    b5e0:	e1c321b8 	strh	r2, [r3, #24]
    b5e4:	e59f33b0 	ldr	r3, [pc, #944]	; b99c <CMachineInfo::CMachineInfo()+0x41c>
    b5e8:	e5933000 	ldr	r3, [r3]
    b5ec:	e3530000 	cmp	r3, #0
    b5f0:	0a00001e 	beq	b670 <CMachineInfo::CMachineInfo()+0xf0>
    b5f4:	e59f33a0 	ldr	r3, [pc, #928]	; b99c <CMachineInfo::CMachineInfo()+0x41c>
    b5f8:	e5933000 	ldr	r3, [r3]
    b5fc:	e5932000 	ldr	r2, [r3]
    b600:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b604:	e5832000 	str	r2, [r3]
    b608:	e59f338c 	ldr	r3, [pc, #908]	; b99c <CMachineInfo::CMachineInfo()+0x41c>
    b60c:	e5933000 	ldr	r3, [r3]
    b610:	e5d32004 	ldrb	r2, [r3, #4]
    b614:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b618:	e5c32004 	strb	r2, [r3, #4]
    b61c:	e59f3378 	ldr	r3, [pc, #888]	; b99c <CMachineInfo::CMachineInfo()+0x41c>
    b620:	e5933000 	ldr	r3, [r3]
    b624:	e5932008 	ldr	r2, [r3, #8]
    b628:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b62c:	e5832008 	str	r2, [r3, #8]
    b630:	e59f3364 	ldr	r3, [pc, #868]	; b99c <CMachineInfo::CMachineInfo()+0x41c>
    b634:	e5933000 	ldr	r3, [r3]
    b638:	e593200c 	ldr	r2, [r3, #12]
    b63c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b640:	e583200c 	str	r2, [r3, #12]
    b644:	e59f3350 	ldr	r3, [pc, #848]	; b99c <CMachineInfo::CMachineInfo()+0x41c>
    b648:	e5933000 	ldr	r3, [r3]
    b64c:	e5d32010 	ldrb	r2, [r3, #16]
    b650:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b654:	e5c32010 	strb	r2, [r3, #16]
    b658:	e59f333c 	ldr	r3, [pc, #828]	; b99c <CMachineInfo::CMachineInfo()+0x41c>
    b65c:	e5933000 	ldr	r3, [r3]
    b660:	e5932014 	ldr	r2, [r3, #20]
    b664:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b668:	e5832014 	str	r2, [r3, #20]
    b66c:	ea0000c5 	b	b988 <CMachineInfo::CMachineInfo()+0x408>
    b670:	e59f2324 	ldr	r2, [pc, #804]	; b99c <CMachineInfo::CMachineInfo()+0x41c>
    b674:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b678:	e5823000 	str	r3, [r2]
    b67c:	e24b3020 	sub	r3, fp, #32
    b680:	e3a01001 	mov	r1, #1
    b684:	e1a00003 	mov	r0, r3
    b688:	eb001eab 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
    b68c:	e24b2030 	sub	r2, fp, #48	; 0x30
    b690:	e24b0020 	sub	r0, fp, #32
    b694:	e3a03000 	mov	r3, #0
    b698:	e58d3000 	str	r3, [sp]
    b69c:	e3a03010 	mov	r3, #16
    b6a0:	e59f12f8 	ldr	r1, [pc, #760]	; b9a0 <CMachineInfo::CMachineInfo()+0x420>
    b6a4:	eb001eb0 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b6a8:	e1a03000 	mov	r3, r0
    b6ac:	e3530000 	cmp	r3, #0
    b6b0:	0a000003 	beq	b6c4 <CMachineInfo::CMachineInfo()+0x144>
    b6b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    b6b8:	e6ff2073 	uxth	r2, r3
    b6bc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b6c0:	e1c321b8 	strh	r2, [r3, #24]
    b6c4:	e24b2040 	sub	r2, fp, #64	; 0x40
    b6c8:	e24b0020 	sub	r0, fp, #32
    b6cc:	e3a03000 	mov	r3, #0
    b6d0:	e58d3000 	str	r3, [sp]
    b6d4:	e3a03010 	mov	r3, #16
    b6d8:	e59f12c4 	ldr	r1, [pc, #708]	; b9a4 <CMachineInfo::CMachineInfo()+0x424>
    b6dc:	eb001ea2 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b6e0:	e1a03000 	mov	r3, r0
    b6e4:	e2233001 	eor	r3, r3, #1
    b6e8:	e6ef3073 	uxtb	r3, r3
    b6ec:	e3530000 	cmp	r3, #0
    b6f0:	0a000001 	beq	b6fc <CMachineInfo::CMachineInfo()+0x17c>
    b6f4:	e3a04000 	mov	r4, #0
    b6f8:	ea00009e 	b	b978 <CMachineInfo::CMachineInfo()+0x3f8>
    b6fc:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    b700:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b704:	e5832000 	str	r2, [r3]
    b708:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b70c:	e5933000 	ldr	r3, [r3]
    b710:	e2033502 	and	r3, r3, #8388608	; 0x800000
    b714:	e3530000 	cmp	r3, #0
    b718:	0a000064 	beq	b8b0 <CMachineInfo::CMachineInfo()+0x330>
    b71c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b720:	e5933000 	ldr	r3, [r3]
    b724:	e1a03223 	lsr	r3, r3, #4
    b728:	e6ef3073 	uxtb	r3, r3
    b72c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    b730:	e3a03000 	mov	r3, #0
    b734:	e50b3010 	str	r3, [fp, #-16]
    b738:	e51b3010 	ldr	r3, [fp, #-16]
    b73c:	e3530010 	cmp	r3, #16
    b740:	8a00000f 	bhi	b784 <CMachineInfo::CMachineInfo()+0x204>
    b744:	e59f125c 	ldr	r1, [pc, #604]	; b9a8 <CMachineInfo::CMachineInfo()+0x428>
    b748:	e51b2010 	ldr	r2, [fp, #-16]
    b74c:	e1a03002 	mov	r3, r2
    b750:	e1a03083 	lsl	r3, r3, #1
    b754:	e0833002 	add	r3, r3, r2
    b758:	e1a03103 	lsl	r3, r3, #2
    b75c:	e0813003 	add	r3, r1, r3
    b760:	e5933000 	ldr	r3, [r3]
    b764:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    b768:	e1520003 	cmp	r2, r3
    b76c:	0a000003 	beq	b780 <CMachineInfo::CMachineInfo()+0x200>
    b770:	e51b3010 	ldr	r3, [fp, #-16]
    b774:	e2833001 	add	r3, r3, #1
    b778:	e50b3010 	str	r3, [fp, #-16]
    b77c:	eaffffed 	b	b738 <CMachineInfo::CMachineInfo()+0x1b8>
    b780:	e320f000 	nop	{0}
    b784:	e51b3010 	ldr	r3, [fp, #-16]
    b788:	e3530010 	cmp	r3, #16
    b78c:	9a000001 	bls	b798 <CMachineInfo::CMachineInfo()+0x218>
    b790:	e3a04000 	mov	r4, #0
    b794:	ea000077 	b	b978 <CMachineInfo::CMachineInfo()+0x3f8>
    b798:	e59f1208 	ldr	r1, [pc, #520]	; b9a8 <CMachineInfo::CMachineInfo()+0x428>
    b79c:	e51b2010 	ldr	r2, [fp, #-16]
    b7a0:	e1a03002 	mov	r3, r2
    b7a4:	e1a03083 	lsl	r3, r3, #1
    b7a8:	e0833002 	add	r3, r3, r2
    b7ac:	e1a03103 	lsl	r3, r3, #2
    b7b0:	e0813003 	add	r3, r1, r3
    b7b4:	e2833004 	add	r3, r3, #4
    b7b8:	e5d32000 	ldrb	r2, [r3]
    b7bc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b7c0:	e5c32004 	strb	r2, [r3, #4]
    b7c4:	e59f11dc 	ldr	r1, [pc, #476]	; b9a8 <CMachineInfo::CMachineInfo()+0x428>
    b7c8:	e51b2010 	ldr	r2, [fp, #-16]
    b7cc:	e1a03002 	mov	r3, r2
    b7d0:	e1a03083 	lsl	r3, r3, #1
    b7d4:	e0833002 	add	r3, r3, r2
    b7d8:	e1a03103 	lsl	r3, r3, #2
    b7dc:	e0813003 	add	r3, r1, r3
    b7e0:	e2833008 	add	r3, r3, #8
    b7e4:	e5932000 	ldr	r2, [r3]
    b7e8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b7ec:	e5832008 	str	r2, [r3, #8]
    b7f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b7f4:	e5933000 	ldr	r3, [r3]
    b7f8:	e203300f 	and	r3, r3, #15
    b7fc:	e2832001 	add	r2, r3, #1
    b800:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b804:	e583200c 	str	r2, [r3, #12]
    b808:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b80c:	e5933000 	ldr	r3, [r3]
    b810:	e1a03623 	lsr	r3, r3, #12
    b814:	e6ef3073 	uxtb	r3, r3
    b818:	e203300f 	and	r3, r3, #15
    b81c:	e6ef2073 	uxtb	r2, r3
    b820:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b824:	e5c32010 	strb	r2, [r3, #16]
    b828:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b82c:	e5933000 	ldr	r3, [r3]
    b830:	e1a03a23 	lsr	r3, r3, #20
    b834:	e2033007 	and	r3, r3, #7
    b838:	e3a02c01 	mov	r2, #256	; 0x100
    b83c:	e1a03312 	lsl	r3, r2, r3
    b840:	e1a02003 	mov	r2, r3
    b844:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b848:	e5832014 	str	r2, [r3, #20]
    b84c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b850:	e5d33010 	ldrb	r3, [r3, #16]
    b854:	e3530003 	cmp	r3, #3
    b858:	9a000002 	bls	b868 <CMachineInfo::CMachineInfo()+0x2e8>
    b85c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b860:	e3a02004 	mov	r2, #4
    b864:	e5c32010 	strb	r2, [r3, #16]
    b868:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b86c:	e5d33004 	ldrb	r3, [r3, #4]
    b870:	e3530003 	cmp	r3, #3
    b874:	1a00003e 	bne	b974 <CMachineInfo::CMachineInfo()+0x3f4>
    b878:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b87c:	e5933014 	ldr	r3, [r3, #20]
    b880:	e3530c01 	cmp	r3, #256	; 0x100
    b884:	1a00003a 	bne	b974 <CMachineInfo::CMachineInfo()+0x3f4>
    b888:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b88c:	e593300c 	ldr	r3, [r3, #12]
    b890:	e3530001 	cmp	r3, #1
    b894:	1a000001 	bne	b8a0 <CMachineInfo::CMachineInfo()+0x320>
    b898:	e3a02001 	mov	r2, #1
    b89c:	ea000000 	b	b8a4 <CMachineInfo::CMachineInfo()+0x324>
    b8a0:	e3a02002 	mov	r2, #2
    b8a4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b8a8:	e5c32004 	strb	r2, [r3, #4]
    b8ac:	ea000030 	b	b974 <CMachineInfo::CMachineInfo()+0x3f4>
    b8b0:	e3a03000 	mov	r3, #0
    b8b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    b8b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    b8bc:	e3530010 	cmp	r3, #16
    b8c0:	8a00000b 	bhi	b8f4 <CMachineInfo::CMachineInfo()+0x374>
    b8c4:	e59f20e0 	ldr	r2, [pc, #224]	; b9ac <CMachineInfo::CMachineInfo()+0x42c>
    b8c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    b8cc:	e7922203 	ldr	r2, [r2, r3, lsl #4]
    b8d0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b8d4:	e5933000 	ldr	r3, [r3]
    b8d8:	e1520003 	cmp	r2, r3
    b8dc:	0a000003 	beq	b8f0 <CMachineInfo::CMachineInfo()+0x370>
    b8e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    b8e4:	e2833001 	add	r3, r3, #1
    b8e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    b8ec:	eafffff1 	b	b8b8 <CMachineInfo::CMachineInfo()+0x338>
    b8f0:	e320f000 	nop	{0}
    b8f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    b8f8:	e3530010 	cmp	r3, #16
    b8fc:	9a000001 	bls	b908 <CMachineInfo::CMachineInfo()+0x388>
    b900:	e3a04000 	mov	r4, #0
    b904:	ea00001b 	b	b978 <CMachineInfo::CMachineInfo()+0x3f8>
    b908:	e59f209c 	ldr	r2, [pc, #156]	; b9ac <CMachineInfo::CMachineInfo()+0x42c>
    b90c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    b910:	e1a03203 	lsl	r3, r3, #4
    b914:	e0823003 	add	r3, r2, r3
    b918:	e5d32004 	ldrb	r2, [r3, #4]
    b91c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b920:	e5c32004 	strb	r2, [r3, #4]
    b924:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b928:	e3a02001 	mov	r2, #1
    b92c:	e5832008 	str	r2, [r3, #8]
    b930:	e59f2074 	ldr	r2, [pc, #116]	; b9ac <CMachineInfo::CMachineInfo()+0x42c>
    b934:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    b938:	e1a03203 	lsl	r3, r3, #4
    b93c:	e0823003 	add	r3, r2, r3
    b940:	e5932008 	ldr	r2, [r3, #8]
    b944:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b948:	e583200c 	str	r2, [r3, #12]
    b94c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b950:	e3a02000 	mov	r2, #0
    b954:	e5c32010 	strb	r2, [r3, #16]
    b958:	e59f204c 	ldr	r2, [pc, #76]	; b9ac <CMachineInfo::CMachineInfo()+0x42c>
    b95c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    b960:	e1a03203 	lsl	r3, r3, #4
    b964:	e0823003 	add	r3, r2, r3
    b968:	e593200c 	ldr	r2, [r3, #12]
    b96c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b970:	e5832014 	str	r2, [r3, #20]
    b974:	e3a04001 	mov	r4, #1
    b978:	e24b3020 	sub	r3, fp, #32
    b97c:	e1a00003 	mov	r0, r3
    b980:	eb001df4 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
    b984:	e3540001 	cmp	r4, #1
    b988:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b98c:	e1a00003 	mov	r0, r3
    b990:	e24bd008 	sub	sp, fp, #8
    b994:	e8bd8810 	pop	{r4, fp, pc}
    b998:	00001f35 	.word	0x00001f35
    b99c:	00019b54 	.word	0x00019b54
    b9a0:	00060001 	.word	0x00060001
    b9a4:	00010002 	.word	0x00010002
    b9a8:	0001993c 	.word	0x0001993c
    b9ac:	0001982c 	.word	0x0001982c

0000b9b0 <CMachineInfo::~CMachineInfo()>:
    b9b0:	e3a02013 	mov	r2, #19
    b9b4:	e59f3014 	ldr	r3, [pc, #20]	; b9d0 <CMachineInfo::~CMachineInfo()+0x20>
    b9b8:	e5c02004 	strb	r2, [r0, #4]
    b9bc:	e5932000 	ldr	r2, [r3]
    b9c0:	e1520000 	cmp	r2, r0
    b9c4:	03a02000 	moveq	r2, #0
    b9c8:	05832000 	streq	r2, [r3]
    b9cc:	e12fff1e 	bx	lr
    b9d0:	00019b54 	.word	0x00019b54

0000b9d4 <CMachineInfo::GetMachineModel() const>:
    b9d4:	e5d00004 	ldrb	r0, [r0, #4]
    b9d8:	e12fff1e 	bx	lr

0000b9dc <CMachineInfo::GetMachineName() const>:
    b9dc:	e5d02004 	ldrb	r2, [r0, #4]
    b9e0:	e59f3008 	ldr	r3, [pc, #8]	; b9f0 <CMachineInfo::GetMachineName() const+0x14>
    b9e4:	e0833102 	add	r3, r3, r2, lsl #2
    b9e8:	e59301dc 	ldr	r0, [r3, #476]	; 0x1dc
    b9ec:	e12fff1e 	bx	lr
    b9f0:	0001982c 	.word	0x0001982c

0000b9f4 <CMachineInfo::GetModelMajor() const>:
    b9f4:	e5900008 	ldr	r0, [r0, #8]
    b9f8:	e12fff1e 	bx	lr

0000b9fc <CMachineInfo::GetModelRevision() const>:
    b9fc:	e590000c 	ldr	r0, [r0, #12]
    ba00:	e12fff1e 	bx	lr

0000ba04 <CMachineInfo::GetSoCType() const>:
    ba04:	e5d00010 	ldrb	r0, [r0, #16]
    ba08:	e12fff1e 	bx	lr

0000ba0c <CMachineInfo::GetRAMSize() const>:
    ba0c:	e5900014 	ldr	r0, [r0, #20]
    ba10:	e12fff1e 	bx	lr

0000ba14 <CMachineInfo::GetSoCName() const>:
    ba14:	e5d02010 	ldrb	r2, [r0, #16]
    ba18:	e59f3008 	ldr	r3, [pc, #8]	; ba28 <CMachineInfo::GetSoCName() const+0x14>
    ba1c:	e0833102 	add	r3, r3, r2, lsl #2
    ba20:	e593022c 	ldr	r0, [r3, #556]	; 0x22c
    ba24:	e12fff1e 	bx	lr
    ba28:	0001982c 	.word	0x0001982c

0000ba2c <CMachineInfo::GetRevisionRaw() const>:
    ba2c:	e5900000 	ldr	r0, [r0]
    ba30:	e12fff1e 	bx	lr

0000ba34 <CMachineInfo::GetActLEDInfo() const>:
    ba34:	e5d02004 	ldrb	r2, [r0, #4]
    ba38:	e59f3008 	ldr	r3, [pc, #8]	; ba48 <CMachineInfo::GetActLEDInfo() const+0x14>
    ba3c:	e0833102 	add	r3, r3, r2, lsl #2
    ba40:	e5930240 	ldr	r0, [r3, #576]	; 0x240
    ba44:	e12fff1e 	bx	lr
    ba48:	0001982c 	.word	0x0001982c

0000ba4c <CMachineInfo::GetClockRate(unsigned int) const>:
    ba4c:	e92d4070 	push	{r4, r5, r6, lr}
    ba50:	e24dd028 	sub	sp, sp, #40	; 0x28
    ba54:	e1a04001 	mov	r4, r1
    ba58:	e1a06000 	mov	r6, r0
    ba5c:	e3a01000 	mov	r1, #0
    ba60:	e28d000c 	add	r0, sp, #12
    ba64:	eb001db4 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
    ba68:	e3a03004 	mov	r3, #4
    ba6c:	e28d000c 	add	r0, sp, #12
    ba70:	e58d3000 	str	r3, [sp]
    ba74:	e28d2014 	add	r2, sp, #20
    ba78:	e3a03014 	mov	r3, #20
    ba7c:	e59f10e4 	ldr	r1, [pc, #228]	; bb68 <CMachineInfo::GetClockRate(unsigned int) const+0x11c>
    ba80:	e58d4020 	str	r4, [sp, #32]
    ba84:	eb001db8 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ba88:	e3500000 	cmp	r0, #0
    ba8c:	0a000002 	beq	ba9c <CMachineInfo::GetClockRate(unsigned int) const+0x50>
    ba90:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    ba94:	e3550000 	cmp	r5, #0
    ba98:	1a00001f 	bne	bb1c <CMachineInfo::GetClockRate(unsigned int) const+0xd0>
    ba9c:	e3a03004 	mov	r3, #4
    baa0:	e28d2014 	add	r2, sp, #20
    baa4:	e58d3000 	str	r3, [sp]
    baa8:	e59f10bc 	ldr	r1, [pc, #188]	; bb6c <CMachineInfo::GetClockRate(unsigned int) const+0x120>
    baac:	e3a03014 	mov	r3, #20
    bab0:	e28d000c 	add	r0, sp, #12
    bab4:	e58d4020 	str	r4, [sp, #32]
    bab8:	eb001dab 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    babc:	e3500000 	cmp	r0, #0
    bac0:	0a000002 	beq	bad0 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
    bac4:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    bac8:	e3550000 	cmp	r5, #0
    bacc:	1a000012 	bne	bb1c <CMachineInfo::GetClockRate(unsigned int) const+0xd0>
    bad0:	e2444001 	sub	r4, r4, #1
    bad4:	e354000d 	cmp	r4, #13
    bad8:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
    badc:	ea00001d 	b	bb58 <CMachineInfo::GetClockRate(unsigned int) const+0x10c>
    bae0:	0000bb38 	.word	0x0000bb38
    bae4:	0000bb18 	.word	0x0000bb18
    bae8:	0000bb58 	.word	0x0000bb58
    baec:	0000bb40 	.word	0x0000bb40
    baf0:	0000bb58 	.word	0x0000bb58
    baf4:	0000bb58 	.word	0x0000bb58
    baf8:	0000bb58 	.word	0x0000bb58
    bafc:	0000bb58 	.word	0x0000bb58
    bb00:	0000bb58 	.word	0x0000bb58
    bb04:	0000bb58 	.word	0x0000bb58
    bb08:	0000bb58 	.word	0x0000bb58
    bb0c:	0000bb38 	.word	0x0000bb38
    bb10:	0000bb58 	.word	0x0000bb58
    bb14:	0000bb30 	.word	0x0000bb30
    bb18:	e59f5050 	ldr	r5, [pc, #80]	; bb70 <CMachineInfo::GetClockRate(unsigned int) const+0x124>
    bb1c:	e28d000c 	add	r0, sp, #12
    bb20:	eb001d8c 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
    bb24:	e1a00005 	mov	r0, r5
    bb28:	e28dd028 	add	sp, sp, #40	; 0x28
    bb2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb30:	e3a05000 	mov	r5, #0
    bb34:	eafffff8 	b	bb1c <CMachineInfo::GetClockRate(unsigned int) const+0xd0>
    bb38:	e59f5034 	ldr	r5, [pc, #52]	; bb74 <CMachineInfo::GetClockRate(unsigned int) const+0x128>
    bb3c:	eafffff6 	b	bb1c <CMachineInfo::GetClockRate(unsigned int) const+0xd0>
    bb40:	e5962008 	ldr	r2, [r6, #8]
    bb44:	e59f302c 	ldr	r3, [pc, #44]	; bb78 <CMachineInfo::GetClockRate(unsigned int) const+0x12c>
    bb48:	e3520002 	cmp	r2, #2
    bb4c:	e59f5028 	ldr	r5, [pc, #40]	; bb7c <CMachineInfo::GetClockRate(unsigned int) const+0x130>
    bb50:	81a05003 	movhi	r5, r3
    bb54:	eafffff0 	b	bb1c <CMachineInfo::GetClockRate(unsigned int) const+0xd0>
    bb58:	e59f1020 	ldr	r1, [pc, #32]	; bb80 <CMachineInfo::GetClockRate(unsigned int) const+0x134>
    bb5c:	e59f2020 	ldr	r2, [pc, #32]	; bb84 <CMachineInfo::GetClockRate(unsigned int) const+0x138>
    bb60:	e2810010 	add	r0, r1, #16
    bb64:	ebfff573 	bl	9138 <assertion_failed>
    bb68:	00030002 	.word	0x00030002
    bb6c:	00030047 	.word	0x00030047
    bb70:	02dc6c00 	.word	0x02dc6c00
    bb74:	05f5e100 	.word	0x05f5e100
    bb78:	11e1a300 	.word	0x11e1a300
    bb7c:	0ee6b280 	.word	0x0ee6b280
    bb80:	00017b2c 	.word	0x00017b2c
    bb84:	0000015d 	.word	0x0000015d

0000bb88 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    bb88:	e3510036 	cmp	r1, #54	; 0x36
    bb8c:	0a000006 	beq	bbac <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    bb90:	e3510037 	cmp	r1, #55	; 0x37
    bb94:	1a00000e 	bne	bbd4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
    bb98:	e5d03004 	ldrb	r3, [r0, #4]
    bb9c:	e3530003 	cmp	r3, #3
    bba0:	83a00028 	movhi	r0, #40	; 0x28
    bba4:	93a0002d 	movls	r0, #45	; 0x2d
    bba8:	e12fff1e 	bx	lr
    bbac:	e5d03004 	ldrb	r3, [r0, #4]
    bbb0:	e3530003 	cmp	r3, #3
    bbb4:	9a000004 	bls	bbcc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
    bbb8:	e5903008 	ldr	r3, [r0, #8]
    bbbc:	e3530003 	cmp	r3, #3
    bbc0:	33a0002d 	movcc	r0, #45	; 0x2d
    bbc4:	23a00029 	movcs	r0, #41	; 0x29
    bbc8:	e12fff1e 	bx	lr
    bbcc:	e3a00028 	mov	r0, #40	; 0x28
    bbd0:	e12fff1e 	bx	lr
    bbd4:	e59f100c 	ldr	r1, [pc, #12]	; bbe8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
    bbd8:	e92d4010 	push	{r4, lr}
    bbdc:	e3a02e1a 	mov	r2, #416	; 0x1a0
    bbe0:	e2810010 	add	r0, r1, #16
    bbe4:	ebfff553 	bl	9138 <assertion_failed>
    bbe8:	00017b2c 	.word	0x00017b2c

0000bbec <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
    bbec:	e5903008 	ldr	r3, [r0, #8]
    bbf0:	e3530003 	cmp	r3, #3
    bbf4:	8a000005 	bhi	bc10 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x24>
    bbf8:	e3510001 	cmp	r1, #1
    bbfc:	0a000009 	beq	bc28 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x3c>
    bc00:	e3510006 	cmp	r1, #6
    bc04:	e59f002c 	ldr	r0, [pc, #44]	; bc38 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x4c>
    bc08:	13a00000 	movne	r0, #0
    bc0c:	e12fff1e 	bx	lr
    bc10:	e3510001 	cmp	r1, #1
    bc14:	0a000005 	beq	bc30 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
    bc18:	e3510006 	cmp	r1, #6
    bc1c:	e59f0018 	ldr	r0, [pc, #24]	; bc3c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
    bc20:	13a00000 	movne	r0, #0
    bc24:	e12fff1e 	bx	lr
    bc28:	e59f0010 	ldr	r0, [pc, #16]	; bc40 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x54>
    bc2c:	e12fff1e 	bx	lr
    bc30:	e59f000c 	ldr	r0, [pc, #12]	; bc44 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x58>
    bc34:	e12fff1e 	bx	lr
    bc38:	1dcd6500 	.word	0x1dcd6500
    bc3c:	2cb41780 	.word	0x2cb41780
    bc40:	0124f800 	.word	0x0124f800
    bc44:	0337f980 	.word	0x0337f980

0000bc48 <CMachineInfo::GetDevice(TDeviceId) const>:
    bc48:	e3510000 	cmp	r1, #0
    bc4c:	1a000003 	bne	bc60 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    bc50:	e5d00004 	ldrb	r0, [r0, #4]
    bc54:	e2500001 	subs	r0, r0, #1
    bc58:	13a00001 	movne	r0, #1
    bc5c:	e12fff1e 	bx	lr
    bc60:	e59f100c 	ldr	r1, [pc, #12]	; bc74 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
    bc64:	e92d4010 	push	{r4, lr}
    bc68:	e59f2008 	ldr	r2, [pc, #8]	; bc78 <CMachineInfo::GetDevice(TDeviceId) const+0x30>
    bc6c:	e2810010 	add	r0, r1, #16
    bc70:	ebfff530 	bl	9138 <assertion_failed>
    bc74:	00017b2c 	.word	0x00017b2c
    bc78:	000001db 	.word	0x000001db

0000bc7c <CMachineInfo::ArePWMChannelsSwapped() const>:
    bc7c:	e5d03004 	ldrb	r3, [r0, #4]
    bc80:	e2430006 	sub	r0, r3, #6
    bc84:	e3500002 	cmp	r0, #2
    bc88:	83530003 	cmphi	r3, #3
    bc8c:	83a00001 	movhi	r0, #1
    bc90:	93a00000 	movls	r0, #0
    bc94:	e12fff1e 	bx	lr

0000bc98 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
    bc98:	e59f30b0 	ldr	r3, [pc, #176]	; bd50 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb8>
    bc9c:	e92d4010 	push	{r4, lr}
    bca0:	e5933000 	ldr	r3, [r3]
    bca4:	ea000002 	b	bcb4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
    bca8:	e1530000 	cmp	r3, r0
    bcac:	0a000006 	beq	bccc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x34>
    bcb0:	e1a00003 	mov	r0, r3
    bcb4:	e3530000 	cmp	r3, #0
    bcb8:	1afffffa 	bne	bca8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x10>
    bcbc:	e59f1090 	ldr	r1, [pc, #144]	; bd54 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
    bcc0:	e3a02f7b 	mov	r2, #492	; 0x1ec
    bcc4:	e2810014 	add	r0, r1, #20
    bcc8:	ebfff51a 	bl	9138 <assertion_failed>
    bccc:	e3d1200f 	bics	r2, r1, #15
    bcd0:	1a00000a 	bne	bd00 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x68>
    bcd4:	e351000b 	cmp	r1, #11
    bcd8:	8a000018 	bhi	bd40 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
    bcdc:	e1d321b8 	ldrh	r2, [r3, #24]
    bce0:	e1a00152 	asr	r0, r2, r1
    bce4:	e3100001 	tst	r0, #1
    bce8:	0a00000d 	beq	bd24 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x8c>
    bcec:	e3a00001 	mov	r0, #1
    bcf0:	e1c22110 	bic	r2, r2, r0, lsl r1
    bcf4:	e1c321b8 	strh	r2, [r3, #24]
    bcf8:	e1a00001 	mov	r0, r1
    bcfc:	e8bd8010 	pop	{r4, pc}
    bd00:	e3510081 	cmp	r1, #129	; 0x81
    bd04:	03a01006 	moveq	r1, #6
    bd08:	13a0100b 	movne	r1, #11
    bd0c:	e1d021b8 	ldrh	r2, [r0, #24]
    bd10:	e1a03152 	asr	r3, r2, r1
    bd14:	e3130001 	tst	r3, #1
    bd18:	1a000003 	bne	bd2c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>
    bd1c:	e2511001 	subs	r1, r1, #1
    bd20:	2afffffa 	bcs	bd10 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x78>
    bd24:	e3a00080 	mov	r0, #128	; 0x80
    bd28:	e8bd8010 	pop	{r4, pc}
    bd2c:	e3a03001 	mov	r3, #1
    bd30:	e1c22113 	bic	r2, r2, r3, lsl r1
    bd34:	e1c021b8 	strh	r2, [r0, #24]
    bd38:	e1a00001 	mov	r0, r1
    bd3c:	e8bd8010 	pop	{r4, pc}
    bd40:	e59f100c 	ldr	r1, [pc, #12]	; bd54 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
    bd44:	e59f200c 	ldr	r2, [pc, #12]	; bd58 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
    bd48:	e2810024 	add	r0, r1, #36	; 0x24
    bd4c:	ebfff4f9 	bl	9138 <assertion_failed>
    bd50:	00019b54 	.word	0x00019b54
    bd54:	00017b2c 	.word	0x00017b2c
    bd58:	000001f5 	.word	0x000001f5

0000bd5c <CMachineInfo::FreeDMAChannel(unsigned int)>:
    bd5c:	e59f3074 	ldr	r3, [pc, #116]	; bdd8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
    bd60:	e92d4010 	push	{r4, lr}
    bd64:	e5933000 	ldr	r3, [r3]
    bd68:	ea000002 	b	bd78 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
    bd6c:	e1530000 	cmp	r3, r0
    bd70:	0a000006 	beq	bd90 <CMachineInfo::FreeDMAChannel(unsigned int)+0x34>
    bd74:	e1a00003 	mov	r0, r3
    bd78:	e3530000 	cmp	r3, #0
    bd7c:	1afffffa 	bne	bd6c <CMachineInfo::FreeDMAChannel(unsigned int)+0x10>
    bd80:	e59f1054 	ldr	r1, [pc, #84]	; bddc <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    bd84:	e59f2054 	ldr	r2, [pc, #84]	; bde0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
    bd88:	e2810014 	add	r0, r1, #20
    bd8c:	ebfff4e9 	bl	9138 <assertion_failed>
    bd90:	e351000b 	cmp	r1, #11
    bd94:	8a000007 	bhi	bdb8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x5c>
    bd98:	e1d321b8 	ldrh	r2, [r3, #24]
    bd9c:	e1a00152 	asr	r0, r2, r1
    bda0:	e3100001 	tst	r0, #1
    bda4:	1a000007 	bne	bdc8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
    bda8:	e3a00001 	mov	r0, #1
    bdac:	e1821110 	orr	r1, r2, r0, lsl r1
    bdb0:	e1c311b8 	strh	r1, [r3, #24]
    bdb4:	e8bd8010 	pop	{r4, pc}
    bdb8:	e59f101c 	ldr	r1, [pc, #28]	; bddc <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    bdbc:	e59f2020 	ldr	r2, [pc, #32]	; bde4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x88>
    bdc0:	e2810024 	add	r0, r1, #36	; 0x24
    bdc4:	ebfff4db 	bl	9138 <assertion_failed>
    bdc8:	e59f100c 	ldr	r1, [pc, #12]	; bddc <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    bdcc:	e59f2014 	ldr	r2, [pc, #20]	; bde8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
    bdd0:	e2810040 	add	r0, r1, #64	; 0x40
    bdd4:	ebfff4d7 	bl	9138 <assertion_failed>
    bdd8:	00019b54 	.word	0x00019b54
    bddc:	00017b2c 	.word	0x00017b2c
    bde0:	00000219 	.word	0x00000219
    bde4:	00000221 	.word	0x00000221
    bde8:	00000222 	.word	0x00000222

0000bdec <CMachineInfo::Get()>:
    bdec:	e59f301c 	ldr	r3, [pc, #28]	; be10 <CMachineInfo::Get()+0x24>
    bdf0:	e5930000 	ldr	r0, [r3]
    bdf4:	e3500000 	cmp	r0, #0
    bdf8:	112fff1e 	bxne	lr
    bdfc:	e59f1010 	ldr	r1, [pc, #16]	; be14 <CMachineInfo::Get()+0x28>
    be00:	e92d4010 	push	{r4, lr}
    be04:	e59f200c 	ldr	r2, [pc, #12]	; be18 <CMachineInfo::Get()+0x2c>
    be08:	e2810014 	add	r0, r1, #20
    be0c:	ebfff4c9 	bl	9138 <assertion_failed>
    be10:	00019b54 	.word	0x00019b54
    be14:	00017b2c 	.word	0x00017b2c
    be18:	00000269 	.word	0x00000269

0000be1c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
    be1c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    be20:	e1a04000 	mov	r4, r0
    be24:	e3a05000 	mov	r5, #0
    be28:	e1a09001 	mov	r9, r1
    be2c:	e1a08002 	mov	r8, r2
    be30:	e1a07003 	mov	r7, r3
    be34:	e59d6020 	ldr	r6, [sp, #32]
    be38:	eb001d94 	bl	13490 <CDevice::CDevice()>
    be3c:	e59f0064 	ldr	r0, [pc, #100]	; bea8 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)+0x8c>
    be40:	e584900c 	str	r9, [r4, #12]
    be44:	e5840000 	str	r0, [r4]
    be48:	e5848010 	str	r8, [r4, #16]
    be4c:	e5c47014 	strb	r7, [r4, #20]
    be50:	e5846018 	str	r6, [r4, #24]
    be54:	e584501c 	str	r5, [r4, #28]
    be58:	e2840020 	add	r0, r4, #32
    be5c:	eb001d44 	bl	13374 <CCharGenerator::CCharGenerator()>
    be60:	e59f3044 	ldr	r3, [pc, #68]	; beac <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)+0x90>
    be64:	e5845024 	str	r5, [r4, #36]	; 0x24
    be68:	e5843054 	str	r3, [r4, #84]	; 0x54
    be6c:	e5845028 	str	r5, [r4, #40]	; 0x28
    be70:	e5845040 	str	r5, [r4, #64]	; 0x40
    be74:	e5845044 	str	r5, [r4, #68]	; 0x44
    be78:	e584504c 	str	r5, [r4, #76]	; 0x4c
    be7c:	e5845050 	str	r5, [r4, #80]	; 0x50
    be80:	e5845058 	str	r5, [r4, #88]	; 0x58
    be84:	e5c45064 	strb	r5, [r4, #100]	; 0x64
    be88:	e1a02005 	mov	r2, r5
    be8c:	e2840068 	add	r0, r4, #104	; 0x68
    be90:	e3a01081 	mov	r1, #129	; 0x81
    be94:	eb001d85 	bl	134b0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
    be98:	e3a03001 	mov	r3, #1
    be9c:	e1a00004 	mov	r0, r4
    bea0:	e5843090 	str	r3, [r4, #144]	; 0x90
    bea4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    bea8:	00017b9c 	.word	0x00017b9c
    beac:	ffdf0001 	.word	0xffdf0001

0000beb0 <CScreenDevice::~CScreenDevice()>:
    beb0:	e5d02014 	ldrb	r2, [r0, #20]
    beb4:	e59f3088 	ldr	r3, [pc, #136]	; bf44 <CScreenDevice::~CScreenDevice()+0x94>
    beb8:	e3520000 	cmp	r2, #0
    bebc:	e92d4070 	push	{r4, r5, r6, lr}
    bec0:	e1a04000 	mov	r4, r0
    bec4:	e5803000 	str	r3, [r0]
    bec8:	0a000003 	beq	bedc <CScreenDevice::~CScreenDevice()+0x2c>
    becc:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    bed0:	e3500000 	cmp	r0, #0
    bed4:	0a000000 	beq	bedc <CScreenDevice::~CScreenDevice()+0x2c>
    bed8:	eb001687 	bl	118fc <operator delete[](void*)>
    bedc:	e3a03000 	mov	r3, #0
    bee0:	e594501c 	ldr	r5, [r4, #28]
    bee4:	e5843028 	str	r3, [r4, #40]	; 0x28
    bee8:	e1550003 	cmp	r5, r3
    beec:	0a000004 	beq	bf04 <CScreenDevice::~CScreenDevice()+0x54>
    bef0:	e1a00005 	mov	r0, r5
    bef4:	eb001bce 	bl	12e34 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    bef8:	e1a00005 	mov	r0, r5
    befc:	e3a01098 	mov	r1, #152	; 0x98
    bf00:	eb00167e 	bl	11900 <operator delete(void*, unsigned int)>
    bf04:	e3a03000 	mov	r3, #0
    bf08:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    bf0c:	e584301c 	str	r3, [r4, #28]
    bf10:	e1500003 	cmp	r0, r3
    bf14:	0a000000 	beq	bf1c <CScreenDevice::~CScreenDevice()+0x6c>
    bf18:	eb001677 	bl	118fc <operator delete[](void*)>
    bf1c:	e3a03000 	mov	r3, #0
    bf20:	e2840068 	add	r0, r4, #104	; 0x68
    bf24:	e5843024 	str	r3, [r4, #36]	; 0x24
    bf28:	eb001da1 	bl	135b4 <CDMAChannel::~CDMAChannel()>
    bf2c:	e2840020 	add	r0, r4, #32
    bf30:	eb001d12 	bl	13380 <CCharGenerator::~CCharGenerator()>
    bf34:	e1a00004 	mov	r0, r4
    bf38:	eb001d32 	bl	13408 <CDevice::~CDevice()>
    bf3c:	e1a00004 	mov	r0, r4
    bf40:	e8bd8070 	pop	{r4, r5, r6, pc}
    bf44:	00017b9c 	.word	0x00017b9c

0000bf48 <CScreenDevice::~CScreenDevice()>:
    bf48:	e92d4010 	push	{r4, lr}
    bf4c:	e1a04000 	mov	r4, r0
    bf50:	ebffffd6 	bl	beb0 <CScreenDevice::~CScreenDevice()>
    bf54:	e1a00004 	mov	r0, r4
    bf58:	e3a01094 	mov	r1, #148	; 0x94
    bf5c:	eb001667 	bl	11900 <operator delete(void*, unsigned int)>
    bf60:	e1a00004 	mov	r0, r4
    bf64:	e8bd8010 	pop	{r4, pc}

0000bf68 <CScreenDevice::Initialize()>:
    bf68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bf6c:	e5d05014 	ldrb	r5, [r0, #20]
    bf70:	e24dd010 	sub	sp, sp, #16
    bf74:	e3550000 	cmp	r5, #0
    bf78:	e1a04000 	mov	r4, r0
    bf7c:	0a00002f 	beq	c040 <CScreenDevice::Initialize()+0xd8>
    bf80:	e590300c 	ldr	r3, [r0, #12]
    bf84:	e5902010 	ldr	r2, [r0, #16]
    bf88:	e5803034 	str	r3, [r0, #52]	; 0x34
    bf8c:	e0000392 	mul	r0, r2, r3
    bf90:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    bf94:	e1a00080 	lsl	r0, r0, #1
    bf98:	e584002c 	str	r0, [r4, #44]	; 0x2c
    bf9c:	e5843030 	str	r3, [r4, #48]	; 0x30
    bfa0:	23e00000 	mvncs	r0, #0
    bfa4:	e5842038 	str	r2, [r4, #56]	; 0x38
    bfa8:	eb00164c 	bl	118e0 <operator new[](unsigned int)>
    bfac:	e2846020 	add	r6, r4, #32
    bfb0:	e5840028 	str	r0, [r4, #40]	; 0x28
    bfb4:	e1a00006 	mov	r0, r6
    bfb8:	e5945038 	ldr	r5, [r4, #56]	; 0x38
    bfbc:	eb001cf2 	bl	1338c <CCharGenerator::GetCharHeight() const>
    bfc0:	e1a01000 	mov	r1, r0
    bfc4:	e1a00005 	mov	r0, r5
    bfc8:	eb00233a 	bl	14cb8 <__udivsi3>
    bfcc:	e1a05000 	mov	r5, r0
    bfd0:	e1a00006 	mov	r0, r6
    bfd4:	eb001cec 	bl	1338c <CCharGenerator::GetCharHeight() const>
    bfd8:	e3a02000 	mov	r2, #0
    bfdc:	e0000590 	mul	r0, r0, r5
    bfe0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bfe4:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bfe8:	e5840048 	str	r0, [r4, #72]	; 0x48
    bfec:	e1c424fc 	strd	r2, [r4, #76]	; 0x4c
    bff0:	e1a00004 	mov	r0, r4
    bff4:	eb00020c 	bl	c82c <CScreenDevice::ClearDisplayEnd()>
    bff8:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
    bffc:	e3530000 	cmp	r3, #0
    c000:	1a00000b 	bne	c034 <CScreenDevice::Initialize()+0xcc>
    c004:	ebfff5bb 	bl	96f8 <CDeviceNameService::Get()>
    c008:	e3a03000 	mov	r3, #0
    c00c:	e5942018 	ldr	r2, [r4, #24]
    c010:	e59f1110 	ldr	r1, [pc, #272]	; c128 <CScreenDevice::Initialize()+0x1c0>
    c014:	e58d3000 	str	r3, [sp]
    c018:	e2822001 	add	r2, r2, #1
    c01c:	e1a03004 	mov	r3, r4
    c020:	ebfff5c0 	bl	9728 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    c024:	e3a05001 	mov	r5, #1
    c028:	e1a00005 	mov	r0, r5
    c02c:	e28dd010 	add	sp, sp, #16
    c030:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c034:	e1a00004 	mov	r0, r4
    c038:	eb0004bc 	bl	d330 <CScreenDevice::InvertCursor() [clone .part.8]>
    c03c:	eafffff0 	b	c004 <CScreenDevice::Initialize()+0x9c>
    c040:	e3a00098 	mov	r0, #152	; 0x98
    c044:	eb00161f 	bl	118c8 <operator new(unsigned int)>
    c048:	e1a06000 	mov	r6, r0
    c04c:	e5943018 	ldr	r3, [r4, #24]
    c050:	e58d500c 	str	r5, [sp, #12]
    c054:	e58d3008 	str	r3, [sp, #8]
    c058:	e58d5004 	str	r5, [sp, #4]
    c05c:	e58d5000 	str	r5, [sp]
    c060:	e3a03010 	mov	r3, #16
    c064:	e5942010 	ldr	r2, [r4, #16]
    c068:	e594100c 	ldr	r1, [r4, #12]
    c06c:	eb001b18 	bl	12cd4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
    c070:	e584601c 	str	r6, [r4, #28]
    c074:	e1a00006 	mov	r0, r6
    c078:	eb001b98 	bl	12ee0 <CBcmFrameBuffer::Initialize()>
    c07c:	e3500000 	cmp	r0, #0
    c080:	0affffe8 	beq	c028 <CScreenDevice::Initialize()+0xc0>
    c084:	e594001c 	ldr	r0, [r4, #28]
    c088:	eb001bd5 	bl	12fe4 <CBcmFrameBuffer::GetDepth() const>
    c08c:	e3500010 	cmp	r0, #16
    c090:	1affffe4 	bne	c028 <CScreenDevice::Initialize()+0xc0>
    c094:	e594001c 	ldr	r0, [r4, #28]
    c098:	eb001bd3 	bl	12fec <CBcmFrameBuffer::GetBuffer() const>
    c09c:	e5840028 	str	r0, [r4, #40]	; 0x28
    c0a0:	e594001c 	ldr	r0, [r4, #28]
    c0a4:	eb001bd2 	bl	12ff4 <CBcmFrameBuffer::GetSize() const>
    c0a8:	e584002c 	str	r0, [r4, #44]	; 0x2c
    c0ac:	e594001c 	ldr	r0, [r4, #28]
    c0b0:	eb001bc9 	bl	12fdc <CBcmFrameBuffer::GetPitch() const>
    c0b4:	e5840030 	str	r0, [r4, #48]	; 0x30
    c0b8:	e594001c 	ldr	r0, [r4, #28]
    c0bc:	eb001bbe 	bl	12fbc <CBcmFrameBuffer::GetWidth() const>
    c0c0:	e5840034 	str	r0, [r4, #52]	; 0x34
    c0c4:	e594001c 	ldr	r0, [r4, #28]
    c0c8:	eb001bbd 	bl	12fc4 <CBcmFrameBuffer::GetHeight() const>
    c0cc:	e2846020 	add	r6, r4, #32
    c0d0:	e5840038 	str	r0, [r4, #56]	; 0x38
    c0d4:	e1a00006 	mov	r0, r6
    c0d8:	eb001ca9 	bl	13384 <CCharGenerator::GetCharWidth() const>
    c0dc:	e1a07000 	mov	r7, r0
    c0e0:	e1a00006 	mov	r0, r6
    c0e4:	eb001ca8 	bl	1338c <CCharGenerator::GetCharHeight() const>
    c0e8:	e1a08000 	mov	r8, r0
    c0ec:	e1a00006 	mov	r0, r6
    c0f0:	eb001ca7 	bl	13394 <CCharGenerator::GetUnderline() const>
    c0f4:	e0480000 	sub	r0, r8, r0
    c0f8:	e0000097 	mul	r0, r7, r0
    c0fc:	e3700113 	cmn	r0, #-1073741820	; 0xc0000004
    c100:	91a00080 	lslls	r0, r0, #1
    c104:	83e00000 	mvnhi	r0, #0
    c108:	eb0015f4 	bl	118e0 <operator new[](unsigned int)>
    c10c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    c110:	e5840024 	str	r0, [r4, #36]	; 0x24
    c114:	e3130003 	tst	r3, #3
    c118:	1affffc2 	bne	c028 <CScreenDevice::Initialize()+0xc0>
    c11c:	e1a030a3 	lsr	r3, r3, #1
    c120:	e5843030 	str	r3, [r4, #48]	; 0x30
    c124:	eaffffa2 	b	bfb4 <CScreenDevice::Initialize()+0x4c>
    c128:	00017bbc 	.word	0x00017bbc

0000c12c <CScreenDevice::GetWidth() const>:
    c12c:	e5900034 	ldr	r0, [r0, #52]	; 0x34
    c130:	e12fff1e 	bx	lr

0000c134 <CScreenDevice::GetHeight() const>:
    c134:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    c138:	e12fff1e 	bx	lr

0000c13c <CScreenDevice::GetColumns() const>:
    c13c:	e92d4010 	push	{r4, lr}
    c140:	e2800020 	add	r0, r0, #32
    c144:	e5904014 	ldr	r4, [r0, #20]
    c148:	eb001c8d 	bl	13384 <CCharGenerator::GetCharWidth() const>
    c14c:	e1a01000 	mov	r1, r0
    c150:	e1a00004 	mov	r0, r4
    c154:	eb0022d7 	bl	14cb8 <__udivsi3>
    c158:	e8bd8010 	pop	{r4, pc}

0000c15c <CScreenDevice::GetRows() const>:
    c15c:	e92d4010 	push	{r4, lr}
    c160:	e2800020 	add	r0, r0, #32
    c164:	e590401c 	ldr	r4, [r0, #28]
    c168:	eb001c87 	bl	1338c <CCharGenerator::GetCharHeight() const>
    c16c:	e1a01000 	mov	r1, r0
    c170:	e1a00004 	mov	r0, r4
    c174:	eb0022cf 	bl	14cb8 <__udivsi3>
    c178:	e8bd8010 	pop	{r4, pc}

0000c17c <CScreenDevice::GetFrameBuffer()>:
    c17c:	e590001c 	ldr	r0, [r0, #28]
    c180:	e12fff1e 	bx	lr

0000c184 <CScreenDevice::GetStatus()>:
    c184:	e92d4010 	push	{r4, lr}
    c188:	e591c02c 	ldr	ip, [r1, #44]	; 0x2c
    c18c:	e591e028 	ldr	lr, [r1, #40]	; 0x28
    c190:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    c194:	e580e000 	str	lr, [r0]
    c198:	e580c004 	str	ip, [r0, #4]
    c19c:	e591e044 	ldr	lr, [r1, #68]	; 0x44
    c1a0:	e591c048 	ldr	ip, [r1, #72]	; 0x48
    c1a4:	e5802008 	str	r2, [r0, #8]
    c1a8:	e591204c 	ldr	r2, [r1, #76]	; 0x4c
    c1ac:	e580e00c 	str	lr, [r0, #12]
    c1b0:	e580c010 	str	ip, [r0, #16]
    c1b4:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    c1b8:	e5d1c054 	ldrb	ip, [r1, #84]	; 0x54
    c1bc:	e5802014 	str	r2, [r0, #20]
    c1c0:	e1d125b6 	ldrh	r2, [r1, #86]	; 0x56
    c1c4:	e580e018 	str	lr, [r0, #24]
    c1c8:	e5914058 	ldr	r4, [r1, #88]	; 0x58
    c1cc:	e5c0c01c 	strb	ip, [r0, #28]
    c1d0:	e591e05c 	ldr	lr, [r1, #92]	; 0x5c
    c1d4:	e1c021be 	strh	r2, [r0, #30]
    c1d8:	e591c060 	ldr	ip, [r1, #96]	; 0x60
    c1dc:	e5d12064 	ldrb	r2, [r1, #100]	; 0x64
    c1e0:	e5804020 	str	r4, [r0, #32]
    c1e4:	e580e024 	str	lr, [r0, #36]	; 0x24
    c1e8:	e580c028 	str	ip, [r0, #40]	; 0x28
    c1ec:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    c1f0:	e8bd8010 	pop	{r4, pc}

0000c1f4 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    c1f4:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
    c1f8:	e5913004 	ldr	r3, [r1, #4]
    c1fc:	e1520003 	cmp	r2, r3
    c200:	0a000001 	beq	c20c <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    c204:	e3a00000 	mov	r0, #0
    c208:	e12fff1e 	bx	lr
    c20c:	e590c030 	ldr	ip, [r0, #48]	; 0x30
    c210:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c214:	e15c0003 	cmp	ip, r3
    c218:	1afffff9 	bne	c204 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
    c21c:	e92d4070 	push	{r4, r5, r6, lr}
    c220:	e1a04000 	mov	r4, r0
    c224:	e5900090 	ldr	r0, [r0, #144]	; 0x90
    c228:	e1a05001 	mov	r5, r1
    c22c:	e3500000 	cmp	r0, #0
    c230:	1a000024 	bne	c2c8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd4>
    c234:	e5d43064 	ldrb	r3, [r4, #100]	; 0x64
    c238:	e3530000 	cmp	r3, #0
    c23c:	1a00002c 	bne	c2f4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
    c240:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
    c244:	e3530000 	cmp	r3, #0
    c248:	1a000029 	bne	c2f4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
    c24c:	e5951000 	ldr	r1, [r5]
    c250:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    c254:	eb00148e 	bl	11494 <memcpy>
    c258:	e5940090 	ldr	r0, [r4, #144]	; 0x90
    c25c:	e2851008 	add	r1, r5, #8
    c260:	e891000e 	ldm	r1, {r1, r2, r3}
    c264:	e3500000 	cmp	r0, #0
    c268:	e5950014 	ldr	r0, [r5, #20]
    c26c:	e5841040 	str	r1, [r4, #64]	; 0x40
    c270:	e5951018 	ldr	r1, [r5, #24]
    c274:	e1d5c2b0 	ldrh	ip, [r5, #32]
    c278:	e5842044 	str	r2, [r4, #68]	; 0x44
    c27c:	e5d5201c 	ldrb	r2, [r5, #28]
    c280:	e5843048 	str	r3, [r4, #72]	; 0x48
    c284:	e1d531be 	ldrh	r3, [r5, #30]
    c288:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c28c:	e5841050 	str	r1, [r4, #80]	; 0x50
    c290:	e5d50022 	ldrb	r0, [r5, #34]	; 0x22
    c294:	e5d51023 	ldrb	r1, [r5, #35]	; 0x23
    c298:	e5c42054 	strb	r2, [r4, #84]	; 0x54
    c29c:	e1c435b6 	strh	r3, [r4, #86]	; 0x56
    c2a0:	e1c522d4 	ldrd	r2, [r5, #36]	; 0x24
    c2a4:	e1c4c5b8 	strh	ip, [r4, #88]	; 0x58
    c2a8:	e5c4005a 	strb	r0, [r4, #90]	; 0x5a
    c2ac:	e5c4105b 	strb	r1, [r4, #91]	; 0x5b
    c2b0:	e1c425fc 	strd	r2, [r4, #92]	; 0x5c
    c2b4:	1a000012 	bne	c304 <CScreenDevice::SetStatus(TScreenStatus const&)+0x110>
    c2b8:	e3a03000 	mov	r3, #0
    c2bc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c2c0:	e3a00001 	mov	r0, #1
    c2c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c2c8:	eb001896 	bl	12528 <EnterCritical>
    c2cc:	e5d43064 	ldrb	r3, [r4, #100]	; 0x64
    c2d0:	e3530000 	cmp	r3, #0
    c2d4:	1a000002 	bne	c2e4 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
    c2d8:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    c2dc:	e3530000 	cmp	r3, #0
    c2e0:	0a000005 	beq	c2fc <CScreenDevice::SetStatus(TScreenStatus const&)+0x108>
    c2e4:	e5943090 	ldr	r3, [r4, #144]	; 0x90
    c2e8:	e3530000 	cmp	r3, #0
    c2ec:	0a000000 	beq	c2f4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
    c2f0:	eb0018b6 	bl	125d0 <LeaveCritical>
    c2f4:	e3a00000 	mov	r0, #0
    c2f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c2fc:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    c300:	eaffffd1 	b	c24c <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    c304:	eb0018b1 	bl	125d0 <LeaveCritical>
    c308:	eaffffea 	b	c2b8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc4>

0000c30c <CScreenDevice::Write(void const*, unsigned int)>:
    c30c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c310:	e1a05000 	mov	r5, r0
    c314:	e5900090 	ldr	r0, [r0, #144]	; 0x90
    c318:	e1a04001 	mov	r4, r1
    c31c:	e3500000 	cmp	r0, #0
    c320:	e1a07002 	mov	r7, r2
    c324:	1a00001f 	bne	c3a8 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    c328:	e3a02001 	mov	r2, #1
    c32c:	e5d53054 	ldrb	r3, [r5, #84]	; 0x54
    c330:	e5c52064 	strb	r2, [r5, #100]	; 0x64
    c334:	e3530000 	cmp	r3, #0
    c338:	1a000015 	bne	c394 <CScreenDevice::Write(void const*, unsigned int)+0x88>
    c33c:	e3570000 	cmp	r7, #0
    c340:	0a00000a 	beq	c370 <CScreenDevice::Write(void const*, unsigned int)+0x64>
    c344:	e0846007 	add	r6, r4, r7
    c348:	e0d410d1 	ldrsb	r1, [r4], #1
    c34c:	e1a00005 	mov	r0, r5
    c350:	eb000018 	bl	c3b8 <CScreenDevice::Write(char)>
    c354:	e1540006 	cmp	r4, r6
    c358:	1afffffa 	bne	c348 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    c35c:	e5d53054 	ldrb	r3, [r5, #84]	; 0x54
    c360:	e3530000 	cmp	r3, #0
    c364:	0a000001 	beq	c370 <CScreenDevice::Write(void const*, unsigned int)+0x64>
    c368:	e1a00005 	mov	r0, r5
    c36c:	eb0003ef 	bl	d330 <CScreenDevice::InvertCursor() [clone .part.8]>
    c370:	e3a02000 	mov	r2, #0
    c374:	e5953090 	ldr	r3, [r5, #144]	; 0x90
    c378:	e5c52064 	strb	r2, [r5, #100]	; 0x64
    c37c:	e1530002 	cmp	r3, r2
    c380:	1a00000a 	bne	c3b0 <CScreenDevice::Write(void const*, unsigned int)+0xa4>
    c384:	e3a03000 	mov	r3, #0
    c388:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c38c:	e1a00007 	mov	r0, r7
    c390:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c394:	e1a00005 	mov	r0, r5
    c398:	eb0003e4 	bl	d330 <CScreenDevice::InvertCursor() [clone .part.8]>
    c39c:	e3570000 	cmp	r7, #0
    c3a0:	1affffe7 	bne	c344 <CScreenDevice::Write(void const*, unsigned int)+0x38>
    c3a4:	eaffffec 	b	c35c <CScreenDevice::Write(void const*, unsigned int)+0x50>
    c3a8:	eb00185e 	bl	12528 <EnterCritical>
    c3ac:	eaffffdd 	b	c328 <CScreenDevice::Write(void const*, unsigned int)+0x1c>
    c3b0:	eb001886 	bl	125d0 <LeaveCritical>
    c3b4:	eafffff2 	b	c384 <CScreenDevice::Write(void const*, unsigned int)+0x78>

0000c3b8 <CScreenDevice::Write(char)>:
    c3b8:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c3bc:	e92d4010 	push	{r4, lr}
    c3c0:	e1a04000 	mov	r4, r0
    c3c4:	e3530007 	cmp	r3, #7
    c3c8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c3cc:	ea000010 	b	c414 <CScreenDevice::Write(char)+0x5c>
    c3d0:	0000c45c 	.word	0x0000c45c
    c3d4:	0000c4bc 	.word	0x0000c4bc
    c3d8:	0000c4d0 	.word	0x0000c4d0
    c3dc:	0000c528 	.word	0x0000c528
    c3e0:	0000c604 	.word	0x0000c604
    c3e4:	0000c624 	.word	0x0000c624
    c3e8:	0000c644 	.word	0x0000c644
    c3ec:	0000c420 	.word	0x0000c420
    c3f0:	e5902044 	ldr	r2, [r0, #68]	; 0x44
    c3f4:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c3f8:	e1520003 	cmp	r2, r3
    c3fc:	2a000004 	bcs	c414 <CScreenDevice::Write(char)+0x5c>
    c400:	e2800020 	add	r0, r0, #32
    c404:	eb001be0 	bl	1338c <CCharGenerator::GetCharHeight() const>
    c408:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c40c:	e0433000 	sub	r3, r3, r0
    c410:	e5843050 	str	r3, [r4, #80]	; 0x50
    c414:	e3a03000 	mov	r3, #0
    c418:	e5843040 	str	r3, [r4, #64]	; 0x40
    c41c:	e8bd8010 	pop	{r4, pc}
    c420:	e3510068 	cmp	r1, #104	; 0x68
    c424:	0a000095 	beq	c680 <CScreenDevice::Write(char)+0x2c8>
    c428:	e351006c 	cmp	r1, #108	; 0x6c
    c42c:	0a000093 	beq	c680 <CScreenDevice::Write(char)+0x2c8>
    c430:	e2411030 	sub	r1, r1, #48	; 0x30
    c434:	e6ef3071 	uxtb	r3, r1
    c438:	e3530009 	cmp	r3, #9
    c43c:	8afffff4 	bhi	c414 <CScreenDevice::Write(char)+0x5c>
    c440:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c444:	e0833103 	add	r3, r3, r3, lsl #2
    c448:	e0811083 	add	r1, r1, r3, lsl #1
    c44c:	e3510063 	cmp	r1, #99	; 0x63
    c450:	e580105c 	str	r1, [r0, #92]	; 0x5c
    c454:	98bd8010 	popls	{r4, pc}
    c458:	eaffffed 	b	c414 <CScreenDevice::Write(char)+0x5c>
    c45c:	e2413008 	sub	r3, r1, #8
    c460:	e3530013 	cmp	r3, #19
    c464:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c468:	ea0000ad 	b	c724 <CScreenDevice::Write(char)+0x36c>
    c46c:	0000c6cc 	.word	0x0000c6cc
    c470:	0000c6c4 	.word	0x0000c6c4
    c474:	0000c6b4 	.word	0x0000c6b4
    c478:	0000c724 	.word	0x0000c724
    c47c:	0000c724 	.word	0x0000c724
    c480:	0000c6a8 	.word	0x0000c6a8
    c484:	0000c724 	.word	0x0000c724
    c488:	0000c724 	.word	0x0000c724
    c48c:	0000c724 	.word	0x0000c724
    c490:	0000c724 	.word	0x0000c724
    c494:	0000c724 	.word	0x0000c724
    c498:	0000c724 	.word	0x0000c724
    c49c:	0000c724 	.word	0x0000c724
    c4a0:	0000c724 	.word	0x0000c724
    c4a4:	0000c724 	.word	0x0000c724
    c4a8:	0000c724 	.word	0x0000c724
    c4ac:	0000c724 	.word	0x0000c724
    c4b0:	0000c724 	.word	0x0000c724
    c4b4:	0000c724 	.word	0x0000c724
    c4b8:	0000c69c 	.word	0x0000c69c
    c4bc:	e351005b 	cmp	r1, #91	; 0x5b
    c4c0:	1affffd3 	bne	c414 <CScreenDevice::Write(char)+0x5c>
    c4c4:	e3a03002 	mov	r3, #2
    c4c8:	e5803040 	str	r3, [r0, #64]	; 0x40
    c4cc:	e8bd8010 	pop	{r4, pc}
    c4d0:	e241303f 	sub	r3, r1, #63	; 0x3f
    c4d4:	e3530011 	cmp	r3, #17
    c4d8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c4dc:	ea0000bb 	b	c7d0 <CScreenDevice::Write(char)+0x418>
    c4e0:	0000c798 	.word	0x0000c798
    c4e4:	0000c7d0 	.word	0x0000c7d0
    c4e8:	0000c3f0 	.word	0x0000c3f0
    c4ec:	0000c790 	.word	0x0000c790
    c4f0:	0000c780 	.word	0x0000c780
    c4f4:	0000c770 	.word	0x0000c770
    c4f8:	0000c7d0 	.word	0x0000c7d0
    c4fc:	0000c7d0 	.word	0x0000c7d0
    c500:	0000c7d0 	.word	0x0000c7d0
    c504:	0000c758 	.word	0x0000c758
    c508:	0000c7d0 	.word	0x0000c7d0
    c50c:	0000c748 	.word	0x0000c748
    c510:	0000c738 	.word	0x0000c738
    c514:	0000c414 	.word	0x0000c414
    c518:	0000c414 	.word	0x0000c414
    c51c:	0000c7d0 	.word	0x0000c7d0
    c520:	0000c7d0 	.word	0x0000c7d0
    c524:	0000c414 	.word	0x0000c414
    c528:	e241303b 	sub	r3, r1, #59	; 0x3b
    c52c:	e3530032 	cmp	r3, #50	; 0x32
    c530:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c534:	ea00009a 	b	c7a4 <CScreenDevice::Write(char)+0x3ec>
    c538:	0000c718 	.word	0x0000c718
    c53c:	0000c7a4 	.word	0x0000c7a4
    c540:	0000c7a4 	.word	0x0000c7a4
    c544:	0000c7a4 	.word	0x0000c7a4
    c548:	0000c7a4 	.word	0x0000c7a4
    c54c:	0000c7a4 	.word	0x0000c7a4
    c550:	0000c7a4 	.word	0x0000c7a4
    c554:	0000c7a4 	.word	0x0000c7a4
    c558:	0000c7a4 	.word	0x0000c7a4
    c55c:	0000c7a4 	.word	0x0000c7a4
    c560:	0000c7a4 	.word	0x0000c7a4
    c564:	0000c7a4 	.word	0x0000c7a4
    c568:	0000c7a4 	.word	0x0000c7a4
    c56c:	0000c7a4 	.word	0x0000c7a4
    c570:	0000c7a4 	.word	0x0000c7a4
    c574:	0000c7a4 	.word	0x0000c7a4
    c578:	0000c7a4 	.word	0x0000c7a4
    c57c:	0000c414 	.word	0x0000c414
    c580:	0000c414 	.word	0x0000c414
    c584:	0000c7a4 	.word	0x0000c7a4
    c588:	0000c7a4 	.word	0x0000c7a4
    c58c:	0000c414 	.word	0x0000c414
    c590:	0000c7a4 	.word	0x0000c7a4
    c594:	0000c7a4 	.word	0x0000c7a4
    c598:	0000c7a4 	.word	0x0000c7a4
    c59c:	0000c7a4 	.word	0x0000c7a4
    c5a0:	0000c7a4 	.word	0x0000c7a4
    c5a4:	0000c7a4 	.word	0x0000c7a4
    c5a8:	0000c7a4 	.word	0x0000c7a4
    c5ac:	0000c6d4 	.word	0x0000c6d4
    c5b0:	0000c7a4 	.word	0x0000c7a4
    c5b4:	0000c7a4 	.word	0x0000c7a4
    c5b8:	0000c7a4 	.word	0x0000c7a4
    c5bc:	0000c7a4 	.word	0x0000c7a4
    c5c0:	0000c7a4 	.word	0x0000c7a4
    c5c4:	0000c7a4 	.word	0x0000c7a4
    c5c8:	0000c7a4 	.word	0x0000c7a4
    c5cc:	0000c7a4 	.word	0x0000c7a4
    c5d0:	0000c7a4 	.word	0x0000c7a4
    c5d4:	0000c7a4 	.word	0x0000c7a4
    c5d8:	0000c7a4 	.word	0x0000c7a4
    c5dc:	0000c7a4 	.word	0x0000c7a4
    c5e0:	0000c7a4 	.word	0x0000c7a4
    c5e4:	0000c7a4 	.word	0x0000c7a4
    c5e8:	0000c7a4 	.word	0x0000c7a4
    c5ec:	0000c6e8 	.word	0x0000c6e8
    c5f0:	0000c7a4 	.word	0x0000c7a4
    c5f4:	0000c7a4 	.word	0x0000c7a4
    c5f8:	0000c7a4 	.word	0x0000c7a4
    c5fc:	0000c6e8 	.word	0x0000c6e8
    c600:	0000c704 	.word	0x0000c704
    c604:	e2411030 	sub	r1, r1, #48	; 0x30
    c608:	e6ef3071 	uxtb	r3, r1
    c60c:	e3530009 	cmp	r3, #9
    c610:	8affff7f 	bhi	c414 <CScreenDevice::Write(char)+0x5c>
    c614:	e3a03007 	mov	r3, #7
    c618:	e580105c 	str	r1, [r0, #92]	; 0x5c
    c61c:	e5803040 	str	r3, [r0, #64]	; 0x40
    c620:	e8bd8010 	pop	{r4, pc}
    c624:	e2411030 	sub	r1, r1, #48	; 0x30
    c628:	e6ef3071 	uxtb	r3, r1
    c62c:	e3530009 	cmp	r3, #9
    c630:	8affff77 	bhi	c414 <CScreenDevice::Write(char)+0x5c>
    c634:	e3a03006 	mov	r3, #6
    c638:	e5801060 	str	r1, [r0, #96]	; 0x60
    c63c:	e5803040 	str	r3, [r0, #64]	; 0x40
    c640:	e8bd8010 	pop	{r4, pc}
    c644:	e3510048 	cmp	r1, #72	; 0x48
    c648:	0a000068 	beq	c7f0 <CScreenDevice::Write(char)+0x438>
    c64c:	e3510072 	cmp	r1, #114	; 0x72
    c650:	0a00006c 	beq	c808 <CScreenDevice::Write(char)+0x450>
    c654:	e2411030 	sub	r1, r1, #48	; 0x30
    c658:	e6ef3071 	uxtb	r3, r1
    c65c:	e3530009 	cmp	r3, #9
    c660:	8affff6b 	bhi	c414 <CScreenDevice::Write(char)+0x5c>
    c664:	e5903060 	ldr	r3, [r0, #96]	; 0x60
    c668:	e0833103 	add	r3, r3, r3, lsl #2
    c66c:	e0811083 	add	r1, r1, r3, lsl #1
    c670:	e35100c7 	cmp	r1, #199	; 0xc7
    c674:	e5801060 	str	r1, [r0, #96]	; 0x60
    c678:	98bd8010 	popls	{r4, pc}
    c67c:	eaffff64 	b	c414 <CScreenDevice::Write(char)+0x5c>
    c680:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    c684:	e3530019 	cmp	r3, #25
    c688:	02411068 	subeq	r1, r1, #104	; 0x68
    c68c:	016f1f11 	clzeq	r1, r1
    c690:	01a012a1 	lsreq	r1, r1, #5
    c694:	05c41054 	strbeq	r1, [r4, #84]	; 0x54
    c698:	eaffff5d 	b	c414 <CScreenDevice::Write(char)+0x5c>
    c69c:	e3a03001 	mov	r3, #1
    c6a0:	e5803040 	str	r3, [r0, #64]	; 0x40
    c6a4:	e8bd8010 	pop	{r4, pc}
    c6a8:	e3a03000 	mov	r3, #0
    c6ac:	e580304c 	str	r3, [r0, #76]	; 0x4c
    c6b0:	e8bd8010 	pop	{r4, pc}
    c6b4:	e3a03000 	mov	r3, #0
    c6b8:	e8bd4010 	pop	{r4, lr}
    c6bc:	e580304c 	str	r3, [r0, #76]	; 0x4c
    c6c0:	ea0000ab 	b	c974 <CScreenDevice::CursorDown()>
    c6c4:	e8bd4010 	pop	{r4, lr}
    c6c8:	ea00022a 	b	cf78 <CScreenDevice::Tabulator()>
    c6cc:	e8bd4010 	pop	{r4, lr}
    c6d0:	ea0000be 	b	c9d0 <CScreenDevice::CursorLeft()>
    c6d4:	e590105c 	ldr	r1, [r0, #92]	; 0x5c
    c6d8:	e3510000 	cmp	r1, #0
    c6dc:	0affff4c 	beq	c414 <CScreenDevice::Write(char)+0x5c>
    c6e0:	eb0002fa 	bl	d2d0 <CScreenDevice::EraseChars(unsigned int) [clone .part.6]>
    c6e4:	eaffff4a 	b	c414 <CScreenDevice::Write(char)+0x5c>
    c6e8:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c6ec:	e3530004 	cmp	r3, #4
    c6f0:	02411068 	subeq	r1, r1, #104	; 0x68
    c6f4:	016f1f11 	clzeq	r1, r1
    c6f8:	01a012a1 	lsreq	r1, r1, #5
    c6fc:	05c0105b 	strbeq	r1, [r0, #91]	; 0x5b
    c700:	eaffff43 	b	c414 <CScreenDevice::Write(char)+0x5c>
    c704:	e590105c 	ldr	r1, [r0, #92]	; 0x5c
    c708:	eb00013a 	bl	cbf8 <CScreenDevice::SetStandoutMode(unsigned int)>
    c70c:	e3a03000 	mov	r3, #0
    c710:	e5843040 	str	r3, [r4, #64]	; 0x40
    c714:	e8bd8010 	pop	{r4, pc}
    c718:	e3a03005 	mov	r3, #5
    c71c:	e5803040 	str	r3, [r0, #64]	; 0x40
    c720:	e8bd8010 	pop	{r4, pc}
    c724:	e6ef3071 	uxtb	r3, r1
    c728:	e353001f 	cmp	r3, #31
    c72c:	98bd8010 	popls	{r4, pc}
    c730:	e8bd4010 	pop	{r4, lr}
    c734:	ea0002d6 	b	d294 <CScreenDevice::DisplayChar(char) [clone .part.5]>
    c738:	eb00007b 	bl	c92c <CScreenDevice::ClearLineEnd()>
    c73c:	e3a03000 	mov	r3, #0
    c740:	e5843040 	str	r3, [r4, #64]	; 0x40
    c744:	e8bd8010 	pop	{r4, pc}
    c748:	eb000037 	bl	c82c <CScreenDevice::ClearDisplayEnd()>
    c74c:	e3a03000 	mov	r3, #0
    c750:	e5843040 	str	r3, [r4, #64]	; 0x40
    c754:	e8bd8010 	pop	{r4, pc}
    c758:	e3a03000 	mov	r3, #0
    c75c:	e5902044 	ldr	r2, [r0, #68]	; 0x44
    c760:	e580304c 	str	r3, [r0, #76]	; 0x4c
    c764:	e5803040 	str	r3, [r0, #64]	; 0x40
    c768:	e5802050 	str	r2, [r0, #80]	; 0x50
    c76c:	e8bd8010 	pop	{r4, pc}
    c770:	eb000096 	bl	c9d0 <CScreenDevice::CursorLeft()>
    c774:	e3a03000 	mov	r3, #0
    c778:	e5843040 	str	r3, [r4, #64]	; 0x40
    c77c:	e8bd8010 	pop	{r4, pc}
    c780:	eb0000c5 	bl	ca9c <CScreenDevice::CursorRight()>
    c784:	e3a03000 	mov	r3, #0
    c788:	e5843040 	str	r3, [r4, #64]	; 0x40
    c78c:	e8bd8010 	pop	{r4, pc}
    c790:	eb000077 	bl	c974 <CScreenDevice::CursorDown()>
    c794:	eaffff1e 	b	c414 <CScreenDevice::Write(char)+0x5c>
    c798:	e3a03004 	mov	r3, #4
    c79c:	e5803040 	str	r3, [r0, #64]	; 0x40
    c7a0:	e8bd8010 	pop	{r4, pc}
    c7a4:	e2411030 	sub	r1, r1, #48	; 0x30
    c7a8:	e6ef3071 	uxtb	r3, r1
    c7ac:	e3530009 	cmp	r3, #9
    c7b0:	8affff17 	bhi	c414 <CScreenDevice::Write(char)+0x5c>
    c7b4:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c7b8:	e0833103 	add	r3, r3, r3, lsl #2
    c7bc:	e0811083 	add	r1, r1, r3, lsl #1
    c7c0:	e35100c7 	cmp	r1, #199	; 0xc7
    c7c4:	e580105c 	str	r1, [r0, #92]	; 0x5c
    c7c8:	98bd8010 	popls	{r4, pc}
    c7cc:	eaffff10 	b	c414 <CScreenDevice::Write(char)+0x5c>
    c7d0:	e2411030 	sub	r1, r1, #48	; 0x30
    c7d4:	e6ef3071 	uxtb	r3, r1
    c7d8:	e3530009 	cmp	r3, #9
    c7dc:	8affff0c 	bhi	c414 <CScreenDevice::Write(char)+0x5c>
    c7e0:	e3a03003 	mov	r3, #3
    c7e4:	e580105c 	str	r1, [r0, #92]	; 0x5c
    c7e8:	e5803040 	str	r3, [r0, #64]	; 0x40
    c7ec:	e8bd8010 	pop	{r4, pc}
    c7f0:	e5902060 	ldr	r2, [r0, #96]	; 0x60
    c7f4:	e590105c 	ldr	r1, [r0, #92]	; 0x5c
    c7f8:	eb00008f 	bl	ca3c <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    c7fc:	e3a03000 	mov	r3, #0
    c800:	e5843040 	str	r3, [r4, #64]	; 0x40
    c804:	e8bd8010 	pop	{r4, pc}
    c808:	e5902060 	ldr	r2, [r0, #96]	; 0x60
    c80c:	e590105c 	ldr	r1, [r0, #92]	; 0x5c
    c810:	eb0000d8 	bl	cb78 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    c814:	e3a03000 	mov	r3, #0
    c818:	e5843040 	str	r3, [r4, #64]	; 0x40
    c81c:	e8bd8010 	pop	{r4, pc}

0000c820 <CScreenDevice::CarriageReturn()>:
    c820:	e3a03000 	mov	r3, #0
    c824:	e580304c 	str	r3, [r0, #76]	; 0x4c
    c828:	e12fff1e 	bx	lr

0000c82c <CScreenDevice::ClearDisplayEnd()>:
    c82c:	e92d4070 	push	{r4, r5, r6, lr}
    c830:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c834:	e590504c 	ldr	r5, [r0, #76]	; 0x4c
    c838:	e1a04000 	mov	r4, r0
    c83c:	e1550003 	cmp	r5, r3
    c840:	e2806020 	add	r6, r0, #32
    c844:	2a000009 	bcs	c870 <CScreenDevice::ClearDisplayEnd()+0x44>
    c848:	e1a01005 	mov	r1, r5
    c84c:	e5942050 	ldr	r2, [r4, #80]	; 0x50
    c850:	e1a00004 	mov	r0, r4
    c854:	eb000237 	bl	d138 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c858:	e1a00006 	mov	r0, r6
    c85c:	eb001ac8 	bl	13384 <CCharGenerator::GetCharWidth() const>
    c860:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    c864:	e0855000 	add	r5, r5, r0
    c868:	e1530005 	cmp	r3, r5
    c86c:	8afffff5 	bhi	c848 <CScreenDevice::ClearDisplayEnd()+0x1c>
    c870:	e1a00006 	mov	r0, r6
    c874:	e5945050 	ldr	r5, [r4, #80]	; 0x50
    c878:	eb001ac3 	bl	1338c <CCharGenerator::GetCharHeight() const>
    c87c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    c880:	e0850000 	add	r0, r5, r0
    c884:	e0000093 	mul	r0, r3, r0
    c888:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    c88c:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    c890:	e1a030a3 	lsr	r3, r3, #1
    c894:	e043c000 	sub	ip, r3, r0
    c898:	e35c0000 	cmp	ip, #0
    c89c:	e24c2001 	sub	r2, ip, #1
    c8a0:	e0810080 	add	r0, r1, r0, lsl #1
    c8a4:	08bd8070 	popeq	{r4, r5, r6, pc}
    c8a8:	e0811083 	add	r1, r1, r3, lsl #1
    c8ac:	e284e05a 	add	lr, r4, #90	; 0x5a
    c8b0:	e2843058 	add	r3, r4, #88	; 0x58
    c8b4:	e150000e 	cmp	r0, lr
    c8b8:	31530001 	cmpcc	r3, r1
    c8bc:	23a03001 	movcs	r3, #1
    c8c0:	33a03000 	movcc	r3, #0
    c8c4:	e3520009 	cmp	r2, #9
    c8c8:	93a03000 	movls	r3, #0
    c8cc:	82033001 	andhi	r3, r3, #1
    c8d0:	e3530000 	cmp	r3, #0
    c8d4:	0a00000e 	beq	c914 <CScreenDevice::ClearDisplayEnd()+0xe8>
    c8d8:	e1a02000 	mov	r2, r0
    c8dc:	e3a03000 	mov	r3, #0
    c8e0:	e1d415b8 	ldrh	r1, [r4, #88]	; 0x58
    c8e4:	e1a0e0ac 	lsr	lr, ip, #1
    c8e8:	e1811801 	orr	r1, r1, r1, lsl #16
    c8ec:	e2833001 	add	r3, r3, #1
    c8f0:	e15e0003 	cmp	lr, r3
    c8f4:	e4821004 	str	r1, [r2], #4
    c8f8:	1afffffb 	bne	c8ec <CScreenDevice::ClearDisplayEnd()+0xc0>
    c8fc:	e3cc2001 	bic	r2, ip, #1
    c900:	e15c0002 	cmp	ip, r2
    c904:	11d435b8 	ldrhne	r3, [r4, #88]	; 0x58
    c908:	e1a02082 	lsl	r2, r2, #1
    c90c:	118030b2 	strhne	r3, [r0, r2]
    c910:	e8bd8070 	pop	{r4, r5, r6, pc}
    c914:	e2422001 	sub	r2, r2, #1
    c918:	e1d435b8 	ldrh	r3, [r4, #88]	; 0x58
    c91c:	e3720001 	cmn	r2, #1
    c920:	e0c030b2 	strh	r3, [r0], #2
    c924:	1afffffa 	bne	c914 <CScreenDevice::ClearDisplayEnd()+0xe8>
    c928:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c92c <CScreenDevice::ClearLineEnd()>:
    c92c:	e92d4070 	push	{r4, r5, r6, lr}
    c930:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c934:	e590404c 	ldr	r4, [r0, #76]	; 0x4c
    c938:	e1540003 	cmp	r4, r3
    c93c:	28bd8070 	popcs	{r4, r5, r6, pc}
    c940:	e1a05000 	mov	r5, r0
    c944:	e2806020 	add	r6, r0, #32
    c948:	e1a01004 	mov	r1, r4
    c94c:	e5952050 	ldr	r2, [r5, #80]	; 0x50
    c950:	e1a00005 	mov	r0, r5
    c954:	eb0001f7 	bl	d138 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c958:	e1a00006 	mov	r0, r6
    c95c:	eb001a88 	bl	13384 <CCharGenerator::GetCharWidth() const>
    c960:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    c964:	e0844000 	add	r4, r4, r0
    c968:	e1530004 	cmp	r3, r4
    c96c:	8afffff5 	bhi	c948 <CScreenDevice::ClearLineEnd()+0x1c>
    c970:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c974 <CScreenDevice::CursorDown()>:
    c974:	e92d4070 	push	{r4, r5, r6, lr}
    c978:	e1a04000 	mov	r4, r0
    c97c:	e2805020 	add	r5, r0, #32
    c980:	e1a00005 	mov	r0, r5
    c984:	eb001a80 	bl	1338c <CCharGenerator::GetCharHeight() const>
    c988:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c98c:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    c990:	e0800003 	add	r0, r0, r3
    c994:	e1500002 	cmp	r0, r2
    c998:	e5840050 	str	r0, [r4, #80]	; 0x50
    c99c:	38bd8070 	popcc	{r4, r5, r6, pc}
    c9a0:	e1a00004 	mov	r0, r4
    c9a4:	eb000186 	bl	cfc4 <CScreenDevice::Scroll()>
    c9a8:	e1a00005 	mov	r0, r5
    c9ac:	eb001a76 	bl	1338c <CCharGenerator::GetCharHeight() const>
    c9b0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c9b4:	e0430000 	sub	r0, r3, r0
    c9b8:	e5840050 	str	r0, [r4, #80]	; 0x50
    c9bc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c9c0 <CScreenDevice::CursorHome()>:
    c9c0:	e3a02000 	mov	r2, #0
    c9c4:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    c9c8:	e1c024fc 	strd	r2, [r0, #76]	; 0x4c
    c9cc:	e12fff1e 	bx	lr

0000c9d0 <CScreenDevice::CursorLeft()>:
    c9d0:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    c9d4:	e92d4070 	push	{r4, r5, r6, lr}
    c9d8:	e3530000 	cmp	r3, #0
    c9dc:	e1a04000 	mov	r4, r0
    c9e0:	1a00000f 	bne	ca24 <CScreenDevice::CursorLeft()+0x54>
    c9e4:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    c9e8:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    c9ec:	e1520003 	cmp	r2, r3
    c9f0:	98bd8070 	popls	{r4, r5, r6, pc}
    c9f4:	e2806020 	add	r6, r0, #32
    c9f8:	e1a00006 	mov	r0, r6
    c9fc:	e5945034 	ldr	r5, [r4, #52]	; 0x34
    ca00:	eb001a5f 	bl	13384 <CCharGenerator::GetCharWidth() const>
    ca04:	e0450000 	sub	r0, r5, r0
    ca08:	e584004c 	str	r0, [r4, #76]	; 0x4c
    ca0c:	e1a00006 	mov	r0, r6
    ca10:	eb001a5d 	bl	1338c <CCharGenerator::GetCharHeight() const>
    ca14:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    ca18:	e0430000 	sub	r0, r3, r0
    ca1c:	e5840050 	str	r0, [r4, #80]	; 0x50
    ca20:	e8bd8070 	pop	{r4, r5, r6, pc}
    ca24:	e2800020 	add	r0, r0, #32
    ca28:	eb001a55 	bl	13384 <CCharGenerator::GetCharWidth() const>
    ca2c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    ca30:	e0430000 	sub	r0, r3, r0
    ca34:	e584004c 	str	r0, [r4, #76]	; 0x4c
    ca38:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ca3c <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    ca3c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ca40:	e2806020 	add	r6, r0, #32
    ca44:	e1a04002 	mov	r4, r2
    ca48:	e1a05000 	mov	r5, r0
    ca4c:	e1a00006 	mov	r0, r6
    ca50:	e1a07001 	mov	r7, r1
    ca54:	eb001a4a 	bl	13384 <CCharGenerator::GetCharWidth() const>
    ca58:	e2444001 	sub	r4, r4, #1
    ca5c:	e0040490 	mul	r4, r0, r4
    ca60:	e1a00006 	mov	r0, r6
    ca64:	eb001a48 	bl	1338c <CCharGenerator::GetCharHeight() const>
    ca68:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    ca6c:	e1530004 	cmp	r3, r4
    ca70:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    ca74:	e2477001 	sub	r7, r7, #1
    ca78:	e0000790 	mul	r0, r0, r7
    ca7c:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    ca80:	e1530000 	cmp	r3, r0
    ca84:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
    ca88:	e5953048 	ldr	r3, [r5, #72]	; 0x48
    ca8c:	e1530000 	cmp	r3, r0
    ca90:	8585404c 	strhi	r4, [r5, #76]	; 0x4c
    ca94:	85850050 	strhi	r0, [r5, #80]	; 0x50
    ca98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ca9c <CScreenDevice::CursorRight()>:
    ca9c:	e92d4010 	push	{r4, lr}
    caa0:	e1a04000 	mov	r4, r0
    caa4:	e2800020 	add	r0, r0, #32
    caa8:	eb001a35 	bl	13384 <CCharGenerator::GetCharWidth() const>
    caac:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    cab0:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    cab4:	e0800003 	add	r0, r0, r3
    cab8:	e1500002 	cmp	r0, r2
    cabc:	e584004c 	str	r0, [r4, #76]	; 0x4c
    cac0:	38bd8010 	popcc	{r4, pc}
    cac4:	e3a03000 	mov	r3, #0
    cac8:	e1a00004 	mov	r0, r4
    cacc:	e584304c 	str	r3, [r4, #76]	; 0x4c
    cad0:	e8bd4010 	pop	{r4, lr}
    cad4:	eaffffa6 	b	c974 <CScreenDevice::CursorDown()>

0000cad8 <CScreenDevice::CursorUp()>:
    cad8:	e5902050 	ldr	r2, [r0, #80]	; 0x50
    cadc:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    cae0:	e1520003 	cmp	r2, r3
    cae4:	912fff1e 	bxls	lr
    cae8:	e92d4010 	push	{r4, lr}
    caec:	e1a04000 	mov	r4, r0
    caf0:	e2800020 	add	r0, r0, #32
    caf4:	eb001a24 	bl	1338c <CCharGenerator::GetCharHeight() const>
    caf8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    cafc:	e0430000 	sub	r0, r3, r0
    cb00:	e5840050 	str	r0, [r4, #80]	; 0x50
    cb04:	e8bd8010 	pop	{r4, pc}

0000cb08 <CScreenDevice::DeleteChars(unsigned int)>:
    cb08:	e12fff1e 	bx	lr

0000cb0c <CScreenDevice::DeleteLines(unsigned int)>:
    cb0c:	e12fff1e 	bx	lr

0000cb10 <CScreenDevice::DisplayChar(char)>:
    cb10:	e6ef3071 	uxtb	r3, r1
    cb14:	e353001f 	cmp	r3, #31
    cb18:	912fff1e 	bxls	lr
    cb1c:	ea0001dc 	b	d294 <CScreenDevice::DisplayChar(char) [clone .part.5]>

0000cb20 <CScreenDevice::EraseChars(unsigned int)>:
    cb20:	e3510000 	cmp	r1, #0
    cb24:	012fff1e 	bxeq	lr
    cb28:	ea0001e8 	b	d2d0 <CScreenDevice::EraseChars(unsigned int) [clone .part.6]>

0000cb2c <CScreenDevice::GetTextBackgroundColor()>:
    cb2c:	e5d0305a 	ldrb	r3, [r0, #90]	; 0x5a
    cb30:	e3530000 	cmp	r3, #0
    cb34:	11d005b6 	ldrhne	r0, [r0, #86]	; 0x56
    cb38:	01d005b8 	ldrheq	r0, [r0, #88]	; 0x58
    cb3c:	e12fff1e 	bx	lr

0000cb40 <CScreenDevice::GetTextColor()>:
    cb40:	e5d0305a 	ldrb	r3, [r0, #90]	; 0x5a
    cb44:	e3530000 	cmp	r3, #0
    cb48:	11d005b8 	ldrhne	r0, [r0, #88]	; 0x58
    cb4c:	01d005b6 	ldrheq	r0, [r0, #86]	; 0x56
    cb50:	e12fff1e 	bx	lr

0000cb54 <CScreenDevice::InsertLines(unsigned int)>:
    cb54:	e12fff1e 	bx	lr

0000cb58 <CScreenDevice::InsertMode(bool)>:
    cb58:	e5c0105b 	strb	r1, [r0, #91]	; 0x5b
    cb5c:	e12fff1e 	bx	lr

0000cb60 <CScreenDevice::NewLine()>:
    cb60:	e3a02000 	mov	r2, #0
    cb64:	e580204c 	str	r2, [r0, #76]	; 0x4c
    cb68:	eaffff81 	b	c974 <CScreenDevice::CursorDown()>

0000cb6c <CScreenDevice::ReverseScroll()>:
    cb6c:	e12fff1e 	bx	lr

0000cb70 <CScreenDevice::SetCursorMode(bool)>:
    cb70:	e5c01054 	strb	r1, [r0, #84]	; 0x54
    cb74:	e12fff1e 	bx	lr

0000cb78 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    cb78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cb7c:	e2807020 	add	r7, r0, #32
    cb80:	e1a05000 	mov	r5, r0
    cb84:	e1a04001 	mov	r4, r1
    cb88:	e1a00007 	mov	r0, r7
    cb8c:	e1a06002 	mov	r6, r2
    cb90:	eb0019fd 	bl	1338c <CCharGenerator::GetCharHeight() const>
    cb94:	e2444001 	sub	r4, r4, #1
    cb98:	e0040490 	mul	r4, r0, r4
    cb9c:	e1a00007 	mov	r0, r7
    cba0:	eb0019f9 	bl	1338c <CCharGenerator::GetCharHeight() const>
    cba4:	e0000096 	mul	r0, r6, r0
    cba8:	e595203c 	ldr	r2, [r5, #60]	; 0x3c
    cbac:	e1520004 	cmp	r2, r4
    cbb0:	93a03000 	movls	r3, #0
    cbb4:	83a03001 	movhi	r3, #1
    cbb8:	e3500000 	cmp	r0, #0
    cbbc:	03a03000 	moveq	r3, #0
    cbc0:	e1520000 	cmp	r2, r0
    cbc4:	33a03000 	movcc	r3, #0
    cbc8:	22033001 	andcs	r3, r3, #1
    cbcc:	e1540000 	cmp	r4, r0
    cbd0:	23a03000 	movcs	r3, #0
    cbd4:	32033001 	andcc	r3, r3, #1
    cbd8:	e3530000 	cmp	r3, #0
    cbdc:	e3a03000 	mov	r3, #0
    cbe0:	05954044 	ldreq	r4, [r5, #68]	; 0x44
    cbe4:	15854044 	strne	r4, [r5, #68]	; 0x44
    cbe8:	15850048 	strne	r0, [r5, #72]	; 0x48
    cbec:	e5854050 	str	r4, [r5, #80]	; 0x50
    cbf0:	e585304c 	str	r3, [r5, #76]	; 0x4c
    cbf4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000cbf8 <CScreenDevice::SetStandoutMode(unsigned int)>:
    cbf8:	e351006b 	cmp	r1, #107	; 0x6b
    cbfc:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    cc00:	ea00006d 	b	cdbc <CScreenDevice::SetStandoutMode(unsigned int)+0x1c4>
    cc04:	0000cef8 	.word	0x0000cef8
    cc08:	0000cdc0 	.word	0x0000cdc0
    cc0c:	0000cdcc 	.word	0x0000cdcc
    cc10:	0000cdbc 	.word	0x0000cdbc
    cc14:	0000cdbc 	.word	0x0000cdbc
    cc18:	0000cdbc 	.word	0x0000cdbc
    cc1c:	0000cdbc 	.word	0x0000cdbc
    cc20:	0000cf30 	.word	0x0000cf30
    cc24:	0000cdbc 	.word	0x0000cdbc
    cc28:	0000cdbc 	.word	0x0000cdbc
    cc2c:	0000cdbc 	.word	0x0000cdbc
    cc30:	0000cdbc 	.word	0x0000cdbc
    cc34:	0000cdbc 	.word	0x0000cdbc
    cc38:	0000cdbc 	.word	0x0000cdbc
    cc3c:	0000cdbc 	.word	0x0000cdbc
    cc40:	0000cdbc 	.word	0x0000cdbc
    cc44:	0000cdbc 	.word	0x0000cdbc
    cc48:	0000cdbc 	.word	0x0000cdbc
    cc4c:	0000cdbc 	.word	0x0000cdbc
    cc50:	0000cdbc 	.word	0x0000cdbc
    cc54:	0000cdbc 	.word	0x0000cdbc
    cc58:	0000cdbc 	.word	0x0000cdbc
    cc5c:	0000cdbc 	.word	0x0000cdbc
    cc60:	0000cdbc 	.word	0x0000cdbc
    cc64:	0000cdbc 	.word	0x0000cdbc
    cc68:	0000cdbc 	.word	0x0000cdbc
    cc6c:	0000cdbc 	.word	0x0000cdbc
    cc70:	0000cef8 	.word	0x0000cef8
    cc74:	0000cdbc 	.word	0x0000cdbc
    cc78:	0000cdbc 	.word	0x0000cdbc
    cc7c:	0000cdd8 	.word	0x0000cdd8
    cc80:	0000ce8c 	.word	0x0000ce8c
    cc84:	0000ce80 	.word	0x0000ce80
    cc88:	0000ce74 	.word	0x0000ce74
    cc8c:	0000cdcc 	.word	0x0000cdcc
    cc90:	0000ce68 	.word	0x0000ce68
    cc94:	0000ce5c 	.word	0x0000ce5c
    cc98:	0000ce50 	.word	0x0000ce50
    cc9c:	0000cdbc 	.word	0x0000cdbc
    cca0:	0000cdbc 	.word	0x0000cdbc
    cca4:	0000ce44 	.word	0x0000ce44
    cca8:	0000ce38 	.word	0x0000ce38
    ccac:	0000ce2c 	.word	0x0000ce2c
    ccb0:	0000ce20 	.word	0x0000ce20
    ccb4:	0000ce14 	.word	0x0000ce14
    ccb8:	0000ce08 	.word	0x0000ce08
    ccbc:	0000cdfc 	.word	0x0000cdfc
    ccc0:	0000cdf0 	.word	0x0000cdf0
    ccc4:	0000cdbc 	.word	0x0000cdbc
    ccc8:	0000cdbc 	.word	0x0000cdbc
    cccc:	0000cdbc 	.word	0x0000cdbc
    ccd0:	0000cdbc 	.word	0x0000cdbc
    ccd4:	0000cdbc 	.word	0x0000cdbc
    ccd8:	0000cdbc 	.word	0x0000cdbc
    ccdc:	0000cdbc 	.word	0x0000cdbc
    cce0:	0000cdbc 	.word	0x0000cdbc
    cce4:	0000cdbc 	.word	0x0000cdbc
    cce8:	0000cdbc 	.word	0x0000cdbc
    ccec:	0000cdbc 	.word	0x0000cdbc
    ccf0:	0000cdbc 	.word	0x0000cdbc
    ccf4:	0000cdbc 	.word	0x0000cdbc
    ccf8:	0000cdbc 	.word	0x0000cdbc
    ccfc:	0000cdbc 	.word	0x0000cdbc
    cd00:	0000cdbc 	.word	0x0000cdbc
    cd04:	0000cdbc 	.word	0x0000cdbc
    cd08:	0000cdbc 	.word	0x0000cdbc
    cd0c:	0000cdbc 	.word	0x0000cdbc
    cd10:	0000cdbc 	.word	0x0000cdbc
    cd14:	0000cdbc 	.word	0x0000cdbc
    cd18:	0000cdbc 	.word	0x0000cdbc
    cd1c:	0000cdbc 	.word	0x0000cdbc
    cd20:	0000cdbc 	.word	0x0000cdbc
    cd24:	0000cdbc 	.word	0x0000cdbc
    cd28:	0000cdbc 	.word	0x0000cdbc
    cd2c:	0000cdbc 	.word	0x0000cdbc
    cd30:	0000cdbc 	.word	0x0000cdbc
    cd34:	0000cdbc 	.word	0x0000cdbc
    cd38:	0000cdbc 	.word	0x0000cdbc
    cd3c:	0000cdbc 	.word	0x0000cdbc
    cd40:	0000cdbc 	.word	0x0000cdbc
    cd44:	0000cdbc 	.word	0x0000cdbc
    cd48:	0000cdbc 	.word	0x0000cdbc
    cd4c:	0000cdbc 	.word	0x0000cdbc
    cd50:	0000cdbc 	.word	0x0000cdbc
    cd54:	0000cdbc 	.word	0x0000cdbc
    cd58:	0000cdbc 	.word	0x0000cdbc
    cd5c:	0000cdbc 	.word	0x0000cdbc
    cd60:	0000cdbc 	.word	0x0000cdbc
    cd64:	0000cdbc 	.word	0x0000cdbc
    cd68:	0000cdbc 	.word	0x0000cdbc
    cd6c:	0000cf48 	.word	0x0000cf48
    cd70:	0000cdc0 	.word	0x0000cdc0
    cd74:	0000cde4 	.word	0x0000cde4
    cd78:	0000ceec 	.word	0x0000ceec
    cd7c:	0000cee0 	.word	0x0000cee0
    cd80:	0000ced4 	.word	0x0000ced4
    cd84:	0000cec8 	.word	0x0000cec8
    cd88:	0000cebc 	.word	0x0000cebc
    cd8c:	0000cdbc 	.word	0x0000cdbc
    cd90:	0000cdbc 	.word	0x0000cdbc
    cd94:	0000ceb0 	.word	0x0000ceb0
    cd98:	0000cea4 	.word	0x0000cea4
    cd9c:	0000ce98 	.word	0x0000ce98
    cda0:	0000cf24 	.word	0x0000cf24
    cda4:	0000cf18 	.word	0x0000cf18
    cda8:	0000cf0c 	.word	0x0000cf0c
    cdac:	0000cf3c 	.word	0x0000cf3c
    cdb0:	0000cdb4 	.word	0x0000cdb4
    cdb4:	e3e03020 	mvn	r3, #32
    cdb8:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    cdbc:	e12fff1e 	bx	lr
    cdc0:	e59f318c 	ldr	r3, [pc, #396]	; cf54 <CScreenDevice::SetStandoutMode(unsigned int)+0x35c>
    cdc4:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    cdc8:	e12fff1e 	bx	lr
    cdcc:	e3a03015 	mov	r3, #21
    cdd0:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    cdd4:	e12fff1e 	bx	lr
    cdd8:	e3a03000 	mov	r3, #0
    cddc:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    cde0:	e12fff1e 	bx	lr
    cde4:	e59f316c 	ldr	r3, [pc, #364]	; cf58 <CScreenDevice::SetStandoutMode(unsigned int)+0x360>
    cde8:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    cdec:	e12fff1e 	bx	lr
    cdf0:	e59f3164 	ldr	r3, [pc, #356]	; cf5c <CScreenDevice::SetStandoutMode(unsigned int)+0x364>
    cdf4:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    cdf8:	e12fff1e 	bx	lr
    cdfc:	e59f315c 	ldr	r3, [pc, #348]	; cf60 <CScreenDevice::SetStandoutMode(unsigned int)+0x368>
    ce00:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    ce04:	e12fff1e 	bx	lr
    ce08:	e59f3154 	ldr	r3, [pc, #340]	; cf64 <CScreenDevice::SetStandoutMode(unsigned int)+0x36c>
    ce0c:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    ce10:	e12fff1e 	bx	lr
    ce14:	e3a03015 	mov	r3, #21
    ce18:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    ce1c:	e12fff1e 	bx	lr
    ce20:	e59f3140 	ldr	r3, [pc, #320]	; cf68 <CScreenDevice::SetStandoutMode(unsigned int)+0x370>
    ce24:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    ce28:	e12fff1e 	bx	lr
    ce2c:	e3a03d15 	mov	r3, #1344	; 0x540
    ce30:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    ce34:	e12fff1e 	bx	lr
    ce38:	e3a03b2a 	mov	r3, #43008	; 0xa800
    ce3c:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    ce40:	e12fff1e 	bx	lr
    ce44:	e3a03000 	mov	r3, #0
    ce48:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    ce4c:	e12fff1e 	bx	lr
    ce50:	e59f3104 	ldr	r3, [pc, #260]	; cf5c <CScreenDevice::SetStandoutMode(unsigned int)+0x364>
    ce54:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    ce58:	e12fff1e 	bx	lr
    ce5c:	e59f30fc 	ldr	r3, [pc, #252]	; cf60 <CScreenDevice::SetStandoutMode(unsigned int)+0x368>
    ce60:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    ce64:	e12fff1e 	bx	lr
    ce68:	e59f30f4 	ldr	r3, [pc, #244]	; cf64 <CScreenDevice::SetStandoutMode(unsigned int)+0x36c>
    ce6c:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    ce70:	e12fff1e 	bx	lr
    ce74:	e59f30ec 	ldr	r3, [pc, #236]	; cf68 <CScreenDevice::SetStandoutMode(unsigned int)+0x370>
    ce78:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    ce7c:	e12fff1e 	bx	lr
    ce80:	e3a03d15 	mov	r3, #1344	; 0x540
    ce84:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    ce88:	e12fff1e 	bx	lr
    ce8c:	e3a03b2a 	mov	r3, #43008	; 0xa800
    ce90:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    ce94:	e12fff1e 	bx	lr
    ce98:	e59f30b8 	ldr	r3, [pc, #184]	; cf58 <CScreenDevice::SetStandoutMode(unsigned int)+0x360>
    ce9c:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    cea0:	e12fff1e 	bx	lr
    cea4:	e59f30a8 	ldr	r3, [pc, #168]	; cf54 <CScreenDevice::SetStandoutMode(unsigned int)+0x35c>
    cea8:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    ceac:	e12fff1e 	bx	lr
    ceb0:	e59f30b4 	ldr	r3, [pc, #180]	; cf6c <CScreenDevice::SetStandoutMode(unsigned int)+0x374>
    ceb4:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    ceb8:	e12fff1e 	bx	lr
    cebc:	e3e03020 	mvn	r3, #32
    cec0:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    cec4:	e12fff1e 	bx	lr
    cec8:	e59f30a0 	ldr	r3, [pc, #160]	; cf70 <CScreenDevice::SetStandoutMode(unsigned int)+0x378>
    cecc:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    ced0:	e12fff1e 	bx	lr
    ced4:	e3e03e56 	mvn	r3, #1376	; 0x560
    ced8:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    cedc:	e12fff1e 	bx	lr
    cee0:	e59f308c 	ldr	r3, [pc, #140]	; cf74 <CScreenDevice::SetStandoutMode(unsigned int)+0x37c>
    cee4:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    cee8:	e12fff1e 	bx	lr
    ceec:	e3e03035 	mvn	r3, #53	; 0x35
    cef0:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    cef4:	e12fff1e 	bx	lr
    cef8:	e3a02000 	mov	r2, #0
    cefc:	e3e03020 	mvn	r3, #32
    cf00:	e5c0205a 	strb	r2, [r0, #90]	; 0x5a
    cf04:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    cf08:	e12fff1e 	bx	lr
    cf0c:	e3e03e56 	mvn	r3, #1376	; 0x560
    cf10:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    cf14:	e12fff1e 	bx	lr
    cf18:	e59f3054 	ldr	r3, [pc, #84]	; cf74 <CScreenDevice::SetStandoutMode(unsigned int)+0x37c>
    cf1c:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    cf20:	e12fff1e 	bx	lr
    cf24:	e3e03035 	mvn	r3, #53	; 0x35
    cf28:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    cf2c:	e12fff1e 	bx	lr
    cf30:	e3a03001 	mov	r3, #1
    cf34:	e5c0305a 	strb	r3, [r0, #90]	; 0x5a
    cf38:	e12fff1e 	bx	lr
    cf3c:	e59f302c 	ldr	r3, [pc, #44]	; cf70 <CScreenDevice::SetStandoutMode(unsigned int)+0x378>
    cf40:	e1c035b8 	strh	r3, [r0, #88]	; 0x58
    cf44:	e12fff1e 	bx	lr
    cf48:	e59f301c 	ldr	r3, [pc, #28]	; cf6c <CScreenDevice::SetStandoutMode(unsigned int)+0x374>
    cf4c:	e1c035b6 	strh	r3, [r0, #86]	; 0x56
    cf50:	e12fff1e 	bx	lr
    cf54:	fffffa8a 	.word	0xfffffa8a
    cf58:	000057ca 	.word	0x000057ca
    cf5c:	ffffad55 	.word	0xffffad55
    cf60:	00000555 	.word	0x00000555
    cf64:	ffffa815 	.word	0xffffa815
    cf68:	ffffaa80 	.word	0xffffaa80
    cf6c:	0000528a 	.word	0x0000528a
    cf70:	000057df 	.word	0x000057df
    cf74:	0000529f 	.word	0x0000529f

0000cf78 <CScreenDevice::Tabulator()>:
    cf78:	e92d4070 	push	{r4, r5, r6, lr}
    cf7c:	e1a05000 	mov	r5, r0
    cf80:	e2800020 	add	r0, r0, #32
    cf84:	eb0018fe 	bl	13384 <CCharGenerator::GetCharWidth() const>
    cf88:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
    cf8c:	e1a04180 	lsl	r4, r0, #3
    cf90:	e0840003 	add	r0, r4, r3
    cf94:	e1a01004 	mov	r1, r4
    cf98:	eb001f46 	bl	14cb8 <__udivsi3>
    cf9c:	e0000094 	mul	r0, r4, r0
    cfa0:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    cfa4:	e585004c 	str	r0, [r5, #76]	; 0x4c
    cfa8:	e1500003 	cmp	r0, r3
    cfac:	38bd8070 	popcc	{r4, r5, r6, pc}
    cfb0:	e3a03000 	mov	r3, #0
    cfb4:	e1a00005 	mov	r0, r5
    cfb8:	e585304c 	str	r3, [r5, #76]	; 0x4c
    cfbc:	e8bd4070 	pop	{r4, r5, r6, lr}
    cfc0:	eafffe6b 	b	c974 <CScreenDevice::CursorDown()>

0000cfc4 <CScreenDevice::Scroll()>:
    cfc4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cfc8:	e1a06000 	mov	r6, r0
    cfcc:	e24dd008 	sub	sp, sp, #8
    cfd0:	e2800020 	add	r0, r0, #32
    cfd4:	eb0018ec 	bl	1338c <CCharGenerator::GetCharHeight() const>
    cfd8:	e5961044 	ldr	r1, [r6, #68]	; 0x44
    cfdc:	e5965048 	ldr	r5, [r6, #72]	; 0x48
    cfe0:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    cfe4:	e0455001 	sub	r5, r5, r1
    cfe8:	e0455000 	sub	r5, r5, r0
    cfec:	e1a0c083 	lsl	ip, r3, #1
    cff0:	e005059c 	mul	r5, ip, r5
    cff4:	e0040193 	mul	r4, r3, r1
    cff8:	e5962028 	ldr	r2, [r6, #40]	; 0x28
    cffc:	e3550000 	cmp	r5, #0
    d000:	e1a07000 	mov	r7, r0
    d004:	e0824084 	add	r4, r2, r4, lsl #1
    d008:	1a00000a 	bne	d038 <CScreenDevice::Scroll()+0x74>
    d00c:	e0030793 	mul	r3, r3, r7
    d010:	e1a03083 	lsl	r3, r3, #1
    d014:	e1b03123 	lsrs	r3, r3, #2
    d018:	0a000004 	beq	d030 <CScreenDevice::Scroll()+0x6c>
    d01c:	e1d625b8 	ldrh	r2, [r6, #88]	; 0x58
    d020:	e0843103 	add	r3, r4, r3, lsl #2
    d024:	e4842004 	str	r2, [r4], #4
    d028:	e1540003 	cmp	r4, r3
    d02c:	1afffffc 	bne	d024 <CScreenDevice::Scroll()+0x60>
    d030:	e28dd008 	add	sp, sp, #8
    d034:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d038:	e3a00000 	mov	r0, #0
    d03c:	e3a03002 	mov	r3, #2
    d040:	e2868068 	add	r8, r6, #104	; 0x68
    d044:	e0811007 	add	r1, r1, r7
    d048:	e022219c 	mla	r2, ip, r1, r2
    d04c:	e58d0004 	str	r0, [sp, #4]
    d050:	e1a01004 	mov	r1, r4
    d054:	e58d3000 	str	r3, [sp]
    d058:	e1a00008 	mov	r0, r8
    d05c:	e1a03005 	mov	r3, r5
    d060:	eb001990 	bl	136a8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
    d064:	e1a00008 	mov	r0, r8
    d068:	eb001b78 	bl	13e50 <CDMAChannel::Start()>
    d06c:	e3c55003 	bic	r5, r5, #3
    d070:	e1a00008 	mov	r0, r8
    d074:	eb001bd0 	bl	13fbc <CDMAChannel::Wait()>
    d078:	e0844005 	add	r4, r4, r5
    d07c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    d080:	eaffffe1 	b	d00c <CScreenDevice::Scroll()+0x48>

0000d084 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    d084:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d088:	e1a05000 	mov	r5, r0
    d08c:	e1a09001 	mov	r9, r1
    d090:	e1a08002 	mov	r8, r2
    d094:	e1a0a003 	mov	sl, r3
    d098:	e3a07000 	mov	r7, #0
    d09c:	e1ddb2b8 	ldrh	fp, [sp, #40]	; 0x28
    d0a0:	e2806020 	add	r6, r0, #32
    d0a4:	e1a00006 	mov	r0, r6
    d0a8:	eb0018b7 	bl	1338c <CCharGenerator::GetCharHeight() const>
    d0ac:	e1500007 	cmp	r0, r7
    d0b0:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0b4:	e3a04000 	mov	r4, #0
    d0b8:	ea000017 	b	d11c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x98>
    d0bc:	e1a01009 	mov	r1, r9
    d0c0:	e1a03007 	mov	r3, r7
    d0c4:	e1a02004 	mov	r2, r4
    d0c8:	e1a00006 	mov	r0, r6
    d0cc:	eb0018b2 	bl	1339c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    d0d0:	e3500000 	cmp	r0, #0
    d0d4:	11a0100b 	movne	r1, fp
    d0d8:	1a000003 	bne	d0ec <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x68>
    d0dc:	e5d5305a 	ldrb	r3, [r5, #90]	; 0x5a
    d0e0:	e3530000 	cmp	r3, #0
    d0e4:	11d515b6 	ldrhne	r1, [r5, #86]	; 0x56
    d0e8:	01d515b8 	ldrheq	r1, [r5, #88]	; 0x58
    d0ec:	e5952034 	ldr	r2, [r5, #52]	; 0x34
    d0f0:	e0843008 	add	r3, r4, r8
    d0f4:	e1520003 	cmp	r2, r3
    d0f8:	9a000006 	bls	d118 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x94>
    d0fc:	e5952038 	ldr	r2, [r5, #56]	; 0x38
    d100:	e15a0002 	cmp	sl, r2
    d104:	35952030 	ldrcc	r2, [r5, #48]	; 0x30
    d108:	35950028 	ldrcc	r0, [r5, #40]	; 0x28
    d10c:	30233a92 	mlacc	r3, r2, sl, r3
    d110:	31a03083 	lslcc	r3, r3, #1
    d114:	318010b3 	strhcc	r1, [r0, r3]
    d118:	e2844001 	add	r4, r4, #1
    d11c:	e1a00006 	mov	r0, r6
    d120:	eb001897 	bl	13384 <CCharGenerator::GetCharWidth() const>
    d124:	e1500004 	cmp	r0, r4
    d128:	8affffe3 	bhi	d0bc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x38>
    d12c:	e2877001 	add	r7, r7, #1
    d130:	e28aa001 	add	sl, sl, #1
    d134:	eaffffda 	b	d0a4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x20>

0000d138 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    d138:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d13c:	e1a05000 	mov	r5, r0
    d140:	e1a07001 	mov	r7, r1
    d144:	e1a08002 	mov	r8, r2
    d148:	e3a09000 	mov	r9, #0
    d14c:	e2806020 	add	r6, r0, #32
    d150:	e1a00006 	mov	r0, r6
    d154:	eb00188c 	bl	1338c <CCharGenerator::GetCharHeight() const>
    d158:	e1500009 	cmp	r0, r9
    d15c:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    d160:	e3a04000 	mov	r4, #0
    d164:	e1a00006 	mov	r0, r6
    d168:	eb001885 	bl	13384 <CCharGenerator::GetCharWidth() const>
    d16c:	e1500004 	cmp	r0, r4
    d170:	e0843007 	add	r3, r4, r7
    d174:	9a00000d 	bls	d1b0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x78>
    d178:	e5952034 	ldr	r2, [r5, #52]	; 0x34
    d17c:	e2844001 	add	r4, r4, #1
    d180:	e1520003 	cmp	r2, r3
    d184:	9afffff6 	bls	d164 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x2c>
    d188:	e5952038 	ldr	r2, [r5, #56]	; 0x38
    d18c:	e1580002 	cmp	r8, r2
    d190:	2afffff3 	bcs	d164 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x2c>
    d194:	e5952030 	ldr	r2, [r5, #48]	; 0x30
    d198:	e1d515b8 	ldrh	r1, [r5, #88]	; 0x58
    d19c:	e0233892 	mla	r3, r2, r8, r3
    d1a0:	e5952028 	ldr	r2, [r5, #40]	; 0x28
    d1a4:	e1a03083 	lsl	r3, r3, #1
    d1a8:	e18210b3 	strh	r1, [r2, r3]
    d1ac:	eaffffec 	b	d164 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x2c>
    d1b0:	e2899001 	add	r9, r9, #1
    d1b4:	e2888001 	add	r8, r8, #1
    d1b8:	eaffffe4 	b	d150 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000d1bc <CScreenDevice::InvertCursor()>:
    d1bc:	e5d03054 	ldrb	r3, [r0, #84]	; 0x54
    d1c0:	e3530000 	cmp	r3, #0
    d1c4:	012fff1e 	bxeq	lr
    d1c8:	ea000058 	b	d330 <CScreenDevice::InvertCursor() [clone .part.8]>

0000d1cc <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    d1cc:	e590c034 	ldr	ip, [r0, #52]	; 0x34
    d1d0:	e15c0001 	cmp	ip, r1
    d1d4:	912fff1e 	bxls	lr
    d1d8:	e590c038 	ldr	ip, [r0, #56]	; 0x38
    d1dc:	e15c0002 	cmp	ip, r2
    d1e0:	8590c030 	ldrhi	ip, [r0, #48]	; 0x30
    d1e4:	85900028 	ldrhi	r0, [r0, #40]	; 0x28
    d1e8:	8022129c 	mlahi	r2, ip, r2, r1
    d1ec:	81a02082 	lslhi	r2, r2, #1
    d1f0:	818030b2 	strhhi	r3, [r0, r2]
    d1f4:	e12fff1e 	bx	lr

0000d1f8 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    d1f8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    d1fc:	e1530001 	cmp	r3, r1
    d200:	9a000002 	bls	d210 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>
    d204:	e5903038 	ldr	r3, [r0, #56]	; 0x38
    d208:	e1530002 	cmp	r3, r2
    d20c:	8a000001 	bhi	d218 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>
    d210:	e1d005b8 	ldrh	r0, [r0, #88]	; 0x58
    d214:	e12fff1e 	bx	lr
    d218:	e590c030 	ldr	ip, [r0, #48]	; 0x30
    d21c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    d220:	e022129c 	mla	r2, ip, r2, r1
    d224:	e1a02082 	lsl	r2, r2, #1
    d228:	e19300b2 	ldrh	r0, [r3, r2]
    d22c:	e12fff1e 	bx	lr

0000d230 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    d230:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d234:	e1a05000 	mov	r5, r0
    d238:	e1a04001 	mov	r4, r1
    d23c:	e24dd00c 	sub	sp, sp, #12
    d240:	e2800020 	add	r0, r0, #32
    d244:	e1a06002 	mov	r6, r2
    d248:	e5957034 	ldr	r7, [r5, #52]	; 0x34
    d24c:	eb00184c 	bl	13384 <CCharGenerator::GetCharWidth() const>
    d250:	e2044003 	and	r4, r4, #3
    d254:	e2844001 	add	r4, r4, #1
    d258:	e0040490 	mul	r4, r0, r4
    d25c:	e59f3028 	ldr	r3, [pc, #40]	; d28c <CScreenDevice::Rotor(unsigned int, unsigned int)+0x5c>
    d260:	e59fc028 	ldr	ip, [pc, #40]	; d290 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x60>
    d264:	e2066003 	and	r6, r6, #3
    d268:	e0833006 	add	r3, r3, r6
    d26c:	e1d312d0 	ldrsb	r1, [r3, #32]
    d270:	e0472004 	sub	r2, r7, r4
    d274:	e1a00005 	mov	r0, r5
    d278:	e58dc000 	str	ip, [sp]
    d27c:	e3a03000 	mov	r3, #0
    d280:	ebffff7f 	bl	d084 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    d284:	e28dd00c 	add	sp, sp, #12
    d288:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d28c:	00017b94 	.word	0x00017b94
    d290:	0000fa8a 	.word	0x0000fa8a

0000d294 <CScreenDevice::DisplayChar(char) [clone .part.5]>:
    d294:	e92d4010 	push	{r4, lr}
    d298:	e1a04000 	mov	r4, r0
    d29c:	e5d0305a 	ldrb	r3, [r0, #90]	; 0x5a
    d2a0:	e24dd008 	sub	sp, sp, #8
    d2a4:	e3530000 	cmp	r3, #0
    d2a8:	e1c024dc 	ldrd	r2, [r0, #76]	; 0x4c
    d2ac:	11d005b8 	ldrhne	r0, [r0, #88]	; 0x58
    d2b0:	01d405b6 	ldrheq	r0, [r4, #86]	; 0x56
    d2b4:	e58d0000 	str	r0, [sp]
    d2b8:	e1a00004 	mov	r0, r4
    d2bc:	ebffff70 	bl	d084 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    d2c0:	e1a00004 	mov	r0, r4
    d2c4:	e28dd008 	add	sp, sp, #8
    d2c8:	e8bd4010 	pop	{r4, lr}
    d2cc:	eafffdf2 	b	ca9c <CScreenDevice::CursorRight()>

0000d2d0 <CScreenDevice::EraseChars(unsigned int) [clone .part.6]>:
    d2d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d2d4:	e1a05000 	mov	r5, r0
    d2d8:	e2807020 	add	r7, r0, #32
    d2dc:	e1a00007 	mov	r0, r7
    d2e0:	e1a06001 	mov	r6, r1
    d2e4:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
    d2e8:	eb001825 	bl	13384 <CCharGenerator::GetCharWidth() const>
    d2ec:	e0204096 	mla	r0, r6, r0, r4
    d2f0:	e5956034 	ldr	r6, [r5, #52]	; 0x34
    d2f4:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
    d2f8:	e1500006 	cmp	r0, r6
    d2fc:	31a06000 	movcc	r6, r0
    d300:	e1540006 	cmp	r4, r6
    d304:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    d308:	e1a01004 	mov	r1, r4
    d30c:	e5952050 	ldr	r2, [r5, #80]	; 0x50
    d310:	e1a00005 	mov	r0, r5
    d314:	ebffff87 	bl	d138 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    d318:	e1a00007 	mov	r0, r7
    d31c:	eb001818 	bl	13384 <CCharGenerator::GetCharWidth() const>
    d320:	e0844000 	add	r4, r4, r0
    d324:	e1540006 	cmp	r4, r6
    d328:	3afffff6 	bcc	d308 <CScreenDevice::EraseChars(unsigned int) [clone .part.6]+0x38>
    d32c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d330 <CScreenDevice::InvertCursor() [clone .part.8]>:
    d330:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d334:	e1a04000 	mov	r4, r0
    d338:	e2806020 	add	r6, r0, #32
    d33c:	e1a00006 	mov	r0, r6
    d340:	e5948024 	ldr	r8, [r4, #36]	; 0x24
    d344:	eb001812 	bl	13394 <CCharGenerator::GetUnderline() const>
    d348:	e1a05000 	mov	r5, r0
    d34c:	e1a00006 	mov	r0, r6
    d350:	eb00180d 	bl	1338c <CCharGenerator::GetCharHeight() const>
    d354:	e1500005 	cmp	r0, r5
    d358:	9a00002f 	bls	d41c <CScreenDevice::InvertCursor() [clone .part.8]+0xec>
    d35c:	e3a07000 	mov	r7, #0
    d360:	ea000007 	b	d384 <CScreenDevice::InvertCursor() [clone .part.8]+0x54>
    d364:	e1510002 	cmp	r1, r2
    d368:	9a000002 	bls	d378 <CScreenDevice::InvertCursor() [clone .part.8]+0x48>
    d36c:	e5941038 	ldr	r1, [r4, #56]	; 0x38
    d370:	e1510003 	cmp	r1, r3
    d374:	8a00001a 	bhi	d3e4 <CScreenDevice::InvertCursor() [clone .part.8]+0xb4>
    d378:	e1d435b8 	ldrh	r3, [r4, #88]	; 0x58
    d37c:	e14830b2 	strh	r3, [r8, #-2]
    d380:	e2877001 	add	r7, r7, #1
    d384:	e1a00006 	mov	r0, r6
    d388:	eb0017fd 	bl	13384 <CCharGenerator::GetCharWidth() const>
    d38c:	e1500007 	cmp	r0, r7
    d390:	9a00001c 	bls	d408 <CScreenDevice::InvertCursor() [clone .part.8]+0xd8>
    d394:	e1c424dc 	ldrd	r2, [r4, #76]	; 0x4c
    d398:	e5d41055 	ldrb	r1, [r4, #85]	; 0x55
    d39c:	e2888002 	add	r8, r8, #2
    d3a0:	e3510000 	cmp	r1, #0
    d3a4:	e0872002 	add	r2, r7, r2
    d3a8:	e0853003 	add	r3, r5, r3
    d3ac:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d3b0:	0affffeb 	beq	d364 <CScreenDevice::InvertCursor() [clone .part.8]+0x34>
    d3b4:	e1510002 	cmp	r1, r2
    d3b8:	9afffff0 	bls	d380 <CScreenDevice::InvertCursor() [clone .part.8]+0x50>
    d3bc:	e5941038 	ldr	r1, [r4, #56]	; 0x38
    d3c0:	e1510003 	cmp	r1, r3
    d3c4:	9affffed 	bls	d380 <CScreenDevice::InvertCursor() [clone .part.8]+0x50>
    d3c8:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    d3cc:	e15810b2 	ldrh	r1, [r8, #-2]
    d3d0:	e0232390 	mla	r3, r0, r3, r2
    d3d4:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    d3d8:	e1a03083 	lsl	r3, r3, #1
    d3dc:	e18210b3 	strh	r1, [r2, r3]
    d3e0:	eaffffe6 	b	d380 <CScreenDevice::InvertCursor() [clone .part.8]+0x50>
    d3e4:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    d3e8:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    d3ec:	e0232390 	mla	r3, r0, r3, r2
    d3f0:	e1a03083 	lsl	r3, r3, #1
    d3f4:	e19120b3 	ldrh	r2, [r1, r3]
    d3f8:	e14820b2 	strh	r2, [r8, #-2]
    d3fc:	e1d425b6 	ldrh	r2, [r4, #86]	; 0x56
    d400:	e18120b3 	strh	r2, [r1, r3]
    d404:	eaffffdd 	b	d380 <CScreenDevice::InvertCursor() [clone .part.8]+0x50>
    d408:	e1a00006 	mov	r0, r6
    d40c:	eb0017de 	bl	1338c <CCharGenerator::GetCharHeight() const>
    d410:	e2855001 	add	r5, r5, #1
    d414:	e1500005 	cmp	r0, r5
    d418:	8affffcf 	bhi	d35c <CScreenDevice::InvertCursor() [clone .part.8]+0x2c>
    d41c:	e5d43055 	ldrb	r3, [r4, #85]	; 0x55
    d420:	e2233001 	eor	r3, r3, #1
    d424:	e5c43055 	strb	r3, [r4, #85]	; 0x55
    d428:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d42c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
    d42c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d430:	e1a04000 	mov	r4, r0
    d434:	e3a0b000 	mov	fp, #0
    d438:	e1a07001 	mov	r7, r1
    d43c:	e1a05002 	mov	r5, r2
    d440:	e1a06003 	mov	r6, r3
    d444:	e280a020 	add	sl, r0, #32
    d448:	eb001810 	bl	13490 <CDevice::CDevice()>
    d44c:	e59f31a0 	ldr	r3, [pc, #416]	; d5f4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1c8>
    d450:	e584700c 	str	r7, [r4, #12]
    d454:	e5843000 	str	r3, [r4]
    d458:	e2849048 	add	r9, r4, #72	; 0x48
    d45c:	e5c45010 	strb	r5, [r4, #16]
    d460:	e5846014 	str	r6, [r4, #20]
    d464:	e1a0000a 	mov	r0, sl
    d468:	e584b018 	str	fp, [r4, #24]
    d46c:	e5c4b01c 	strb	fp, [r4, #28]
    d470:	ebfff13a 	bl	9960 <CGPIOPin::CGPIOPin()>
    d474:	e2848070 	add	r8, r4, #112	; 0x70
    d478:	e1a00009 	mov	r0, r9
    d47c:	ebfff137 	bl	9960 <CGPIOPin::CGPIOPin()>
    d480:	e2847098 	add	r7, r4, #152	; 0x98
    d484:	e1a00008 	mov	r0, r8
    d488:	ebfff134 	bl	9960 <CGPIOPin::CGPIOPin()>
    d48c:	e1a00007 	mov	r0, r7
    d490:	ebfff132 	bl	9960 <CGPIOPin::CGPIOPin()>
    d494:	e155000b 	cmp	r5, fp
    d498:	13a00002 	movne	r0, #2
    d49c:	03a00001 	moveq	r0, #1
    d4a0:	e3a03001 	mov	r3, #1
    d4a4:	e2841a01 	add	r1, r4, #4096	; 0x1000
    d4a8:	e584b8c0 	str	fp, [r4, #2240]	; 0x8c0
    d4ac:	e584b8c4 	str	fp, [r4, #2244]	; 0x8c4
    d4b0:	e584b8c8 	str	fp, [r4, #2248]	; 0x8c8
    d4b4:	e581b0cc 	str	fp, [r1, #204]	; 0xcc
    d4b8:	e58100e4 	str	r0, [r1, #228]	; 0xe4
    d4bc:	e581b0d8 	str	fp, [r1, #216]	; 0xd8
    d4c0:	e581b0d0 	str	fp, [r1, #208]	; 0xd0
    d4c4:	e58130d4 	str	r3, [r1, #212]	; 0xd4
    d4c8:	e58130e8 	str	r3, [r1, #232]	; 0xe8
    d4cc:	e5942014 	ldr	r2, [r4, #20]
    d4d0:	e152000b 	cmp	r2, fp
    d4d4:	1a000029 	bne	d580 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x154>
    d4d8:	e59f5118 	ldr	r5, [pc, #280]	; d5f8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1cc>
    d4dc:	e1a02206 	lsl	r2, r6, #4
    d4e0:	e1a0b002 	mov	fp, r2
    d4e4:	e0852002 	add	r2, r5, r2
    d4e8:	e5922004 	ldr	r2, [r2, #4]
    d4ec:	e3520035 	cmp	r2, #53	; 0x35
    d4f0:	8a000022 	bhi	d580 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x154>
    d4f4:	e59f2100 	ldr	r2, [pc, #256]	; d5fc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1d0>
    d4f8:	e5921010 	ldr	r1, [r2, #16]
    d4fc:	e3510000 	cmp	r1, #0
    d500:	1a000031 	bne	d5cc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1a0>
    d504:	e7951106 	ldr	r1, [r5, r6, lsl #2]
    d508:	e5824010 	str	r4, [r2, #16]
    d50c:	e3510000 	cmp	r1, #0
    d510:	e5841018 	str	r1, [r4, #24]
    d514:	0a000031 	beq	d5e0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1b4>
    d518:	e3560000 	cmp	r6, #0
    d51c:	0a000019 	beq	d588 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x15c>
    d520:	e085500b 	add	r5, r5, fp
    d524:	e5951004 	ldr	r1, [r5, #4]
    d528:	e1a00008 	mov	r0, r8
    d52c:	ebfff137 	bl	9a10 <CGPIOPin::AssignPin(unsigned int)>
    d530:	e5951008 	ldr	r1, [r5, #8]
    d534:	e3a02001 	mov	r2, #1
    d538:	e2811004 	add	r1, r1, #4
    d53c:	e1a00008 	mov	r0, r8
    d540:	e6ef1071 	uxtb	r1, r1
    d544:	ebfff152 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d548:	e595100c 	ldr	r1, [r5, #12]
    d54c:	e1a00007 	mov	r0, r7
    d550:	ebfff12e 	bl	9a10 <CGPIOPin::AssignPin(unsigned int)>
    d554:	e5951010 	ldr	r1, [r5, #16]
    d558:	e3a02001 	mov	r2, #1
    d55c:	e2811004 	add	r1, r1, #4
    d560:	e6ef1071 	uxtb	r1, r1
    d564:	e1a00007 	mov	r0, r7
    d568:	ebfff149 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d56c:	e1a00007 	mov	r0, r7
    d570:	e3a01002 	mov	r1, #2
    d574:	ebfff363 	bl	a308 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    d578:	e3a03001 	mov	r3, #1
    d57c:	e5c4301c 	strb	r3, [r4, #28]
    d580:	e1a00004 	mov	r0, r4
    d584:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d588:	e1a0000a 	mov	r0, sl
    d58c:	e3a01020 	mov	r1, #32
    d590:	ebfff11e 	bl	9a10 <CGPIOPin::AssignPin(unsigned int)>
    d594:	e3a03001 	mov	r3, #1
    d598:	e1a01006 	mov	r1, r6
    d59c:	e1a02003 	mov	r2, r3
    d5a0:	e1a0000a 	mov	r0, sl
    d5a4:	ebfff13a 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d5a8:	e1a00009 	mov	r0, r9
    d5ac:	e3a01021 	mov	r1, #33	; 0x21
    d5b0:	ebfff116 	bl	9a10 <CGPIOPin::AssignPin(unsigned int)>
    d5b4:	e3a03001 	mov	r3, #1
    d5b8:	e1a01006 	mov	r1, r6
    d5bc:	e1a02003 	mov	r2, r3
    d5c0:	e1a00009 	mov	r0, r9
    d5c4:	ebfff132 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d5c8:	eaffffd4 	b	d520 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0xf4>
    d5cc:	e59f3020 	ldr	r3, [pc, #32]	; d5f4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1c8>
    d5d0:	e3a020b0 	mov	r2, #176	; 0xb0
    d5d4:	e2831018 	add	r1, r3, #24
    d5d8:	e2830024 	add	r0, r3, #36	; 0x24
    d5dc:	ebffeed5 	bl	9138 <assertion_failed>
    d5e0:	e59f300c 	ldr	r3, [pc, #12]	; d5f4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1c8>
    d5e4:	e3a020b4 	mov	r2, #180	; 0xb4
    d5e8:	e2831018 	add	r1, r3, #24
    d5ec:	e283003c 	add	r0, r3, #60	; 0x3c
    d5f0:	ebffeed0 	bl	9138 <assertion_failed>
    d5f4:	00017bc8 	.word	0x00017bc8
    d5f8:	00019abc 	.word	0x00019abc
    d5fc:	00019b58 	.word	0x00019b58

0000d600 <CSerialDevice::~CSerialDevice()>:
    d600:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d604:	e5d0301c 	ldrb	r3, [r0, #28]
    d608:	e59f613c 	ldr	r6, [pc, #316]	; d74c <CSerialDevice::~CSerialDevice()+0x14c>
    d60c:	e3530000 	cmp	r3, #0
    d610:	e1a04000 	mov	r4, r0
    d614:	e5806000 	str	r6, [r0]
    d618:	0a000040 	beq	d720 <CSerialDevice::~CSerialDevice()+0x120>
    d61c:	ebfff035 	bl	96f8 <CDeviceNameService::Get()>
    d620:	e5942014 	ldr	r2, [r4, #20]
    d624:	e2861050 	add	r1, r6, #80	; 0x50
    d628:	e3a03000 	mov	r3, #0
    d62c:	e2822001 	add	r2, r2, #1
    d630:	ebfff056 	bl	9790 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    d634:	e3a00001 	mov	r0, #1
    d638:	e59f5110 	ldr	r5, [pc, #272]	; d750 <CSerialDevice::~CSerialDevice()+0x150>
    d63c:	e5941014 	ldr	r1, [r4, #20]
    d640:	e595200c 	ldr	r2, [r5, #12]
    d644:	e3a03000 	mov	r3, #0
    d648:	e1c22110 	bic	r2, r2, r0, lsl r1
    d64c:	e585200c 	str	r2, [r5, #12]
    d650:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    d654:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    d658:	e5942018 	ldr	r2, [r4, #24]
    d65c:	e5823038 	str	r3, [r2, #56]	; 0x38
    d660:	e5942018 	ldr	r2, [r4, #24]
    d664:	e5823030 	str	r3, [r2, #48]	; 0x30
    d668:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d66c:	e594300c 	ldr	r3, [r4, #12]
    d670:	e3530000 	cmp	r3, #0
    d674:	0a00000e 	beq	d6b4 <CSerialDevice::~CSerialDevice()+0xb4>
    d678:	e5953000 	ldr	r3, [r5]
    d67c:	e2433001 	sub	r3, r3, #1
    d680:	e3530000 	cmp	r3, #0
    d684:	e5853000 	str	r3, [r5]
    d688:	1a000009 	bne	d6b4 <CSerialDevice::~CSerialDevice()+0xb4>
    d68c:	e5950004 	ldr	r0, [r5, #4]
    d690:	e3500000 	cmp	r0, #0
    d694:	0a000028 	beq	d73c <CSerialDevice::~CSerialDevice()+0x13c>
    d698:	e5d53008 	ldrb	r3, [r5, #8]
    d69c:	e3530000 	cmp	r3, #0
    d6a0:	0a000022 	beq	d730 <CSerialDevice::~CSerialDevice()+0x130>
    d6a4:	eb001460 	bl	1282c <CInterruptSystem::DisconnectFIQ()>
    d6a8:	e3a03000 	mov	r3, #0
    d6ac:	e5853004 	str	r3, [r5, #4]
    d6b0:	e5c53008 	strb	r3, [r5, #8]
    d6b4:	e2847070 	add	r7, r4, #112	; 0x70
    d6b8:	e1a00007 	mov	r0, r7
    d6bc:	e3a02001 	mov	r2, #1
    d6c0:	e3a01000 	mov	r1, #0
    d6c4:	e2846098 	add	r6, r4, #152	; 0x98
    d6c8:	ebfff0f1 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d6cc:	e1a00006 	mov	r0, r6
    d6d0:	e3a02001 	mov	r2, #1
    d6d4:	e3a01000 	mov	r1, #0
    d6d8:	ebfff0ed 	bl	9a94 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d6dc:	e3a03000 	mov	r3, #0
    d6e0:	e5942014 	ldr	r2, [r4, #20]
    d6e4:	e1a00006 	mov	r0, r6
    d6e8:	e0855102 	add	r5, r5, r2, lsl #2
    d6ec:	e5c4301c 	strb	r3, [r4, #28]
    d6f0:	e5853010 	str	r3, [r5, #16]
    d6f4:	ebfff0be 	bl	99f4 <CGPIOPin::~CGPIOPin()>
    d6f8:	e1a00007 	mov	r0, r7
    d6fc:	ebfff0bc 	bl	99f4 <CGPIOPin::~CGPIOPin()>
    d700:	e2840048 	add	r0, r4, #72	; 0x48
    d704:	ebfff0ba 	bl	99f4 <CGPIOPin::~CGPIOPin()>
    d708:	e2840020 	add	r0, r4, #32
    d70c:	ebfff0b8 	bl	99f4 <CGPIOPin::~CGPIOPin()>
    d710:	e1a00004 	mov	r0, r4
    d714:	eb00173b 	bl	13408 <CDevice::~CDevice()>
    d718:	e1a00004 	mov	r0, r4
    d71c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d720:	e2800098 	add	r0, r0, #152	; 0x98
    d724:	ebfff0b2 	bl	99f4 <CGPIOPin::~CGPIOPin()>
    d728:	e2840070 	add	r0, r4, #112	; 0x70
    d72c:	eafffff2 	b	d6fc <CSerialDevice::~CSerialDevice()+0xfc>
    d730:	e3a01039 	mov	r1, #57	; 0x39
    d734:	eb0014ad 	bl	129f0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    d738:	eaffffda 	b	d6a8 <CSerialDevice::~CSerialDevice()+0xa8>
    d73c:	e3a020e2 	mov	r2, #226	; 0xe2
    d740:	e2861018 	add	r1, r6, #24
    d744:	e2860058 	add	r0, r6, #88	; 0x58
    d748:	ebffee7a 	bl	9138 <assertion_failed>
    d74c:	00017bc8 	.word	0x00017bc8
    d750:	00019b58 	.word	0x00019b58

0000d754 <CSerialDevice::~CSerialDevice()>:
    d754:	e92d4010 	push	{r4, lr}
    d758:	e1a04000 	mov	r4, r0
    d75c:	ebffffa7 	bl	d600 <CSerialDevice::~CSerialDevice()>
    d760:	e1a00004 	mov	r0, r4
    d764:	e59f1008 	ldr	r1, [pc, #8]	; d774 <CSerialDevice::~CSerialDevice()+0x20>
    d768:	eb001064 	bl	11900 <operator delete(void*, unsigned int)>
    d76c:	e1a00004 	mov	r0, r4
    d770:	e8bd8010 	pop	{r4, pc}
    d774:	000010ec 	.word	0x000010ec

0000d778 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>:
    d778:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d77c:	e5d0701c 	ldrb	r7, [r0, #28]
    d780:	e24dd00c 	sub	sp, sp, #12
    d784:	e3570000 	cmp	r7, #0
    d788:	e5dd9030 	ldrb	r9, [sp, #48]	; 0x30
    d78c:	1a000002 	bne	d79c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x24>
    d790:	e1a00007 	mov	r0, r7
    d794:	e28dd00c 	add	sp, sp, #12
    d798:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d79c:	e1a08003 	mov	r8, r3
    d7a0:	e1a06002 	mov	r6, r2
    d7a4:	e1a05001 	mov	r5, r1
    d7a8:	e1a04000 	mov	r4, r0
    d7ac:	ebfff98e 	bl	bdec <CMachineInfo::Get()>
    d7b0:	e3a01002 	mov	r1, #2
    d7b4:	ebfff8a4 	bl	ba4c <CMachineInfo::GetClockRate(unsigned int) const>
    d7b8:	e3500000 	cmp	r0, #0
    d7bc:	0a000082 	beq	d9cc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x254>
    d7c0:	e59f3264 	ldr	r3, [pc, #612]	; da2c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2b4>
    d7c4:	e2452f4b 	sub	r2, r5, #300	; 0x12c
    d7c8:	e1520003 	cmp	r2, r3
    d7cc:	8a000082 	bhi	d9dc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x264>
    d7d0:	e1a01205 	lsl	r1, r5, #4
    d7d4:	eb001db2 	bl	14ea4 <__aeabi_uidivmod>
    d7d8:	e1a0a000 	mov	sl, r0
    d7dc:	e59f324c 	ldr	r3, [pc, #588]	; da30 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2b8>
    d7e0:	e24a2001 	sub	r2, sl, #1
    d7e4:	e1520003 	cmp	r2, r3
    d7e8:	e1a00001 	mov	r0, r1
    d7ec:	8a00007e 	bhi	d9ec <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x274>
    d7f0:	e1a01005 	mov	r1, r5
    d7f4:	e1a00180 	lsl	r0, r0, #3
    d7f8:	eb001d2e 	bl	14cb8 <__udivsi3>
    d7fc:	e2005001 	and	r5, r0, #1
    d800:	e08550a0 	add	r5, r5, r0, lsr #1
    d804:	e355003f 	cmp	r5, #63	; 0x3f
    d808:	8a00007b 	bhi	d9fc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x284>
    d80c:	e594000c 	ldr	r0, [r4, #12]
    d810:	e3500000 	cmp	r0, #0
    d814:	0a000011 	beq	d860 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xe8>
    d818:	e59fb214 	ldr	fp, [pc, #532]	; da34 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2bc>
    d81c:	e59b3000 	ldr	r3, [fp]
    d820:	e3530000 	cmp	r3, #0
    d824:	1a00004d 	bne	d960 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1e8>
    d828:	e5d42010 	ldrb	r2, [r4, #16]
    d82c:	e58b0004 	str	r0, [fp, #4]
    d830:	e3520000 	cmp	r2, #0
    d834:	e5cb2008 	strb	r2, [fp, #8]
    d838:	1a000053 	bne	d98c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x214>
    d83c:	e1a03002 	mov	r3, r2
    d840:	e3a01039 	mov	r1, #57	; 0x39
    d844:	e59f21ec 	ldr	r2, [pc, #492]	; da38 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2c0>
    d848:	eb001434 	bl	12920 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    d84c:	e59b3000 	ldr	r3, [fp]
    d850:	e3530000 	cmp	r3, #0
    d854:	1a000054 	bne	d9ac <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x234>
    d858:	e3a03001 	mov	r3, #1
    d85c:	e58b3000 	str	r3, [fp]
    d860:	e3a03000 	mov	r3, #0
    d864:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    d868:	e5942018 	ldr	r2, [r4, #24]
    d86c:	e2466005 	sub	r6, r6, #5
    d870:	e5823038 	str	r3, [r2, #56]	; 0x38
    d874:	e5943018 	ldr	r3, [r4, #24]
    d878:	e59f21bc 	ldr	r2, [pc, #444]	; da3c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2c4>
    d87c:	e3560003 	cmp	r6, #3
    d880:	e5832044 	str	r2, [r3, #68]	; 0x44
    d884:	e5943018 	ldr	r3, [r4, #24]
    d888:	e583a024 	str	sl, [r3, #36]	; 0x24
    d88c:	e5943018 	ldr	r3, [r4, #24]
    d890:	e5835028 	str	r5, [r3, #40]	; 0x28
    d894:	8a000060 	bhi	da1c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2a4>
    d898:	e59f01a0 	ldr	r0, [pc, #416]	; da40 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2c8>
    d89c:	e2483001 	sub	r3, r8, #1
    d8a0:	e0806106 	add	r6, r0, r6, lsl #2
    d8a4:	e3530001 	cmp	r3, #1
    d8a8:	e5963114 	ldr	r3, [r6, #276]	; 0x114
    d8ac:	8a000042 	bhi	d9bc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x244>
    d8b0:	e3580002 	cmp	r8, #2
    d8b4:	03833008 	orreq	r3, r3, #8
    d8b8:	e3590001 	cmp	r9, #1
    d8bc:	0a000030 	beq	d984 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x20c>
    d8c0:	e3590000 	cmp	r9, #0
    d8c4:	0a000002 	beq	d8d4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x15c>
    d8c8:	e3590002 	cmp	r9, #2
    d8cc:	03833006 	orreq	r3, r3, #6
    d8d0:	1a00004d 	bne	da0c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x294>
    d8d4:	e594200c 	ldr	r2, [r4, #12]
    d8d8:	e5941018 	ldr	r1, [r4, #24]
    d8dc:	e3520000 	cmp	r2, #0
    d8e0:	0581302c 	streq	r3, [r1, #44]	; 0x2c
    d8e4:	0a00000e 	beq	d924 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1ac>
    d8e8:	e3a02009 	mov	r2, #9
    d8ec:	e3a00e45 	mov	r0, #1104	; 0x450
    d8f0:	e3a0c001 	mov	ip, #1
    d8f4:	e5812034 	str	r2, [r1, #52]	; 0x34
    d8f8:	e5941018 	ldr	r1, [r4, #24]
    d8fc:	e59f2130 	ldr	r2, [pc, #304]	; da34 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2bc>
    d900:	e581302c 	str	r3, [r1, #44]	; 0x2c
    d904:	e5943018 	ldr	r3, [r4, #24]
    d908:	e3a01000 	mov	r1, #0
    d90c:	e5830038 	str	r0, [r3, #56]	; 0x38
    d910:	e592300c 	ldr	r3, [r2, #12]
    d914:	e5940014 	ldr	r0, [r4, #20]
    d918:	e183301c 	orr	r3, r3, ip, lsl r0
    d91c:	e582300c 	str	r3, [r2, #12]
    d920:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
    d924:	e5943018 	ldr	r3, [r4, #24]
    d928:	e59f2114 	ldr	r2, [pc, #276]	; da44 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2cc>
    d92c:	e3a05000 	mov	r5, #0
    d930:	e5832030 	str	r2, [r3, #48]	; 0x30
    d934:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    d938:	ebffef6e 	bl	96f8 <CDeviceNameService::Get()>
    d93c:	e5942014 	ldr	r2, [r4, #20]
    d940:	e1a03004 	mov	r3, r4
    d944:	e58d5000 	str	r5, [sp]
    d948:	e2822001 	add	r2, r2, #1
    d94c:	e59f10f4 	ldr	r1, [pc, #244]	; da48 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d0>
    d950:	ebffef74 	bl	9728 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    d954:	e1a00007 	mov	r0, r7
    d958:	e28dd00c 	add	sp, sp, #12
    d95c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d960:	e59b3004 	ldr	r3, [fp, #4]
    d964:	e1500003 	cmp	r0, r3
    d968:	0a00000b 	beq	d99c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x224>
    d96c:	e3a07000 	mov	r7, #0
    d970:	e5943014 	ldr	r3, [r4, #20]
    d974:	e5c4701c 	strb	r7, [r4, #28]
    d978:	e08bb103 	add	fp, fp, r3, lsl #2
    d97c:	e58b7010 	str	r7, [fp, #16]
    d980:	eaffff82 	b	d790 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x18>
    d984:	e3833002 	orr	r3, r3, #2
    d988:	eaffffd1 	b	d8d4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x15c>
    d98c:	e59f20a4 	ldr	r2, [pc, #164]	; da38 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2c0>
    d990:	e3a01039 	mov	r1, #57	; 0x39
    d994:	eb001370 	bl	1275c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    d998:	eaffffab 	b	d84c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xd4>
    d99c:	e5d42010 	ldrb	r2, [r4, #16]
    d9a0:	e5db3008 	ldrb	r3, [fp, #8]
    d9a4:	e1520003 	cmp	r2, r3
    d9a8:	1affffef 	bne	d96c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1f4>
    d9ac:	e59f1098 	ldr	r1, [pc, #152]	; da4c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d4>
    d9b0:	e59f2098 	ldr	r2, [pc, #152]	; da50 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d8>
    d9b4:	e28100cc 	add	r0, r1, #204	; 0xcc
    d9b8:	ebffedde 	bl	9138 <assertion_failed>
    d9bc:	e2801020 	add	r1, r0, #32
    d9c0:	e59f208c 	ldr	r2, [pc, #140]	; da54 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2dc>
    d9c4:	e2800f4a 	add	r0, r0, #296	; 0x128
    d9c8:	ebffedda 	bl	9138 <assertion_failed>
    d9cc:	e59f1078 	ldr	r1, [pc, #120]	; da4c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d4>
    d9d0:	e3a02c01 	mov	r2, #256	; 0x100
    d9d4:	e2810058 	add	r0, r1, #88	; 0x58
    d9d8:	ebffedd6 	bl	9138 <assertion_failed>
    d9dc:	e59f1068 	ldr	r1, [pc, #104]	; da4c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d4>
    d9e0:	e59f2070 	ldr	r2, [pc, #112]	; da58 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e0>
    d9e4:	e2810068 	add	r0, r1, #104	; 0x68
    d9e8:	ebffedd2 	bl	9138 <assertion_failed>
    d9ec:	e59f1058 	ldr	r1, [pc, #88]	; da4c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d4>
    d9f0:	e59f2064 	ldr	r2, [pc, #100]	; da5c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e4>
    d9f4:	e2810094 	add	r0, r1, #148	; 0x94
    d9f8:	ebffedce 	bl	9138 <assertion_failed>
    d9fc:	e59f1048 	ldr	r1, [pc, #72]	; da4c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d4>
    da00:	e3a02f42 	mov	r2, #264	; 0x108
    da04:	e28100b8 	add	r0, r1, #184	; 0xb8
    da08:	ebffedca 	bl	9138 <assertion_failed>
    da0c:	e59f1038 	ldr	r1, [pc, #56]	; da4c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d4>
    da10:	e59f2048 	ldr	r2, [pc, #72]	; da60 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2e8>
    da14:	e2810f41 	add	r0, r1, #260	; 0x104
    da18:	ebffedc6 	bl	9138 <assertion_failed>
    da1c:	e59f1028 	ldr	r1, [pc, #40]	; da4c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d4>
    da20:	e59f203c 	ldr	r2, [pc, #60]	; da64 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2ec>
    da24:	e2810f41 	add	r0, r1, #260	; 0x104
    da28:	ebffedc2 	bl	9138 <assertion_failed>
    da2c:	003d07d4 	.word	0x003d07d4
    da30:	0000fffe 	.word	0x0000fffe
    da34:	00019b58 	.word	0x00019b58
    da38:	0000e428 	.word	0x0000e428
    da3c:	000007ff 	.word	0x000007ff
    da40:	00017bc0 	.word	0x00017bc0
    da44:	00000301 	.word	0x00000301
    da48:	00017c18 	.word	0x00017c18
    da4c:	00017be0 	.word	0x00017be0
    da50:	0000012a 	.word	0x0000012a
    da54:	00000143 	.word	0x00000143
    da58:	00000102 	.word	0x00000102
    da5c:	00000105 	.word	0x00000105
    da60:	00000157 	.word	0x00000157
    da64:	0000013f 	.word	0x0000013f

0000da68 <CSerialDevice::Write(void const*, unsigned int)>:
    da68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    da6c:	e5d0301c 	ldrb	r3, [r0, #28]
    da70:	e3530000 	cmp	r3, #0
    da74:	0a000062 	beq	dc04 <CSerialDevice::Write(void const*, unsigned int)+0x19c>
    da78:	e2806a01 	add	r6, r0, #4096	; 0x1000
    da7c:	e1a07000 	mov	r7, r0
    da80:	e59600e8 	ldr	r0, [r6, #232]	; 0xe8
    da84:	e1a04001 	mov	r4, r1
    da88:	e3500000 	cmp	r0, #0
    da8c:	e1a08002 	mov	r8, r2
    da90:	1a00004a 	bne	dbc0 <CSerialDevice::Write(void const*, unsigned int)+0x158>
    da94:	e3540000 	cmp	r4, #0
    da98:	0a00005d 	beq	dc14 <CSerialDevice::Write(void const*, unsigned int)+0x1ac>
    da9c:	e3580000 	cmp	r8, #0
    daa0:	0a00005f 	beq	dc24 <CSerialDevice::Write(void const*, unsigned int)+0x1bc>
    daa4:	e3a05000 	mov	r5, #0
    daa8:	e2444001 	sub	r4, r4, #1
    daac:	ea000002 	b	dabc <CSerialDevice::Write(void const*, unsigned int)+0x54>
    dab0:	e2855001 	add	r5, r5, #1
    dab4:	e1550008 	cmp	r5, r8
    dab8:	0a00000f 	beq	dafc <CSerialDevice::Write(void const*, unsigned int)+0x94>
    dabc:	e5f41001 	ldrb	r1, [r4, #1]!
    dac0:	e1a00007 	mov	r0, r7
    dac4:	eb00019c 	bl	e13c <CSerialDevice::Write(unsigned char)>
    dac8:	e3500000 	cmp	r0, #0
    dacc:	0a00000a 	beq	dafc <CSerialDevice::Write(void const*, unsigned int)+0x94>
    dad0:	e5d43000 	ldrb	r3, [r4]
    dad4:	e353000a 	cmp	r3, #10
    dad8:	1afffff4 	bne	dab0 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    dadc:	e59630d4 	ldr	r3, [r6, #212]	; 0xd4
    dae0:	e3130001 	tst	r3, #1
    dae4:	0afffff1 	beq	dab0 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    dae8:	e3a0100d 	mov	r1, #13
    daec:	e1a00007 	mov	r0, r7
    daf0:	eb000191 	bl	e13c <CSerialDevice::Write(unsigned char)>
    daf4:	e3500000 	cmp	r0, #0
    daf8:	1affffec 	bne	dab0 <CSerialDevice::Write(void const*, unsigned int)+0x48>
    dafc:	e59630e8 	ldr	r3, [r6, #232]	; 0xe8
    db00:	e3530000 	cmp	r3, #0
    db04:	1a00002f 	bne	dbc8 <CSerialDevice::Write(void const*, unsigned int)+0x160>
    db08:	e597300c 	ldr	r3, [r7, #12]
    db0c:	e3530000 	cmp	r3, #0
    db10:	0a000028 	beq	dbb8 <CSerialDevice::Write(void const*, unsigned int)+0x150>
    db14:	e59600e4 	ldr	r0, [r6, #228]	; 0xe4
    db18:	e3500000 	cmp	r0, #0
    db1c:	1a00002e 	bne	dbdc <CSerialDevice::Write(void const*, unsigned int)+0x174>
    db20:	e59630cc 	ldr	r3, [r6, #204]	; 0xcc
    db24:	e59620d0 	ldr	r2, [r6, #208]	; 0xd0
    db28:	e1520003 	cmp	r2, r3
    db2c:	0a000021 	beq	dbb8 <CSerialDevice::Write(void const*, unsigned int)+0x150>
    db30:	e3a03000 	mov	r3, #0
    db34:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    db38:	e59630cc 	ldr	r3, [r6, #204]	; 0xcc
    db3c:	e59620d0 	ldr	r2, [r6, #208]	; 0xd0
    db40:	e1520003 	cmp	r2, r3
    db44:	0a000016 	beq	dba4 <CSerialDevice::Write(void const*, unsigned int)+0x13c>
    db48:	e5972018 	ldr	r2, [r7, #24]
    db4c:	e5923018 	ldr	r3, [r2, #24]
    db50:	e3130020 	tst	r3, #32
    db54:	1a000026 	bne	dbf4 <CSerialDevice::Write(void const*, unsigned int)+0x18c>
    db58:	e59f00cc 	ldr	r0, [pc, #204]	; dc2c <CSerialDevice::Write(void const*, unsigned int)+0x1c4>
    db5c:	ea000003 	b	db70 <CSerialDevice::Write(void const*, unsigned int)+0x108>
    db60:	e5972018 	ldr	r2, [r7, #24]
    db64:	e5923018 	ldr	r3, [r2, #24]
    db68:	e3130020 	tst	r3, #32
    db6c:	1a000020 	bne	dbf4 <CSerialDevice::Write(void const*, unsigned int)+0x18c>
    db70:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    db74:	e2831001 	add	r1, r3, #1
    db78:	e58610d0 	str	r1, [r6, #208]	; 0xd0
    db7c:	e0873003 	add	r3, r7, r3
    db80:	e5d338cc 	ldrb	r3, [r3, #2252]	; 0x8cc
    db84:	e5823000 	str	r3, [r2]
    db88:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    db8c:	e0033000 	and	r3, r3, r0
    db90:	e58630d0 	str	r3, [r6, #208]	; 0xd0
    db94:	e59620cc 	ldr	r2, [r6, #204]	; 0xcc
    db98:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    db9c:	e1520003 	cmp	r2, r3
    dba0:	1affffee 	bne	db60 <CSerialDevice::Write(void const*, unsigned int)+0xf8>
    dba4:	e3a03000 	mov	r3, #0
    dba8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    dbac:	e59630e4 	ldr	r3, [r6, #228]	; 0xe4
    dbb0:	e3530000 	cmp	r3, #0
    dbb4:	1a000005 	bne	dbd0 <CSerialDevice::Write(void const*, unsigned int)+0x168>
    dbb8:	e1a00005 	mov	r0, r5
    dbbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dbc0:	eb001258 	bl	12528 <EnterCritical>
    dbc4:	eaffffb2 	b	da94 <CSerialDevice::Write(void const*, unsigned int)+0x2c>
    dbc8:	eb001280 	bl	125d0 <LeaveCritical>
    dbcc:	eaffffcd 	b	db08 <CSerialDevice::Write(void const*, unsigned int)+0xa0>
    dbd0:	eb00127e 	bl	125d0 <LeaveCritical>
    dbd4:	e1a00005 	mov	r0, r5
    dbd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dbdc:	eb001251 	bl	12528 <EnterCritical>
    dbe0:	e59620cc 	ldr	r2, [r6, #204]	; 0xcc
    dbe4:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
    dbe8:	e1520003 	cmp	r2, r3
    dbec:	1affffcf 	bne	db30 <CSerialDevice::Write(void const*, unsigned int)+0xc8>
    dbf0:	eaffffed 	b	dbac <CSerialDevice::Write(void const*, unsigned int)+0x144>
    dbf4:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    dbf8:	e3833020 	orr	r3, r3, #32
    dbfc:	e5823038 	str	r3, [r2, #56]	; 0x38
    dc00:	eaffffe7 	b	dba4 <CSerialDevice::Write(void const*, unsigned int)+0x13c>
    dc04:	e59f1024 	ldr	r1, [pc, #36]	; dc30 <CSerialDevice::Write(void const*, unsigned int)+0x1c8>
    dc08:	e59f2024 	ldr	r2, [pc, #36]	; dc34 <CSerialDevice::Write(void const*, unsigned int)+0x1cc>
    dc0c:	e2810f4b 	add	r0, r1, #300	; 0x12c
    dc10:	ebffed48 	bl	9138 <assertion_failed>
    dc14:	e59f1014 	ldr	r1, [pc, #20]	; dc30 <CSerialDevice::Write(void const*, unsigned int)+0x1c8>
    dc18:	e59f2018 	ldr	r2, [pc, #24]	; dc38 <CSerialDevice::Write(void const*, unsigned int)+0x1d0>
    dc1c:	e2810f4e 	add	r0, r1, #312	; 0x138
    dc20:	ebffed44 	bl	9138 <assertion_failed>
    dc24:	e1a05008 	mov	r5, r8
    dc28:	eaffffb3 	b	dafc <CSerialDevice::Write(void const*, unsigned int)+0x94>
    dc2c:	000007ff 	.word	0x000007ff
    dc30:	00017be0 	.word	0x00017be0
    dc34:	00000176 	.word	0x00000176
    dc38:	00000183 	.word	0x00000183

0000dc3c <CSerialDevice::Read(void*, unsigned int)>:
    dc3c:	e92d4070 	push	{r4, r5, r6, lr}
    dc40:	e5d0301c 	ldrb	r3, [r0, #28]
    dc44:	e24dd008 	sub	sp, sp, #8
    dc48:	e3530000 	cmp	r3, #0
    dc4c:	0a000069 	beq	ddf8 <CSerialDevice::Read(void*, unsigned int)+0x1bc>
    dc50:	e3510000 	cmp	r1, #0
    dc54:	0a00006b 	beq	de08 <CSerialDevice::Read(void*, unsigned int)+0x1cc>
    dc58:	e590500c 	ldr	r5, [r0, #12]
    dc5c:	e1a04000 	mov	r4, r0
    dc60:	e3550000 	cmp	r5, #0
    dc64:	0a000030 	beq	dd2c <CSerialDevice::Read(void*, unsigned int)+0xf0>
    dc68:	e2806a01 	add	r6, r0, #4096	; 0x1000
    dc6c:	e59600e4 	ldr	r0, [r6, #228]	; 0xe4
    dc70:	e3500000 	cmp	r0, #0
    dc74:	1a000058 	bne	dddc <CSerialDevice::Read(void*, unsigned int)+0x1a0>
    dc78:	e59438c8 	ldr	r3, [r4, #2248]	; 0x8c8
    dc7c:	e3530000 	cmp	r3, #0
    dc80:	ba000020 	blt	dd08 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    dc84:	e3520000 	cmp	r2, #0
    dc88:	0a000068 	beq	de30 <CSerialDevice::Read(void*, unsigned int)+0x1f4>
    dc8c:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    dc90:	e59408c4 	ldr	r0, [r4, #2244]	; 0x8c4
    dc94:	e1500003 	cmp	r0, r3
    dc98:	0a000064 	beq	de30 <CSerialDevice::Read(void*, unsigned int)+0x1f4>
    dc9c:	e0812002 	add	r2, r1, r2
    dca0:	e3a05000 	mov	r5, #0
    dca4:	e59fc194 	ldr	ip, [pc, #404]	; de40 <CSerialDevice::Read(void*, unsigned int)+0x204>
    dca8:	ea000003 	b	dcbc <CSerialDevice::Read(void*, unsigned int)+0x80>
    dcac:	e59408c0 	ldr	r0, [r4, #2240]	; 0x8c0
    dcb0:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    dcb4:	e1500003 	cmp	r0, r3
    dcb8:	0a000015 	beq	dd14 <CSerialDevice::Read(void*, unsigned int)+0xd8>
    dcbc:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    dcc0:	e2855001 	add	r5, r5, #1
    dcc4:	e2830001 	add	r0, r3, #1
    dcc8:	e58408c4 	str	r0, [r4, #2244]	; 0x8c4
    dccc:	e0843003 	add	r3, r4, r3
    dcd0:	e5d330c0 	ldrb	r3, [r3, #192]	; 0xc0
    dcd4:	e4c13001 	strb	r3, [r1], #1
    dcd8:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    dcdc:	e1520001 	cmp	r2, r1
    dce0:	e003300c 	and	r3, r3, ip
    dce4:	e58438c4 	str	r3, [r4, #2244]	; 0x8c4
    dce8:	1affffef 	bne	dcac <CSerialDevice::Read(void*, unsigned int)+0x70>
    dcec:	e59630e4 	ldr	r3, [r6, #228]	; 0xe4
    dcf0:	e3530000 	cmp	r3, #0
    dcf4:	0a000009 	beq	dd20 <CSerialDevice::Read(void*, unsigned int)+0xe4>
    dcf8:	eb001234 	bl	125d0 <LeaveCritical>
    dcfc:	e1a00005 	mov	r0, r5
    dd00:	e28dd008 	add	sp, sp, #8
    dd04:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd08:	e3a03000 	mov	r3, #0
    dd0c:	e59458c8 	ldr	r5, [r4, #2248]	; 0x8c8
    dd10:	e58438c8 	str	r3, [r4, #2248]	; 0x8c8
    dd14:	e59630e4 	ldr	r3, [r6, #228]	; 0xe4
    dd18:	e3530000 	cmp	r3, #0
    dd1c:	1afffff5 	bne	dcf8 <CSerialDevice::Read(void*, unsigned int)+0xbc>
    dd20:	e1a00005 	mov	r0, r5
    dd24:	e28dd008 	add	sp, sp, #8
    dd28:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd2c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    dd30:	e3520000 	cmp	r2, #0
    dd34:	0a00003f 	beq	de38 <CSerialDevice::Read(void*, unsigned int)+0x1fc>
    dd38:	e5903018 	ldr	r3, [r0, #24]
    dd3c:	e5930018 	ldr	r0, [r3, #24]
    dd40:	e3100010 	tst	r0, #16
    dd44:	1a00001f 	bne	ddc8 <CSerialDevice::Read(void*, unsigned int)+0x18c>
    dd48:	e5933000 	ldr	r3, [r3]
    dd4c:	e3130b01 	tst	r3, #1024	; 0x400
    dd50:	1a000030 	bne	de18 <CSerialDevice::Read(void*, unsigned int)+0x1dc>
    dd54:	e3130b02 	tst	r3, #2048	; 0x800
    dd58:	1a000030 	bne	de20 <CSerialDevice::Read(void*, unsigned int)+0x1e4>
    dd5c:	e3130c01 	tst	r3, #256	; 0x100
    dd60:	02422001 	subeq	r2, r2, #1
    dd64:	00810002 	addeq	r0, r1, r2
    dd68:	0241c001 	subeq	ip, r1, #1
    dd6c:	0a000012 	beq	ddbc <CSerialDevice::Read(void*, unsigned int)+0x180>
    dd70:	ea00002c 	b	de28 <CSerialDevice::Read(void*, unsigned int)+0x1ec>
    dd74:	e28ce001 	add	lr, ip, #1
    dd78:	e28c5002 	add	r5, ip, #2
    dd7c:	e15e0000 	cmp	lr, r0
    dd80:	e5cc3001 	strb	r3, [ip, #1]
    dd84:	e0455001 	sub	r5, r5, r1
    dd88:	0a00000e 	beq	ddc8 <CSerialDevice::Read(void*, unsigned int)+0x18c>
    dd8c:	e5943018 	ldr	r3, [r4, #24]
    dd90:	e5932018 	ldr	r2, [r3, #24]
    dd94:	e3120010 	tst	r2, #16
    dd98:	1a00000a 	bne	ddc8 <CSerialDevice::Read(void*, unsigned int)+0x18c>
    dd9c:	e5933000 	ldr	r3, [r3]
    dda0:	e3130b01 	tst	r3, #1024	; 0x400
    dda4:	1a00001b 	bne	de18 <CSerialDevice::Read(void*, unsigned int)+0x1dc>
    dda8:	e3130b02 	tst	r3, #2048	; 0x800
    ddac:	1a00001b 	bne	de20 <CSerialDevice::Read(void*, unsigned int)+0x1e4>
    ddb0:	e3130c01 	tst	r3, #256	; 0x100
    ddb4:	1a00001b 	bne	de28 <CSerialDevice::Read(void*, unsigned int)+0x1ec>
    ddb8:	e1a0c00e 	mov	ip, lr
    ddbc:	e3130c02 	tst	r3, #512	; 0x200
    ddc0:	0affffeb 	beq	dd74 <CSerialDevice::Read(void*, unsigned int)+0x138>
    ddc4:	e3e05003 	mvn	r5, #3
    ddc8:	e3a03000 	mov	r3, #0
    ddcc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    ddd0:	e1a00005 	mov	r0, r5
    ddd4:	e28dd008 	add	sp, sp, #8
    ddd8:	e8bd8070 	pop	{r4, r5, r6, pc}
    dddc:	e88d0006 	stm	sp, {r1, r2}
    dde0:	eb0011d0 	bl	12528 <EnterCritical>
    dde4:	e89d0006 	ldm	sp, {r1, r2}
    dde8:	e59438c8 	ldr	r3, [r4, #2248]	; 0x8c8
    ddec:	e3530000 	cmp	r3, #0
    ddf0:	aaffffa3 	bge	dc84 <CSerialDevice::Read(void*, unsigned int)+0x48>
    ddf4:	eaffffc3 	b	dd08 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    ddf8:	e59f1044 	ldr	r1, [pc, #68]	; de44 <CSerialDevice::Read(void*, unsigned int)+0x208>
    ddfc:	e3a02d07 	mov	r2, #448	; 0x1c0
    de00:	e2810f4b 	add	r0, r1, #300	; 0x12c
    de04:	ebffeccb 	bl	9138 <assertion_failed>
    de08:	e59f1034 	ldr	r1, [pc, #52]	; de44 <CSerialDevice::Read(void*, unsigned int)+0x208>
    de0c:	e59f2034 	ldr	r2, [pc, #52]	; de48 <CSerialDevice::Read(void*, unsigned int)+0x20c>
    de10:	e2810f4e 	add	r0, r1, #312	; 0x138
    de14:	ebffecc7 	bl	9138 <assertion_failed>
    de18:	e3e05000 	mvn	r5, #0
    de1c:	eaffffe9 	b	ddc8 <CSerialDevice::Read(void*, unsigned int)+0x18c>
    de20:	e3e05001 	mvn	r5, #1
    de24:	eaffffe7 	b	ddc8 <CSerialDevice::Read(void*, unsigned int)+0x18c>
    de28:	e3e05002 	mvn	r5, #2
    de2c:	eaffffe5 	b	ddc8 <CSerialDevice::Read(void*, unsigned int)+0x18c>
    de30:	e3a05000 	mov	r5, #0
    de34:	eaffffb6 	b	dd14 <CSerialDevice::Read(void*, unsigned int)+0xd8>
    de38:	e1a05002 	mov	r5, r2
    de3c:	eaffffe1 	b	ddc8 <CSerialDevice::Read(void*, unsigned int)+0x18c>
    de40:	000007ff 	.word	0x000007ff
    de44:	00017be0 	.word	0x00017be0
    de48:	000001c3 	.word	0x000001c3

0000de4c <CSerialDevice::GetOptions() const>:
    de4c:	e2800a01 	add	r0, r0, #4096	; 0x1000
    de50:	e59000d4 	ldr	r0, [r0, #212]	; 0xd4
    de54:	e12fff1e 	bx	lr

0000de58 <CSerialDevice::SetOptions(unsigned int)>:
    de58:	e2800a01 	add	r0, r0, #4096	; 0x1000
    de5c:	e58010d4 	str	r1, [r0, #212]	; 0xd4
    de60:	e12fff1e 	bx	lr

0000de64 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    de64:	e92d4010 	push	{r4, lr}
    de68:	e590300c 	ldr	r3, [r0, #12]
    de6c:	e3530000 	cmp	r3, #0
    de70:	0a00000e 	beq	deb0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
    de74:	e2800a01 	add	r0, r0, #4096	; 0x1000
    de78:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
    de7c:	e3530000 	cmp	r3, #0
    de80:	1a00000e 	bne	dec0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
    de84:	e3510000 	cmp	r1, #0
    de88:	0a000010 	beq	ded0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
    de8c:	e1d130d0 	ldrsb	r3, [r1]
    de90:	e3530000 	cmp	r3, #0
    de94:	0a000011 	beq	dee0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
    de98:	e3520000 	cmp	r2, #0
    de9c:	0a000013 	beq	def0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
    dea0:	e58020e0 	str	r2, [r0, #224]	; 0xe0
    dea4:	e58010dc 	str	r1, [r0, #220]	; 0xdc
    dea8:	e58010d8 	str	r1, [r0, #216]	; 0xd8
    deac:	e8bd8010 	pop	{r4, pc}
    deb0:	e59f1048 	ldr	r1, [pc, #72]	; df00 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    deb4:	e3a02e22 	mov	r2, #544	; 0x220
    deb8:	e2810f51 	add	r0, r1, #324	; 0x144
    debc:	ebffec9d 	bl	9138 <assertion_failed>
    dec0:	e59f1038 	ldr	r1, [pc, #56]	; df00 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    dec4:	e59f2038 	ldr	r2, [pc, #56]	; df04 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa0>
    dec8:	e2810f57 	add	r0, r1, #348	; 0x15c
    decc:	ebffec99 	bl	9138 <assertion_failed>
    ded0:	e59f1028 	ldr	r1, [pc, #40]	; df00 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    ded4:	e59f202c 	ldr	r2, [pc, #44]	; df08 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa4>
    ded8:	e2810f5b 	add	r0, r1, #364	; 0x16c
    dedc:	ebffec95 	bl	9138 <assertion_failed>
    dee0:	e59f1018 	ldr	r1, [pc, #24]	; df00 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    dee4:	e3a02f89 	mov	r2, #548	; 0x224
    dee8:	e2810f5e 	add	r0, r1, #376	; 0x178
    deec:	ebffec91 	bl	9138 <assertion_failed>
    def0:	e59f1008 	ldr	r1, [pc, #8]	; df00 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    def4:	e59f2010 	ldr	r2, [pc, #16]	; df0c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
    def8:	e2810f62 	add	r0, r1, #392	; 0x188
    defc:	ebffec8d 	bl	9138 <assertion_failed>
    df00:	00017be0 	.word	0x00017be0
    df04:	00000221 	.word	0x00000221
    df08:	00000223 	.word	0x00000223
    df0c:	00000225 	.word	0x00000225

0000df10 <CSerialDevice::AvailableForWrite()>:
    df10:	e92d4010 	push	{r4, lr}
    df14:	e5d0301c 	ldrb	r3, [r0, #28]
    df18:	e3530000 	cmp	r3, #0
    df1c:	0a000019 	beq	df88 <CSerialDevice::AvailableForWrite()+0x78>
    df20:	e590300c 	ldr	r3, [r0, #12]
    df24:	e3530000 	cmp	r3, #0
    df28:	0a00001a 	beq	df98 <CSerialDevice::AvailableForWrite()+0x88>
    df2c:	e2804a01 	add	r4, r0, #4096	; 0x1000
    df30:	e59400e4 	ldr	r0, [r4, #228]	; 0xe4
    df34:	e3500000 	cmp	r0, #0
    df38:	1a00000c 	bne	df70 <CSerialDevice::AvailableForWrite()+0x60>
    df3c:	e59420d0 	ldr	r2, [r4, #208]	; 0xd0
    df40:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    df44:	e1520003 	cmp	r2, r3
    df48:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    df4c:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
    df50:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
    df54:	9284400f 	addls	r4, r4, #15
    df58:	82434001 	subhi	r4, r3, #1
    df5c:	e3500000 	cmp	r0, #0
    df60:	e0444002 	sub	r4, r4, r2
    df64:	1a000004 	bne	df7c <CSerialDevice::AvailableForWrite()+0x6c>
    df68:	e1a00004 	mov	r0, r4
    df6c:	e8bd8010 	pop	{r4, pc}
    df70:	eb00116c 	bl	12528 <EnterCritical>
    df74:	e59400e4 	ldr	r0, [r4, #228]	; 0xe4
    df78:	eaffffef 	b	df3c <CSerialDevice::AvailableForWrite()+0x2c>
    df7c:	eb001193 	bl	125d0 <LeaveCritical>
    df80:	e1a00004 	mov	r0, r4
    df84:	e8bd8010 	pop	{r4, pc}
    df88:	e59f1018 	ldr	r1, [pc, #24]	; dfa8 <CSerialDevice::AvailableForWrite()+0x98>
    df8c:	e59f2018 	ldr	r2, [pc, #24]	; dfac <CSerialDevice::AvailableForWrite()+0x9c>
    df90:	e2810f4b 	add	r0, r1, #300	; 0x12c
    df94:	ebffec67 	bl	9138 <assertion_failed>
    df98:	e59f1008 	ldr	r1, [pc, #8]	; dfa8 <CSerialDevice::AvailableForWrite()+0x98>
    df9c:	e3a02e23 	mov	r2, #560	; 0x230
    dfa0:	e2810f51 	add	r0, r1, #324	; 0x144
    dfa4:	ebffec63 	bl	9138 <assertion_failed>
    dfa8:	00017be0 	.word	0x00017be0
    dfac:	0000022f 	.word	0x0000022f

0000dfb0 <CSerialDevice::AvailableForRead()>:
    dfb0:	e92d4070 	push	{r4, r5, r6, lr}
    dfb4:	e5d0301c 	ldrb	r3, [r0, #28]
    dfb8:	e3530000 	cmp	r3, #0
    dfbc:	0a00001a 	beq	e02c <CSerialDevice::AvailableForRead()+0x7c>
    dfc0:	e590300c 	ldr	r3, [r0, #12]
    dfc4:	e1a04000 	mov	r4, r0
    dfc8:	e3530000 	cmp	r3, #0
    dfcc:	0a00001a 	beq	e03c <CSerialDevice::AvailableForRead()+0x8c>
    dfd0:	e2805a01 	add	r5, r0, #4096	; 0x1000
    dfd4:	e59500e4 	ldr	r0, [r5, #228]	; 0xe4
    dfd8:	e3500000 	cmp	r0, #0
    dfdc:	1a00000c 	bne	e014 <CSerialDevice::AvailableForRead()+0x64>
    dfe0:	e59428c0 	ldr	r2, [r4, #2240]	; 0x8c0
    dfe4:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    dfe8:	e1520003 	cmp	r2, r3
    dfec:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    dff0:	359428c4 	ldrcc	r2, [r4, #2244]	; 0x8c4
    dff4:	259448c4 	ldrcs	r4, [r4, #2244]	; 0x8c4
    dff8:	32834b02 	addcc	r4, r3, #2048	; 0x800
    dffc:	30444002 	subcc	r4, r4, r2
    e000:	20434004 	subcs	r4, r3, r4
    e004:	e3500000 	cmp	r0, #0
    e008:	1a000004 	bne	e020 <CSerialDevice::AvailableForRead()+0x70>
    e00c:	e1a00004 	mov	r0, r4
    e010:	e8bd8070 	pop	{r4, r5, r6, pc}
    e014:	eb001143 	bl	12528 <EnterCritical>
    e018:	e59500e4 	ldr	r0, [r5, #228]	; 0xe4
    e01c:	eaffffef 	b	dfe0 <CSerialDevice::AvailableForRead()+0x30>
    e020:	eb00116a 	bl	125d0 <LeaveCritical>
    e024:	e1a00004 	mov	r0, r4
    e028:	e8bd8070 	pop	{r4, r5, r6, pc}
    e02c:	e59f1018 	ldr	r1, [pc, #24]	; e04c <CSerialDevice::AvailableForRead()+0x9c>
    e030:	e59f2018 	ldr	r2, [pc, #24]	; e050 <CSerialDevice::AvailableForRead()+0xa0>
    e034:	e2810f4b 	add	r0, r1, #300	; 0x12c
    e038:	ebffec3e 	bl	9138 <assertion_failed>
    e03c:	e59f1008 	ldr	r1, [pc, #8]	; e04c <CSerialDevice::AvailableForRead()+0x9c>
    e040:	e59f200c 	ldr	r2, [pc, #12]	; e054 <CSerialDevice::AvailableForRead()+0xa4>
    e044:	e2810f51 	add	r0, r1, #324	; 0x144
    e048:	ebffec3a 	bl	9138 <assertion_failed>
    e04c:	00017be0 	.word	0x00017be0
    e050:	00000245 	.word	0x00000245
    e054:	00000246 	.word	0x00000246

0000e058 <CSerialDevice::Peek()>:
    e058:	e92d4070 	push	{r4, r5, r6, lr}
    e05c:	e5d0301c 	ldrb	r3, [r0, #28]
    e060:	e3530000 	cmp	r3, #0
    e064:	0a00001f 	beq	e0e8 <CSerialDevice::Peek()+0x90>
    e068:	e590300c 	ldr	r3, [r0, #12]
    e06c:	e1a04000 	mov	r4, r0
    e070:	e3530000 	cmp	r3, #0
    e074:	0a00001f 	beq	e0f8 <CSerialDevice::Peek()+0xa0>
    e078:	e2805a01 	add	r5, r0, #4096	; 0x1000
    e07c:	e59500e4 	ldr	r0, [r5, #228]	; 0xe4
    e080:	e3500000 	cmp	r0, #0
    e084:	1a000008 	bne	e0ac <CSerialDevice::Peek()+0x54>
    e088:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    e08c:	e59428c4 	ldr	r2, [r4, #2244]	; 0x8c4
    e090:	e1520003 	cmp	r2, r3
    e094:	0a00001b 	beq	e108 <CSerialDevice::Peek()+0xb0>
    e098:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    e09c:	e0844003 	add	r4, r4, r3
    e0a0:	e5d440c0 	ldrb	r4, [r4, #192]	; 0xc0
    e0a4:	e1a00004 	mov	r0, r4
    e0a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0ac:	eb00111d 	bl	12528 <EnterCritical>
    e0b0:	e59428c0 	ldr	r2, [r4, #2240]	; 0x8c0
    e0b4:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    e0b8:	e1520003 	cmp	r2, r3
    e0bc:	159438c4 	ldrne	r3, [r4, #2244]	; 0x8c4
    e0c0:	059520e4 	ldreq	r2, [r5, #228]	; 0xe4
    e0c4:	159520e4 	ldrne	r2, [r5, #228]	; 0xe4
    e0c8:	10844003 	addne	r4, r4, r3
    e0cc:	03e04000 	mvneq	r4, #0
    e0d0:	15d440c0 	ldrbne	r4, [r4, #192]	; 0xc0
    e0d4:	e3520000 	cmp	r2, #0
    e0d8:	0afffff1 	beq	e0a4 <CSerialDevice::Peek()+0x4c>
    e0dc:	eb00113b 	bl	125d0 <LeaveCritical>
    e0e0:	e1a00004 	mov	r0, r4
    e0e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0e8:	e59f1020 	ldr	r1, [pc, #32]	; e110 <CSerialDevice::Peek()+0xb8>
    e0ec:	e59f2020 	ldr	r2, [pc, #32]	; e114 <CSerialDevice::Peek()+0xbc>
    e0f0:	e2810f4b 	add	r0, r1, #300	; 0x12c
    e0f4:	ebffec0f 	bl	9138 <assertion_failed>
    e0f8:	e59f1010 	ldr	r1, [pc, #16]	; e110 <CSerialDevice::Peek()+0xb8>
    e0fc:	e3a02f97 	mov	r2, #604	; 0x25c
    e100:	e2810f51 	add	r0, r1, #324	; 0x144
    e104:	ebffec0b 	bl	9138 <assertion_failed>
    e108:	e3e04000 	mvn	r4, #0
    e10c:	eaffffe4 	b	e0a4 <CSerialDevice::Peek()+0x4c>
    e110:	00017be0 	.word	0x00017be0
    e114:	0000025b 	.word	0x0000025b

0000e118 <CSerialDevice::Flush()>:
    e118:	e3a03000 	mov	r3, #0
    e11c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e120:	e5902018 	ldr	r2, [r0, #24]
    e124:	e2822018 	add	r2, r2, #24
    e128:	e5923000 	ldr	r3, [r2]
    e12c:	e2133008 	ands	r3, r3, #8
    e130:	1afffffc 	bne	e128 <CSerialDevice::Flush()+0x10>
    e134:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e138:	e12fff1e 	bx	lr

0000e13c <CSerialDevice::Write(unsigned char)>:
    e13c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e140:	e590300c 	ldr	r3, [r0, #12]
    e144:	e3530000 	cmp	r3, #0
    e148:	0a000027 	beq	e1ec <CSerialDevice::Write(unsigned char)+0xb0>
    e14c:	e2805a01 	add	r5, r0, #4096	; 0x1000
    e150:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
    e154:	e1a06001 	mov	r6, r1
    e158:	e3520000 	cmp	r2, #0
    e15c:	e1a04000 	mov	r4, r0
    e160:	1a000015 	bne	e1bc <CSerialDevice::Write(unsigned char)+0x80>
    e164:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    e168:	e59510d0 	ldr	r1, [r5, #208]	; 0xd0
    e16c:	e2833001 	add	r3, r3, #1
    e170:	e1a03a83 	lsl	r3, r3, #21
    e174:	e1a03aa3 	lsr	r3, r3, #21
    e178:	e1530001 	cmp	r3, r1
    e17c:	0a000025 	beq	e218 <CSerialDevice::Write(unsigned char)+0xdc>
    e180:	e3a07001 	mov	r7, #1
    e184:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    e188:	e0840003 	add	r0, r4, r3
    e18c:	e0833007 	add	r3, r3, r7
    e190:	e58530cc 	str	r3, [r5, #204]	; 0xcc
    e194:	e5c068cc 	strb	r6, [r0, #2252]	; 0x8cc
    e198:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    e19c:	e1a03a83 	lsl	r3, r3, #21
    e1a0:	e1a03aa3 	lsr	r3, r3, #21
    e1a4:	e58530cc 	str	r3, [r5, #204]	; 0xcc
    e1a8:	e3520000 	cmp	r2, #0
    e1ac:	0a000000 	beq	e1b4 <CSerialDevice::Write(unsigned char)+0x78>
    e1b0:	eb001106 	bl	125d0 <LeaveCritical>
    e1b4:	e1a00007 	mov	r0, r7
    e1b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e1bc:	e1a00002 	mov	r0, r2
    e1c0:	eb0010d8 	bl	12528 <EnterCritical>
    e1c4:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    e1c8:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    e1cc:	e2833001 	add	r3, r3, #1
    e1d0:	e1a03a83 	lsl	r3, r3, #21
    e1d4:	e1a03aa3 	lsr	r3, r3, #21
    e1d8:	e1530002 	cmp	r3, r2
    e1dc:	03a07000 	moveq	r7, #0
    e1e0:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
    e1e4:	1affffe5 	bne	e180 <CSerialDevice::Write(unsigned char)+0x44>
    e1e8:	eaffffee 	b	e1a8 <CSerialDevice::Write(unsigned char)+0x6c>
    e1ec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e1f0:	e5900018 	ldr	r0, [r0, #24]
    e1f4:	e2802018 	add	r2, r0, #24
    e1f8:	e5923000 	ldr	r3, [r2]
    e1fc:	e2133020 	ands	r3, r3, #32
    e200:	1afffffc 	bne	e1f8 <CSerialDevice::Write(unsigned char)+0xbc>
    e204:	e5801000 	str	r1, [r0]
    e208:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e20c:	e3a07001 	mov	r7, #1
    e210:	e1a00007 	mov	r0, r7
    e214:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e218:	e1a07002 	mov	r7, r2
    e21c:	e1a00007 	mov	r0, r7
    e220:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e224 <CSerialDevice::InterruptHandler()>:
    e224:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e228:	e2805a01 	add	r5, r0, #4096	; 0x1000
    e22c:	e1a04000 	mov	r4, r0
    e230:	e59500e4 	ldr	r0, [r5, #228]	; 0xe4
    e234:	e24dd004 	sub	sp, sp, #4
    e238:	e3500000 	cmp	r0, #0
    e23c:	1a000076 	bne	e41c <CSerialDevice::InterruptHandler()+0x1f8>
    e240:	e3a08000 	mov	r8, #0
    e244:	ee078f9a 	mcr	15, 0, r8, cr7, cr10, {4}
    e248:	e3e0b002 	mvn	fp, #2
    e24c:	e3e09001 	mvn	r9, #1
    e250:	e3e0a000 	mvn	sl, #0
    e254:	e5943018 	ldr	r3, [r4, #24]
    e258:	e59fe1c4 	ldr	lr, [pc, #452]	; e424 <CSerialDevice::InterruptHandler()+0x200>
    e25c:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    e260:	e5832044 	str	r2, [r3, #68]	; 0x44
    e264:	e5943018 	ldr	r3, [r4, #24]
    e268:	e2837018 	add	r7, r3, #24
    e26c:	e5972000 	ldr	r2, [r7]
    e270:	e3120010 	tst	r2, #16
    e274:	1a000024 	bne	e30c <CSerialDevice::InterruptHandler()+0xe8>
    e278:	e5931000 	ldr	r1, [r3]
    e27c:	e3110b01 	tst	r1, #1024	; 0x400
    e280:	0a000046 	beq	e3a0 <CSerialDevice::InterruptHandler()+0x17c>
    e284:	e59428c8 	ldr	r2, [r4, #2248]	; 0x8c8
    e288:	e3520000 	cmp	r2, #0
    e28c:	0584a8c8 	streq	sl, [r4, #2248]	; 0x8c8
    e290:	e59500d8 	ldr	r0, [r5, #216]	; 0xd8
    e294:	e3500000 	cmp	r0, #0
    e298:	0a00000a 	beq	e2c8 <CSerialDevice::InterruptHandler()+0xa4>
    e29c:	e595c0dc 	ldr	ip, [r5, #220]	; 0xdc
    e2a0:	e6af2071 	sxtb	r2, r1
    e2a4:	e1dc60d0 	ldrsb	r6, [ip]
    e2a8:	e1560002 	cmp	r6, r2
    e2ac:	158500dc 	strne	r0, [r5, #220]	; 0xdc
    e2b0:	1a000004 	bne	e2c8 <CSerialDevice::InterruptHandler()+0xa4>
    e2b4:	e28c2001 	add	r2, ip, #1
    e2b8:	e58520dc 	str	r2, [r5, #220]	; 0xdc
    e2bc:	e1dc20d1 	ldrsb	r2, [ip, #1]
    e2c0:	e3520000 	cmp	r2, #0
    e2c4:	03a08001 	moveq	r8, #1
    e2c8:	e59428c0 	ldr	r2, [r4, #2240]	; 0x8c0
    e2cc:	e59408c4 	ldr	r0, [r4, #2244]	; 0x8c4
    e2d0:	e2822001 	add	r2, r2, #1
    e2d4:	e002200e 	and	r2, r2, lr
    e2d8:	e1520000 	cmp	r2, r0
    e2dc:	0a000035 	beq	e3b8 <CSerialDevice::InterruptHandler()+0x194>
    e2e0:	e59428c0 	ldr	r2, [r4, #2240]	; 0x8c0
    e2e4:	e2820001 	add	r0, r2, #1
    e2e8:	e0842002 	add	r2, r4, r2
    e2ec:	e58408c0 	str	r0, [r4, #2240]	; 0x8c0
    e2f0:	e5c210c0 	strb	r1, [r2, #192]	; 0xc0
    e2f4:	e59428c0 	ldr	r2, [r4, #2240]	; 0x8c0
    e2f8:	e002200e 	and	r2, r2, lr
    e2fc:	e58428c0 	str	r2, [r4, #2240]	; 0x8c0
    e300:	e5972000 	ldr	r2, [r7]
    e304:	e3120010 	tst	r2, #16
    e308:	0affffda 	beq	e278 <CSerialDevice::InterruptHandler()+0x54>
    e30c:	e5972000 	ldr	r2, [r7]
    e310:	e3120020 	tst	r2, #32
    e314:	1a000016 	bne	e374 <CSerialDevice::InterruptHandler()+0x150>
    e318:	e59510cc 	ldr	r1, [r5, #204]	; 0xcc
    e31c:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    e320:	e1510002 	cmp	r1, r2
    e324:	0a000036 	beq	e404 <CSerialDevice::InterruptHandler()+0x1e0>
    e328:	e59f00f4 	ldr	r0, [pc, #244]	; e424 <CSerialDevice::InterruptHandler()+0x200>
    e32c:	ea000003 	b	e340 <CSerialDevice::InterruptHandler()+0x11c>
    e330:	e59510cc 	ldr	r1, [r5, #204]	; 0xcc
    e334:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    e338:	e1510002 	cmp	r1, r2
    e33c:	0a000030 	beq	e404 <CSerialDevice::InterruptHandler()+0x1e0>
    e340:	e59520d0 	ldr	r2, [r5, #208]	; 0xd0
    e344:	e2821001 	add	r1, r2, #1
    e348:	e58510d0 	str	r1, [r5, #208]	; 0xd0
    e34c:	e0842002 	add	r2, r4, r2
    e350:	e5d228cc 	ldrb	r2, [r2, #2252]	; 0x8cc
    e354:	e5832000 	str	r2, [r3]
    e358:	e59530d0 	ldr	r3, [r5, #208]	; 0xd0
    e35c:	e0033000 	and	r3, r3, r0
    e360:	e58530d0 	str	r3, [r5, #208]	; 0xd0
    e364:	e5943018 	ldr	r3, [r4, #24]
    e368:	e5932018 	ldr	r2, [r3, #24]
    e36c:	e3120020 	tst	r2, #32
    e370:	0affffee 	beq	e330 <CSerialDevice::InterruptHandler()+0x10c>
    e374:	e3a03000 	mov	r3, #0
    e378:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e37c:	e59530e4 	ldr	r3, [r5, #228]	; 0xe4
    e380:	e3530000 	cmp	r3, #0
    e384:	1a000022 	bne	e414 <CSerialDevice::InterruptHandler()+0x1f0>
    e388:	e3580000 	cmp	r8, #0
    e38c:	0a00001a 	beq	e3fc <CSerialDevice::InterruptHandler()+0x1d8>
    e390:	e59530e0 	ldr	r3, [r5, #224]	; 0xe0
    e394:	e28dd004 	add	sp, sp, #4
    e398:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e39c:	e12fff13 	bx	r3
    e3a0:	e3110b02 	tst	r1, #2048	; 0x800
    e3a4:	0a000007 	beq	e3c8 <CSerialDevice::InterruptHandler()+0x1a4>
    e3a8:	e59428c8 	ldr	r2, [r4, #2248]	; 0x8c8
    e3ac:	e3520000 	cmp	r2, #0
    e3b0:	058498c8 	streq	r9, [r4, #2248]	; 0x8c8
    e3b4:	eaffffb5 	b	e290 <CSerialDevice::InterruptHandler()+0x6c>
    e3b8:	e59428c8 	ldr	r2, [r4, #2248]	; 0x8c8
    e3bc:	e3520000 	cmp	r2, #0
    e3c0:	058498c8 	streq	r9, [r4, #2248]	; 0x8c8
    e3c4:	eaffffa8 	b	e26c <CSerialDevice::InterruptHandler()+0x48>
    e3c8:	e3110c01 	tst	r1, #256	; 0x100
    e3cc:	0a000003 	beq	e3e0 <CSerialDevice::InterruptHandler()+0x1bc>
    e3d0:	e59428c8 	ldr	r2, [r4, #2248]	; 0x8c8
    e3d4:	e3520000 	cmp	r2, #0
    e3d8:	0584b8c8 	streq	fp, [r4, #2248]	; 0x8c8
    e3dc:	eaffffab 	b	e290 <CSerialDevice::InterruptHandler()+0x6c>
    e3e0:	e3110c02 	tst	r1, #512	; 0x200
    e3e4:	0affffa9 	beq	e290 <CSerialDevice::InterruptHandler()+0x6c>
    e3e8:	e59428c8 	ldr	r2, [r4, #2248]	; 0x8c8
    e3ec:	e3520000 	cmp	r2, #0
    e3f0:	03e02003 	mvneq	r2, #3
    e3f4:	058428c8 	streq	r2, [r4, #2248]	; 0x8c8
    e3f8:	eaffffa4 	b	e290 <CSerialDevice::InterruptHandler()+0x6c>
    e3fc:	e28dd004 	add	sp, sp, #4
    e400:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e404:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    e408:	e3c22020 	bic	r2, r2, #32
    e40c:	e5832038 	str	r2, [r3, #56]	; 0x38
    e410:	eaffffd7 	b	e374 <CSerialDevice::InterruptHandler()+0x150>
    e414:	eb00106d 	bl	125d0 <LeaveCritical>
    e418:	eaffffda 	b	e388 <CSerialDevice::InterruptHandler()+0x164>
    e41c:	eb001041 	bl	12528 <EnterCritical>
    e420:	eaffff86 	b	e240 <CSerialDevice::InterruptHandler()+0x1c>
    e424:	000007ff 	.word	0x000007ff

0000e428 <CSerialDevice::InterruptStub(void*)>:
    e428:	e3a03000 	mov	r3, #0
    e42c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e430:	e59f302c 	ldr	r3, [pc, #44]	; e464 <CSerialDevice::InterruptStub(void*)+0x3c>
    e434:	e593200c 	ldr	r2, [r3, #12]
    e438:	e3120001 	tst	r2, #1
    e43c:	012fff1e 	bxeq	lr
    e440:	e5930010 	ldr	r0, [r3, #16]
    e444:	e3500000 	cmp	r0, #0
    e448:	0a000000 	beq	e450 <CSerialDevice::InterruptStub(void*)+0x28>
    e44c:	eaffff74 	b	e224 <CSerialDevice::InterruptHandler()>
    e450:	e59f1010 	ldr	r1, [pc, #16]	; e468 <CSerialDevice::InterruptStub(void*)+0x40>
    e454:	e92d4010 	push	{r4, lr}
    e458:	e59f200c 	ldr	r2, [pc, #12]	; e46c <CSerialDevice::InterruptStub(void*)+0x44>
    e45c:	e2810f66 	add	r0, r1, #408	; 0x198
    e460:	ebffeb34 	bl	9138 <assertion_failed>
    e464:	00019b58 	.word	0x00019b58
    e468:	00017be0 	.word	0x00017be0
    e46c:	0000030f 	.word	0x0000030f

0000e470 <CString::~CString()>:
    e470:	e92d4010 	push	{r4, lr}
    e474:	e1a04000 	mov	r4, r0
    e478:	e5900004 	ldr	r0, [r0, #4]
    e47c:	e59f3014 	ldr	r3, [pc, #20]	; e498 <CString::~CString()+0x28>
    e480:	e3500000 	cmp	r0, #0
    e484:	e5843000 	str	r3, [r4]
    e488:	0a000000 	beq	e490 <CString::~CString()+0x20>
    e48c:	eb000d1a 	bl	118fc <operator delete[](void*)>
    e490:	e1a00004 	mov	r0, r4
    e494:	e8bd8010 	pop	{r4, pc}
    e498:	00017d90 	.word	0x00017d90

0000e49c <CString::~CString()>:
    e49c:	e92d4010 	push	{r4, lr}
    e4a0:	e1a04000 	mov	r4, r0
    e4a4:	e5900004 	ldr	r0, [r0, #4]
    e4a8:	e59f3020 	ldr	r3, [pc, #32]	; e4d0 <CString::~CString()+0x34>
    e4ac:	e3500000 	cmp	r0, #0
    e4b0:	e5843000 	str	r3, [r4]
    e4b4:	0a000000 	beq	e4bc <CString::~CString()+0x20>
    e4b8:	eb000d0f 	bl	118fc <operator delete[](void*)>
    e4bc:	e1a00004 	mov	r0, r4
    e4c0:	e3a01010 	mov	r1, #16
    e4c4:	eb000d0d 	bl	11900 <operator delete(void*, unsigned int)>
    e4c8:	e1a00004 	mov	r0, r4
    e4cc:	e8bd8010 	pop	{r4, pc}
    e4d0:	00017d90 	.word	0x00017d90

0000e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    e4d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e4d8:	e990002c 	ldmib	r0, {r2, r3, r5}
    e4dc:	e0455002 	sub	r5, r5, r2
    e4e0:	e0851001 	add	r1, r5, r1
    e4e4:	e2812001 	add	r2, r1, #1
    e4e8:	e1520003 	cmp	r2, r3
    e4ec:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    e4f0:	e1a04000 	mov	r4, r0
    e4f4:	e2816041 	add	r6, r1, #65	; 0x41
    e4f8:	e1a00006 	mov	r0, r6
    e4fc:	eb000cf7 	bl	118e0 <operator new[](unsigned int)>
    e500:	e3a02000 	mov	r2, #0
    e504:	e594300c 	ldr	r3, [r4, #12]
    e508:	e1a07000 	mov	r7, r0
    e50c:	e5c32000 	strb	r2, [r3]
    e510:	e5941004 	ldr	r1, [r4, #4]
    e514:	eb000a5b 	bl	10e88 <strcpy>
    e518:	e5940004 	ldr	r0, [r4, #4]
    e51c:	e3500000 	cmp	r0, #0
    e520:	0a000000 	beq	e528 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    e524:	eb000cf4 	bl	118fc <operator delete[](void*)>
    e528:	e0875005 	add	r5, r7, r5
    e52c:	e584500c 	str	r5, [r4, #12]
    e530:	e5847004 	str	r7, [r4, #4]
    e534:	e5846008 	str	r6, [r4, #8]
    e538:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e53c <CString::CString()>:
    e53c:	e3a02000 	mov	r2, #0
    e540:	e59f1008 	ldr	r1, [pc, #8]	; e550 <CString::CString()+0x14>
    e544:	e5802008 	str	r2, [r0, #8]
    e548:	e8800006 	stm	r0, {r1, r2}
    e54c:	e12fff1e 	bx	lr
    e550:	00017d90 	.word	0x00017d90

0000e554 <CString::CString(char const*)>:
    e554:	e92d4070 	push	{r4, r5, r6, lr}
    e558:	e1a04000 	mov	r4, r0
    e55c:	e59f302c 	ldr	r3, [pc, #44]	; e590 <CString::CString(char const*)+0x3c>
    e560:	e1a00001 	mov	r0, r1
    e564:	e5843000 	str	r3, [r4]
    e568:	e1a05001 	mov	r5, r1
    e56c:	eb0009b2 	bl	10c3c <strlen>
    e570:	e2800001 	add	r0, r0, #1
    e574:	e5840008 	str	r0, [r4, #8]
    e578:	eb000cd8 	bl	118e0 <operator new[](unsigned int)>
    e57c:	e1a01005 	mov	r1, r5
    e580:	e5840004 	str	r0, [r4, #4]
    e584:	eb000a3f 	bl	10e88 <strcpy>
    e588:	e1a00004 	mov	r0, r4
    e58c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e590:	00017d90 	.word	0x00017d90

0000e594 <CString::CString(CString const&)>:
    e594:	e92d4070 	push	{r4, r5, r6, lr}
    e598:	e1a04000 	mov	r4, r0
    e59c:	e5910004 	ldr	r0, [r1, #4]
    e5a0:	e59f303c 	ldr	r3, [pc, #60]	; e5e4 <CString::CString(CString const&)+0x50>
    e5a4:	e59f503c 	ldr	r5, [pc, #60]	; e5e8 <CString::CString(CString const&)+0x54>
    e5a8:	e3500000 	cmp	r0, #0
    e5ac:	e5843000 	str	r3, [r4]
    e5b0:	01a00005 	moveq	r0, r5
    e5b4:	e1a06001 	mov	r6, r1
    e5b8:	eb00099f 	bl	10c3c <strlen>
    e5bc:	e2800001 	add	r0, r0, #1
    e5c0:	e5840008 	str	r0, [r4, #8]
    e5c4:	eb000cc5 	bl	118e0 <operator new[](unsigned int)>
    e5c8:	e5840004 	str	r0, [r4, #4]
    e5cc:	e5961004 	ldr	r1, [r6, #4]
    e5d0:	e3510000 	cmp	r1, #0
    e5d4:	01a01005 	moveq	r1, r5
    e5d8:	eb000a2a 	bl	10e88 <strcpy>
    e5dc:	e1a00004 	mov	r0, r4
    e5e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e5e4:	00017d90 	.word	0x00017d90
    e5e8:	00018230 	.word	0x00018230

0000e5ec <CString::CString(CString&&)>:
    e5ec:	e3a02000 	mov	r2, #0
    e5f0:	e591c008 	ldr	ip, [r1, #8]
    e5f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e5f8:	e580c008 	str	ip, [r0, #8]
    e5fc:	e59fe014 	ldr	lr, [pc, #20]	; e618 <CString::CString(CString&&)+0x2c>
    e600:	e591c004 	ldr	ip, [r1, #4]
    e604:	e580e000 	str	lr, [r0]
    e608:	e580c004 	str	ip, [r0, #4]
    e60c:	e5812008 	str	r2, [r1, #8]
    e610:	e5812004 	str	r2, [r1, #4]
    e614:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e618:	00017d90 	.word	0x00017d90

0000e61c <CString::operator char const*() const>:
    e61c:	e5900004 	ldr	r0, [r0, #4]
    e620:	e59f3008 	ldr	r3, [pc, #8]	; e630 <CString::operator char const*() const+0x14>
    e624:	e3500000 	cmp	r0, #0
    e628:	01a00003 	moveq	r0, r3
    e62c:	e12fff1e 	bx	lr
    e630:	00018230 	.word	0x00018230

0000e634 <CString::operator=(char const*)>:
    e634:	e92d4070 	push	{r4, r5, r6, lr}
    e638:	e1a04000 	mov	r4, r0
    e63c:	e5900004 	ldr	r0, [r0, #4]
    e640:	e1a05001 	mov	r5, r1
    e644:	e3500000 	cmp	r0, #0
    e648:	0a000000 	beq	e650 <CString::operator=(char const*)+0x1c>
    e64c:	eb000caa 	bl	118fc <operator delete[](void*)>
    e650:	e1a00005 	mov	r0, r5
    e654:	eb000978 	bl	10c3c <strlen>
    e658:	e2800001 	add	r0, r0, #1
    e65c:	e5840008 	str	r0, [r4, #8]
    e660:	eb000c9e 	bl	118e0 <operator new[](unsigned int)>
    e664:	e1a01005 	mov	r1, r5
    e668:	e5840004 	str	r0, [r4, #4]
    e66c:	eb000a05 	bl	10e88 <strcpy>
    e670:	e5940004 	ldr	r0, [r4, #4]
    e674:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e678 <CString::operator=(CString const&)>:
    e678:	e92d4070 	push	{r4, r5, r6, lr}
    e67c:	e1a04000 	mov	r4, r0
    e680:	e5900004 	ldr	r0, [r0, #4]
    e684:	e1a06001 	mov	r6, r1
    e688:	e3500000 	cmp	r0, #0
    e68c:	0a000000 	beq	e694 <CString::operator=(CString const&)+0x1c>
    e690:	eb000c99 	bl	118fc <operator delete[](void*)>
    e694:	e5960004 	ldr	r0, [r6, #4]
    e698:	e59f5030 	ldr	r5, [pc, #48]	; e6d0 <CString::operator=(CString const&)+0x58>
    e69c:	e3500000 	cmp	r0, #0
    e6a0:	01a00005 	moveq	r0, r5
    e6a4:	eb000964 	bl	10c3c <strlen>
    e6a8:	e2800001 	add	r0, r0, #1
    e6ac:	e5840008 	str	r0, [r4, #8]
    e6b0:	eb000c8a 	bl	118e0 <operator new[](unsigned int)>
    e6b4:	e5840004 	str	r0, [r4, #4]
    e6b8:	e5961004 	ldr	r1, [r6, #4]
    e6bc:	e3510000 	cmp	r1, #0
    e6c0:	01a01005 	moveq	r1, r5
    e6c4:	eb0009ef 	bl	10e88 <strcpy>
    e6c8:	e1a00004 	mov	r0, r4
    e6cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    e6d0:	00018230 	.word	0x00018230

0000e6d4 <CString::operator=(CString&&)>:
    e6d4:	e92d4070 	push	{r4, r5, r6, lr}
    e6d8:	e1a05000 	mov	r5, r0
    e6dc:	e5900004 	ldr	r0, [r0, #4]
    e6e0:	e1a04001 	mov	r4, r1
    e6e4:	e3500000 	cmp	r0, #0
    e6e8:	0a000000 	beq	e6f0 <CString::operator=(CString&&)+0x1c>
    e6ec:	eb000c82 	bl	118fc <operator delete[](void*)>
    e6f0:	e3a03000 	mov	r3, #0
    e6f4:	e5941008 	ldr	r1, [r4, #8]
    e6f8:	e5942004 	ldr	r2, [r4, #4]
    e6fc:	e1a00005 	mov	r0, r5
    e700:	e5851008 	str	r1, [r5, #8]
    e704:	e5852004 	str	r2, [r5, #4]
    e708:	e5843008 	str	r3, [r4, #8]
    e70c:	e5843004 	str	r3, [r4, #4]
    e710:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e714 <CString::GetLength() const>:
    e714:	e5900004 	ldr	r0, [r0, #4]
    e718:	e3500000 	cmp	r0, #0
    e71c:	012fff1e 	bxeq	lr
    e720:	ea000945 	b	10c3c <strlen>

0000e724 <CString::Append(char const*)>:
    e724:	e92d4070 	push	{r4, r5, r6, lr}
    e728:	e3a03001 	mov	r3, #1
    e72c:	e1a04000 	mov	r4, r0
    e730:	e5900004 	ldr	r0, [r0, #4]
    e734:	e1a06001 	mov	r6, r1
    e738:	e3500000 	cmp	r0, #0
    e73c:	e5843008 	str	r3, [r4, #8]
    e740:	0a000003 	beq	e754 <CString::Append(char const*)+0x30>
    e744:	eb00093c 	bl	10c3c <strlen>
    e748:	e5943008 	ldr	r3, [r4, #8]
    e74c:	e0830000 	add	r0, r3, r0
    e750:	e5840008 	str	r0, [r4, #8]
    e754:	e1a00006 	mov	r0, r6
    e758:	eb000937 	bl	10c3c <strlen>
    e75c:	e5943008 	ldr	r3, [r4, #8]
    e760:	e0800003 	add	r0, r0, r3
    e764:	e5840008 	str	r0, [r4, #8]
    e768:	eb000c5c 	bl	118e0 <operator new[](unsigned int)>
    e76c:	e5941004 	ldr	r1, [r4, #4]
    e770:	e1a05000 	mov	r5, r0
    e774:	e3510000 	cmp	r1, #0
    e778:	05c01000 	strbeq	r1, [r0]
    e77c:	0a000004 	beq	e794 <CString::Append(char const*)+0x70>
    e780:	eb0009c0 	bl	10e88 <strcpy>
    e784:	e5940004 	ldr	r0, [r4, #4]
    e788:	e3500000 	cmp	r0, #0
    e78c:	0a000000 	beq	e794 <CString::Append(char const*)+0x70>
    e790:	eb000c59 	bl	118fc <operator delete[](void*)>
    e794:	e1a01006 	mov	r1, r6
    e798:	e1a00005 	mov	r0, r5
    e79c:	eb0009d6 	bl	10efc <strcat>
    e7a0:	e5845004 	str	r5, [r4, #4]
    e7a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e7a8 <CString::Compare(char const*) const>:
    e7a8:	e5900004 	ldr	r0, [r0, #4]
    e7ac:	ea00092c 	b	10c64 <strcmp>

0000e7b0 <CString::Find(char) const>:
    e7b0:	e5903004 	ldr	r3, [r0, #4]
    e7b4:	e1d320d0 	ldrsb	r2, [r3]
    e7b8:	e3520000 	cmp	r2, #0
    e7bc:	0a000009 	beq	e7e8 <CString::Find(char) const+0x38>
    e7c0:	e1510002 	cmp	r1, r2
    e7c4:	0a000009 	beq	e7f0 <CString::Find(char) const+0x40>
    e7c8:	e263c001 	rsb	ip, r3, #1
    e7cc:	ea000001 	b	e7d8 <CString::Find(char) const+0x28>
    e7d0:	e1520001 	cmp	r2, r1
    e7d4:	012fff1e 	bxeq	lr
    e7d8:	e083000c 	add	r0, r3, ip
    e7dc:	e1f320d1 	ldrsb	r2, [r3, #1]!
    e7e0:	e3520000 	cmp	r2, #0
    e7e4:	1afffff9 	bne	e7d0 <CString::Find(char) const+0x20>
    e7e8:	e3e00000 	mvn	r0, #0
    e7ec:	e12fff1e 	bx	lr
    e7f0:	e3a00000 	mov	r0, #0
    e7f4:	e12fff1e 	bx	lr

0000e7f8 <CString::PutChar(char, unsigned int)>:
    e7f8:	e92d4070 	push	{r4, r5, r6, lr}
    e7fc:	e2524000 	subs	r4, r2, #0
    e800:	08bd8070 	popeq	{r4, r5, r6, pc}
    e804:	e1a06001 	mov	r6, r1
    e808:	e1a01004 	mov	r1, r4
    e80c:	e1a05000 	mov	r5, r0
    e810:	ebffff2f 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e814:	e2442001 	sub	r2, r4, #1
    e818:	e595300c 	ldr	r3, [r5, #12]
    e81c:	e2422001 	sub	r2, r2, #1
    e820:	e2830001 	add	r0, r3, #1
    e824:	e3720001 	cmn	r2, #1
    e828:	e585000c 	str	r0, [r5, #12]
    e82c:	e5c36000 	strb	r6, [r3]
    e830:	1afffff8 	bne	e818 <CString::PutChar(char, unsigned int)+0x20>
    e834:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e838 <CString::PutString(char const*)>:
    e838:	e92d4070 	push	{r4, r5, r6, lr}
    e83c:	e1a04000 	mov	r4, r0
    e840:	e1a00001 	mov	r0, r1
    e844:	e1a05001 	mov	r5, r1
    e848:	eb0008fb 	bl	10c3c <strlen>
    e84c:	e2506000 	subs	r6, r0, #0
    e850:	0a000002 	beq	e860 <CString::PutString(char const*)+0x28>
    e854:	e1a01006 	mov	r1, r6
    e858:	e1a00004 	mov	r0, r4
    e85c:	ebffff1c 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e860:	e1a01005 	mov	r1, r5
    e864:	e594000c 	ldr	r0, [r4, #12]
    e868:	eb000986 	bl	10e88 <strcpy>
    e86c:	e594100c 	ldr	r1, [r4, #12]
    e870:	e0811006 	add	r1, r1, r6
    e874:	e584100c 	str	r1, [r4, #12]
    e878:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e87c <CString::Replace(char const*, char const*)>:
    e87c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e880:	e1d170d0 	ldrsb	r7, [r1]
    e884:	e24dd010 	sub	sp, sp, #16
    e888:	e3570000 	cmp	r7, #0
    e88c:	1a000002 	bne	e89c <CString::Replace(char const*, char const*)+0x20>
    e890:	e1a00007 	mov	r0, r7
    e894:	e28dd010 	add	sp, sp, #16
    e898:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e89c:	e1a05000 	mov	r5, r0
    e8a0:	e1a06001 	mov	r6, r1
    e8a4:	e5901004 	ldr	r1, [r0, #4]
    e8a8:	e1a0000d 	mov	r0, sp
    e8ac:	e1a08002 	mov	r8, r2
    e8b0:	ebffff27 	bl	e554 <CString::CString(char const*)>
    e8b4:	e5950004 	ldr	r0, [r5, #4]
    e8b8:	e3500000 	cmp	r0, #0
    e8bc:	0a000000 	beq	e8c4 <CString::Replace(char const*, char const*)+0x48>
    e8c0:	eb000c0d 	bl	118fc <operator delete[](void*)>
    e8c4:	e3a00040 	mov	r0, #64	; 0x40
    e8c8:	e5850008 	str	r0, [r5, #8]
    e8cc:	eb000c03 	bl	118e0 <operator new[](unsigned int)>
    e8d0:	e3a07000 	mov	r7, #0
    e8d4:	e59d9004 	ldr	r9, [sp, #4]
    e8d8:	e5850004 	str	r0, [r5, #4]
    e8dc:	e585000c 	str	r0, [r5, #12]
    e8e0:	e1d610d0 	ldrsb	r1, [r6]
    e8e4:	e1a00009 	mov	r0, r9
    e8e8:	eb000994 	bl	10f40 <strchr>
    e8ec:	e2504000 	subs	r4, r0, #0
    e8f0:	0a00002e 	beq	e9b0 <CString::Replace(char const*, char const*)+0x134>
    e8f4:	e1590004 	cmp	r9, r4
    e8f8:	3a000017 	bcc	e95c <CString::Replace(char const*, char const*)+0xe0>
    e8fc:	e1d630d1 	ldrsb	r3, [r6, #1]
    e900:	e2862001 	add	r2, r6, #1
    e904:	e3530000 	cmp	r3, #0
    e908:	e284e001 	add	lr, r4, #1
    e90c:	0a00000c 	beq	e944 <CString::Replace(char const*, char const*)+0xc8>
    e910:	e1d410d1 	ldrsb	r1, [r4, #1]
    e914:	e1510003 	cmp	r1, r3
    e918:	1a00001b 	bne	e98c <CString::Replace(char const*, char const*)+0x110>
    e91c:	e2843002 	add	r3, r4, #2
    e920:	ea000003 	b	e934 <CString::Replace(char const*, char const*)+0xb8>
    e924:	e1de10d0 	ldrsb	r1, [lr]
    e928:	e2833001 	add	r3, r3, #1
    e92c:	e151000c 	cmp	r1, ip
    e930:	1a000015 	bne	e98c <CString::Replace(char const*, char const*)+0x110>
    e934:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
    e938:	e1a0e003 	mov	lr, r3
    e93c:	e35c0000 	cmp	ip, #0
    e940:	1afffff7 	bne	e924 <CString::Replace(char const*, char const*)+0xa8>
    e944:	e1a01008 	mov	r1, r8
    e948:	e1a00005 	mov	r0, r5
    e94c:	e2877001 	add	r7, r7, #1
    e950:	e1a0900e 	mov	r9, lr
    e954:	ebffffb7 	bl	e838 <CString::PutString(char const*)>
    e958:	eaffffe0 	b	e8e0 <CString::Replace(char const*, char const*)+0x64>
    e95c:	e3a01001 	mov	r1, #1
    e960:	e1a00005 	mov	r0, r5
    e964:	e0d9a0d1 	ldrsb	sl, [r9], #1
    e968:	ebfffed9 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e96c:	e595300c 	ldr	r3, [r5, #12]
    e970:	e1540009 	cmp	r4, r9
    e974:	e2832001 	add	r2, r3, #1
    e978:	e585200c 	str	r2, [r5, #12]
    e97c:	e5c3a000 	strb	sl, [r3]
    e980:	1afffff5 	bne	e95c <CString::Replace(char const*, char const*)+0xe0>
    e984:	e1a09004 	mov	r9, r4
    e988:	eaffffdb 	b	e8fc <CString::Replace(char const*, char const*)+0x80>
    e98c:	e3a01001 	mov	r1, #1
    e990:	e1a00005 	mov	r0, r5
    e994:	e0d940d1 	ldrsb	r4, [r9], #1
    e998:	ebfffecd 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e99c:	e595300c 	ldr	r3, [r5, #12]
    e9a0:	e2832001 	add	r2, r3, #1
    e9a4:	e585200c 	str	r2, [r5, #12]
    e9a8:	e5c34000 	strb	r4, [r3]
    e9ac:	eaffffcb 	b	e8e0 <CString::Replace(char const*, char const*)+0x64>
    e9b0:	e1a00005 	mov	r0, r5
    e9b4:	e1a01009 	mov	r1, r9
    e9b8:	ebffff9e 	bl	e838 <CString::PutString(char const*)>
    e9bc:	e595200c 	ldr	r2, [r5, #12]
    e9c0:	e59f3020 	ldr	r3, [pc, #32]	; e9e8 <CString::Replace(char const*, char const*)+0x16c>
    e9c4:	e5c24000 	strb	r4, [r2]
    e9c8:	e59d0004 	ldr	r0, [sp, #4]
    e9cc:	e58d3000 	str	r3, [sp]
    e9d0:	e3500000 	cmp	r0, #0
    e9d4:	0affffad 	beq	e890 <CString::Replace(char const*, char const*)+0x14>
    e9d8:	eb000bc7 	bl	118fc <operator delete[](void*)>
    e9dc:	e1a00007 	mov	r0, r7
    e9e0:	e28dd010 	add	sp, sp, #16
    e9e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e9e8:	00017d90 	.word	0x00017d90

0000e9ec <CString::ReserveSpace(unsigned int)>:
    e9ec:	e3510000 	cmp	r1, #0
    e9f0:	012fff1e 	bxeq	lr
    e9f4:	eafffeb6 	b	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000e9f8 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    e9f8:	e1510002 	cmp	r1, r2
    e9fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ea00:	e1a06001 	mov	r6, r1
    ea04:	e1a07002 	mov	r7, r2
    ea08:	e1a0a000 	mov	sl, r0
    ea0c:	e1a08003 	mov	r8, r3
    ea10:	23a05001 	movcs	r5, #1
    ea14:	3a000024 	bcc	eaac <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xb4>
    ea18:	e0050597 	mul	r5, r7, r5
    ea1c:	e1a00006 	mov	r0, r6
    ea20:	e1a01005 	mov	r1, r5
    ea24:	eb0018a3 	bl	14cb8 <__udivsi3>
    ea28:	e1500007 	cmp	r0, r7
    ea2c:	e1a04000 	mov	r4, r0
    ea30:	2afffff8 	bcs	ea18 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
    ea34:	e3580000 	cmp	r8, #0
    ea38:	13a09037 	movne	r9, #55	; 0x37
    ea3c:	03a09057 	moveq	r9, #87	; 0x57
    ea40:	e1a0800a 	mov	r8, sl
    ea44:	ea000004 	b	ea5c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x64>
    ea48:	e1a01000 	mov	r1, r0
    ea4c:	e1a00006 	mov	r0, r6
    ea50:	e1a05001 	mov	r5, r1
    ea54:	eb001897 	bl	14cb8 <__udivsi3>
    ea58:	e1a04000 	mov	r4, r0
    ea5c:	e1a00006 	mov	r0, r6
    ea60:	e1a01005 	mov	r1, r5
    ea64:	eb00190e 	bl	14ea4 <__aeabi_uidivmod>
    ea68:	e3540009 	cmp	r4, #9
    ea6c:	e6ef4074 	uxtb	r4, r4
    ea70:	e2843030 	add	r3, r4, #48	; 0x30
    ea74:	80844009 	addhi	r4, r4, r9
    ea78:	96af4073 	sxtbls	r4, r3
    ea7c:	86af4074 	sxtbhi	r4, r4
    ea80:	e1a06001 	mov	r6, r1
    ea84:	e4c84001 	strb	r4, [r8], #1
    ea88:	e1a01007 	mov	r1, r7
    ea8c:	e1a00005 	mov	r0, r5
    ea90:	eb001888 	bl	14cb8 <__udivsi3>
    ea94:	e1550007 	cmp	r5, r7
    ea98:	2affffea 	bcs	ea48 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
    ea9c:	e3a03000 	mov	r3, #0
    eaa0:	e1a0000a 	mov	r0, sl
    eaa4:	e5c83000 	strb	r3, [r8]
    eaa8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    eaac:	e1a04001 	mov	r4, r1
    eab0:	e3a05001 	mov	r5, #1
    eab4:	eaffffde 	b	ea34 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

0000eab8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
    eab8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eabc:	e3a07000 	mov	r7, #0
    eac0:	e24dd01c 	sub	sp, sp, #28
    eac4:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
    eac8:	e1570003 	cmp	r7, r3
    eacc:	01510002 	cmpeq	r1, r2
    ead0:	e1cd20f0 	strd	r2, [sp]
    ead4:	e1a06001 	mov	r6, r1
    ead8:	e58d0014 	str	r0, [sp, #20]
    eadc:	e5dda044 	ldrb	sl, [sp, #68]	; 0x44
    eae0:	8a000042 	bhi	ebf0 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x138>
    eae4:	e3a04001 	mov	r4, #1
    eae8:	e3a05000 	mov	r5, #0
    eaec:	e58da008 	str	sl, [sp, #8]
    eaf0:	e1cda0d0 	ldrd	sl, [sp]
    eaf4:	e0030794 	mul	r3, r4, r7
    eaf8:	e0233596 	mla	r3, r6, r5, r3
    eafc:	e0854694 	umull	r4, r5, r4, r6
    eb00:	e0835005 	add	r5, r3, r5
    eb04:	e1a02004 	mov	r2, r4
    eb08:	e1a03005 	mov	r3, r5
    eb0c:	e1a0000a 	mov	r0, sl
    eb10:	e1a0100b 	mov	r1, fp
    eb14:	eb0019b0 	bl	151dc <__aeabi_uldivmod>
    eb18:	e1570001 	cmp	r7, r1
    eb1c:	01560000 	cmpeq	r6, r0
    eb20:	e1a08000 	mov	r8, r0
    eb24:	e1a09001 	mov	r9, r1
    eb28:	9afffff1 	bls	eaf4 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x3c>
    eb2c:	e59da008 	ldr	sl, [sp, #8]
    eb30:	e35a0000 	cmp	sl, #0
    eb34:	13a03037 	movne	r3, #55	; 0x37
    eb38:	03a03057 	moveq	r3, #87	; 0x57
    eb3c:	e58d3010 	str	r3, [sp, #16]
    eb40:	e59d3014 	ldr	r3, [sp, #20]
    eb44:	e1cd60f8 	strd	r6, [sp, #8]
    eb48:	e1a0b003 	mov	fp, r3
    eb4c:	ea000007 	b	eb70 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xb8>
    eb50:	e1a02000 	mov	r2, r0
    eb54:	e1a03001 	mov	r3, r1
    eb58:	e1cd00d0 	ldrd	r0, [sp]
    eb5c:	eb00199e 	bl	151dc <__aeabi_uldivmod>
    eb60:	e1a0400a 	mov	r4, sl
    eb64:	e1a08000 	mov	r8, r0
    eb68:	e1a09001 	mov	r9, r1
    eb6c:	e1a05007 	mov	r5, r7
    eb70:	e1cd00d0 	ldrd	r0, [sp]
    eb74:	e1a02004 	mov	r2, r4
    eb78:	e1a03005 	mov	r3, r5
    eb7c:	eb001996 	bl	151dc <__aeabi_uldivmod>
    eb80:	e3590000 	cmp	r9, #0
    eb84:	03580009 	cmpeq	r8, #9
    eb88:	e6ef8078 	uxtb	r8, r8
    eb8c:	e1cd20f0 	strd	r2, [sp]
    eb90:	e2883030 	add	r3, r8, #48	; 0x30
    eb94:	859d3010 	ldrhi	r3, [sp, #16]
    eb98:	96af8073 	sxtbls	r8, r3
    eb9c:	80888003 	addhi	r8, r8, r3
    eba0:	e1a0300b 	mov	r3, fp
    eba4:	86af8078 	sxtbhi	r8, r8
    eba8:	e4c38001 	strb	r8, [r3], #1
    ebac:	e1a0b003 	mov	fp, r3
    ebb0:	e1cd80d8 	ldrd	r8, [sp, #8]
    ebb4:	e1a00004 	mov	r0, r4
    ebb8:	e1a02008 	mov	r2, r8
    ebbc:	e1a03009 	mov	r3, r9
    ebc0:	e1a01005 	mov	r1, r5
    ebc4:	eb001984 	bl	151dc <__aeabi_uldivmod>
    ebc8:	e1590005 	cmp	r9, r5
    ebcc:	01580004 	cmpeq	r8, r4
    ebd0:	e1a0a000 	mov	sl, r0
    ebd4:	e1a07001 	mov	r7, r1
    ebd8:	9affffdc 	bls	eb50 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x98>
    ebdc:	e3a03000 	mov	r3, #0
    ebe0:	e59d0014 	ldr	r0, [sp, #20]
    ebe4:	e5cb3000 	strb	r3, [fp]
    ebe8:	e28dd01c 	add	sp, sp, #28
    ebec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebf0:	e1a08002 	mov	r8, r2
    ebf4:	e1a09003 	mov	r9, r3
    ebf8:	e3a04001 	mov	r4, #1
    ebfc:	e3a05000 	mov	r5, #0
    ec00:	eaffffca 	b	eb30 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x78>

0000ec04 <CString::ftoa(char*, double, unsigned int)>:
    ec04:	eeb50bc0 	vcmpe.f64	d0, #0.0
    ec08:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    ec0c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec10:	ed9f7b9a 	vldr	d7, [pc, #616]	; ee80 <CString::ftoa(char*, double, unsigned int)+0x27c>
    ec14:	ed2d8b02 	vpush	{d8}
    ec18:	eeb08b40 	vmov.f64	d8, d0
    ec1c:	4eb18b40 	vnegmi.f64	d8, d0
    ec20:	43a0302d 	movmi	r3, #45	; 0x2d
    ec24:	e1a08000 	mov	r8, r0
    ec28:	eeb48bc7 	vcmpe.f64	d8, d7
    ec2c:	44c83001 	strbmi	r3, [r8], #1
    ec30:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    ec34:	e24dd01c 	sub	sp, sp, #28
    ec38:	e1a09000 	mov	r9, r0
    ec3c:	e58d1004 	str	r1, [sp, #4]
    ec40:	ca00007e 	bgt	ee40 <CString::ftoa(char*, double, unsigned int)+0x23c>
    ec44:	eefc7bc8 	vcvt.u32.f64	s15, d8
    ec48:	ee176a90 	vmov	r6, s15
    ec4c:	e3560009 	cmp	r6, #9
    ec50:	83a0b001 	movhi	fp, #1
    ec54:	9a000080 	bls	ee5c <CString::ftoa(char*, double, unsigned int)+0x258>
    ec58:	e08bb10b 	add	fp, fp, fp, lsl #2
    ec5c:	e1a0b08b 	lsl	fp, fp, #1
    ec60:	e1a0100b 	mov	r1, fp
    ec64:	e1a00006 	mov	r0, r6
    ec68:	eb001812 	bl	14cb8 <__udivsi3>
    ec6c:	e3500009 	cmp	r0, #9
    ec70:	e1a04000 	mov	r4, r0
    ec74:	8afffff7 	bhi	ec58 <CString::ftoa(char*, double, unsigned int)+0x54>
    ec78:	e1a05008 	mov	r5, r8
    ec7c:	e1a0a006 	mov	sl, r6
    ec80:	e59f7208 	ldr	r7, [pc, #520]	; ee90 <CString::ftoa(char*, double, unsigned int)+0x28c>
    ec84:	ea000003 	b	ec98 <CString::ftoa(char*, double, unsigned int)+0x94>
    ec88:	e1a0000a 	mov	r0, sl
    ec8c:	e1a0b001 	mov	fp, r1
    ec90:	eb001808 	bl	14cb8 <__udivsi3>
    ec94:	e1a04000 	mov	r4, r0
    ec98:	e1a0000a 	mov	r0, sl
    ec9c:	e1a0100b 	mov	r1, fp
    eca0:	eb00187f 	bl	14ea4 <__aeabi_uidivmod>
    eca4:	e1a0a001 	mov	sl, r1
    eca8:	e0813b97 	umull	r3, r1, r7, fp
    ecac:	e3540009 	cmp	r4, #9
    ecb0:	e6ef4074 	uxtb	r4, r4
    ecb4:	e2842030 	add	r2, r4, #48	; 0x30
    ecb8:	82844057 	addhi	r4, r4, #87	; 0x57
    ecbc:	96af4072 	sxtbls	r4, r2
    ecc0:	86af4074 	sxtbhi	r4, r4
    ecc4:	e35b0009 	cmp	fp, #9
    ecc8:	e1a011a1 	lsr	r1, r1, #3
    eccc:	e4c54001 	strb	r4, [r5], #1
    ecd0:	8affffec 	bhi	ec88 <CString::ftoa(char*, double, unsigned int)+0x84>
    ecd4:	e3a03000 	mov	r3, #0
    ecd8:	e59d4004 	ldr	r4, [sp, #4]
    ecdc:	e5c53000 	strb	r3, [r5]
    ece0:	e1540003 	cmp	r4, r3
    ece4:	1a000003 	bne	ecf8 <CString::ftoa(char*, double, unsigned int)+0xf4>
    ece8:	e1a00009 	mov	r0, r9
    ecec:	e28dd01c 	add	sp, sp, #28
    ecf0:	ecbd8b02 	vpop	{d8}
    ecf4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecf8:	e1a00008 	mov	r0, r8
    ecfc:	eb0007ce 	bl	10c3c <strlen>
    ed00:	e3a0302e 	mov	r3, #46	; 0x2e
    ed04:	e3540009 	cmp	r4, #9
    ed08:	e0881000 	add	r1, r8, r0
    ed0c:	e7c83000 	strb	r3, [r8, r0]
    ed10:	31a08004 	movcc	r8, r4
    ed14:	23a08009 	movcs	r8, #9
    ed18:	e3540001 	cmp	r4, #1
    ed1c:	e58d1004 	str	r1, [sp, #4]
    ed20:	e281a001 	add	sl, r1, #1
    ed24:	9a000052 	bls	ee74 <CString::ftoa(char*, double, unsigned int)+0x270>
    ed28:	e3a02002 	mov	r2, #2
    ed2c:	e3a0300a 	mov	r3, #10
    ed30:	e2822001 	add	r2, r2, #1
    ed34:	e0833103 	add	r3, r3, r3, lsl #2
    ed38:	e1520008 	cmp	r2, r8
    ed3c:	e1a03083 	lsl	r3, r3, #1
    ed40:	9afffffa 	bls	ed30 <CString::ftoa(char*, double, unsigned int)+0x12c>
    ed44:	ee073a90 	vmov	s15, r3
    ed48:	eeb87b67 	vcvt.f64.u32	d7, s15
    ed4c:	ee066a90 	vmov	s13, r6
    ed50:	eeb86b66 	vcvt.f64.u32	d6, s13
    ed54:	ee386b46 	vsub.f64	d6, d8, d6
    ed58:	ee267b07 	vmul.f64	d7, d6, d7
    ed5c:	eefc7bc7 	vcvt.u32.f64	s15, d7
    ed60:	ee177a90 	vmov	r7, s15
    ed64:	e3570009 	cmp	r7, #9
    ed68:	83a0b001 	movhi	fp, #1
    ed6c:	9a00003d 	bls	ee68 <CString::ftoa(char*, double, unsigned int)+0x264>
    ed70:	e08bb10b 	add	fp, fp, fp, lsl #2
    ed74:	e1a0b08b 	lsl	fp, fp, #1
    ed78:	e1a0100b 	mov	r1, fp
    ed7c:	e1a00007 	mov	r0, r7
    ed80:	eb0017cc 	bl	14cb8 <__udivsi3>
    ed84:	e3500009 	cmp	r0, #9
    ed88:	e1a04000 	mov	r4, r0
    ed8c:	8afffff7 	bhi	ed70 <CString::ftoa(char*, double, unsigned int)+0x16c>
    ed90:	e28d500c 	add	r5, sp, #12
    ed94:	e59f60f4 	ldr	r6, [pc, #244]	; ee90 <CString::ftoa(char*, double, unsigned int)+0x28c>
    ed98:	ea000003 	b	edac <CString::ftoa(char*, double, unsigned int)+0x1a8>
    ed9c:	e1a00007 	mov	r0, r7
    eda0:	e1a0b001 	mov	fp, r1
    eda4:	eb0017c3 	bl	14cb8 <__udivsi3>
    eda8:	e1a04000 	mov	r4, r0
    edac:	e1a00007 	mov	r0, r7
    edb0:	e1a0100b 	mov	r1, fp
    edb4:	eb00183a 	bl	14ea4 <__aeabi_uidivmod>
    edb8:	e1a07001 	mov	r7, r1
    edbc:	e0813b96 	umull	r3, r1, r6, fp
    edc0:	e3540009 	cmp	r4, #9
    edc4:	e6ef4074 	uxtb	r4, r4
    edc8:	e2842030 	add	r2, r4, #48	; 0x30
    edcc:	82844057 	addhi	r4, r4, #87	; 0x57
    edd0:	96af4072 	sxtbls	r4, r2
    edd4:	86af4074 	sxtbhi	r4, r4
    edd8:	e35b0009 	cmp	fp, #9
    eddc:	e1a011a1 	lsr	r1, r1, #3
    ede0:	e4c54001 	strb	r4, [r5], #1
    ede4:	8affffec 	bhi	ed9c <CString::ftoa(char*, double, unsigned int)+0x198>
    ede8:	e3a03000 	mov	r3, #0
    edec:	e28d000c 	add	r0, sp, #12
    edf0:	e5c53000 	strb	r3, [r5]
    edf4:	eb000790 	bl	10c3c <strlen>
    edf8:	e0580000 	subs	r0, r8, r0
    edfc:	0a000008 	beq	ee24 <CString::ftoa(char*, double, unsigned int)+0x220>
    ee00:	e1a0300a 	mov	r3, sl
    ee04:	e3a02030 	mov	r2, #48	; 0x30
    ee08:	e59dc004 	ldr	ip, [sp, #4]
    ee0c:	e2801001 	add	r1, r0, #1
    ee10:	e08c7001 	add	r7, ip, r1
    ee14:	e4c32001 	strb	r2, [r3], #1
    ee18:	e1530007 	cmp	r3, r7
    ee1c:	1afffffc 	bne	ee14 <CString::ftoa(char*, double, unsigned int)+0x210>
    ee20:	e08aa000 	add	sl, sl, r0
    ee24:	e28d100c 	add	r1, sp, #12
    ee28:	e1a0000a 	mov	r0, sl
    ee2c:	eb000815 	bl	10e88 <strcpy>
    ee30:	e1a00009 	mov	r0, r9
    ee34:	e28dd01c 	add	sp, sp, #28
    ee38:	ecbd8b02 	vpop	{d8}
    ee3c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee40:	e1a00008 	mov	r0, r8
    ee44:	e59f1048 	ldr	r1, [pc, #72]	; ee94 <CString::ftoa(char*, double, unsigned int)+0x290>
    ee48:	eb00080e 	bl	10e88 <strcpy>
    ee4c:	e1a00009 	mov	r0, r9
    ee50:	e28dd01c 	add	sp, sp, #28
    ee54:	ecbd8b02 	vpop	{d8}
    ee58:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee5c:	ee174a90 	vmov	r4, s15
    ee60:	e3a0b001 	mov	fp, #1
    ee64:	eaffff83 	b	ec78 <CString::ftoa(char*, double, unsigned int)+0x74>
    ee68:	ee174a90 	vmov	r4, s15
    ee6c:	e3a0b001 	mov	fp, #1
    ee70:	eaffffc6 	b	ed90 <CString::ftoa(char*, double, unsigned int)+0x18c>
    ee74:	ed9f7b03 	vldr	d7, [pc, #12]	; ee88 <CString::ftoa(char*, double, unsigned int)+0x284>
    ee78:	eaffffb3 	b	ed4c <CString::ftoa(char*, double, unsigned int)+0x148>
    ee7c:	e320f000 	nop	{0}
    ee80:	ffe00000 	.word	0xffe00000
    ee84:	41efffff 	.word	0x41efffff
    ee88:	00000000 	.word	0x00000000
    ee8c:	40240000 	.word	0x40240000
    ee90:	cccccccd 	.word	0xcccccccd
    ee94:	00017d98 	.word	0x00017d98

0000ee98 <CString::FormatV(char const*, std::__va_list)>:
    ee98:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee9c:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    eea0:	e58d000c 	str	r0, [sp, #12]
    eea4:	e5900004 	ldr	r0, [r0, #4]
    eea8:	e1a09001 	mov	r9, r1
    eeac:	e3500000 	cmp	r0, #0
    eeb0:	e58d2010 	str	r2, [sp, #16]
    eeb4:	0a000000 	beq	eebc <CString::FormatV(char const*, std::__va_list)+0x24>
    eeb8:	eb000a8f 	bl	118fc <operator delete[](void*)>
    eebc:	e3a00040 	mov	r0, #64	; 0x40
    eec0:	e59d400c 	ldr	r4, [sp, #12]
    eec4:	e5840008 	str	r0, [r4, #8]
    eec8:	eb000a84 	bl	118e0 <operator new[](unsigned int)>
    eecc:	e5840004 	str	r0, [r4, #4]
    eed0:	e584000c 	str	r0, [r4, #12]
    eed4:	e1d940d0 	ldrsb	r4, [r9]
    eed8:	e3540000 	cmp	r4, #0
    eedc:	0a000074 	beq	f0b4 <CString::FormatV(char const*, std::__va_list)+0x21c>
    eee0:	e3540025 	cmp	r4, #37	; 0x25
    eee4:	e2897001 	add	r7, r9, #1
    eee8:	1a000064 	bne	f080 <CString::FormatV(char const*, std::__va_list)+0x1e8>
    eeec:	e1d950d1 	ldrsb	r5, [r9, #1]
    eef0:	e3550025 	cmp	r5, #37	; 0x25
    eef4:	0a000073 	beq	f0c8 <CString::FormatV(char const*, std::__va_list)+0x230>
    eef8:	e3550023 	cmp	r5, #35	; 0x23
    eefc:	01d950d2 	ldrsbeq	r5, [r9, #2]
    ef00:	02897002 	addeq	r7, r9, #2
    ef04:	03a02001 	moveq	r2, #1
    ef08:	13a02000 	movne	r2, #0
    ef0c:	e355002d 	cmp	r5, #45	; 0x2d
    ef10:	13a03000 	movne	r3, #0
    ef14:	03a01001 	moveq	r1, #1
    ef18:	01d750d1 	ldrsbeq	r5, [r7, #1]
    ef1c:	e2879001 	add	r9, r7, #1
    ef20:	02873002 	addeq	r3, r7, #2
    ef24:	01a07009 	moveq	r7, r9
    ef28:	158d3014 	strne	r3, [sp, #20]
    ef2c:	01a09003 	moveq	r9, r3
    ef30:	058d1014 	streq	r1, [sp, #20]
    ef34:	e3550030 	cmp	r5, #48	; 0x30
    ef38:	03a03001 	moveq	r3, #1
    ef3c:	13a03000 	movne	r3, #0
    ef40:	01d750d1 	ldrsbeq	r5, [r7, #1]
    ef44:	058d301c 	streq	r3, [sp, #28]
    ef48:	01a07009 	moveq	r7, r9
    ef4c:	158d301c 	strne	r3, [sp, #28]
    ef50:	00899003 	addeq	r9, r9, r3
    ef54:	e2453030 	sub	r3, r5, #48	; 0x30
    ef58:	e6ef3073 	uxtb	r3, r3
    ef5c:	e3530009 	cmp	r3, #9
    ef60:	8a000220 	bhi	f7e8 <CString::FormatV(char const*, std::__va_list)+0x950>
    ef64:	e3a04000 	mov	r4, #0
    ef68:	ea000000 	b	ef70 <CString::FormatV(char const*, std::__va_list)+0xd8>
    ef6c:	e1a07006 	mov	r7, r6
    ef70:	e0844104 	add	r4, r4, r4, lsl #2
    ef74:	e0854084 	add	r4, r5, r4, lsl #1
    ef78:	e1d750d1 	ldrsb	r5, [r7, #1]
    ef7c:	e2444030 	sub	r4, r4, #48	; 0x30
    ef80:	e2453030 	sub	r3, r5, #48	; 0x30
    ef84:	e6ef3073 	uxtb	r3, r3
    ef88:	e3530009 	cmp	r3, #9
    ef8c:	e2876001 	add	r6, r7, #1
    ef90:	9afffff5 	bls	ef6c <CString::FormatV(char const*, std::__va_list)+0xd4>
    ef94:	e2879002 	add	r9, r7, #2
    ef98:	e355002e 	cmp	r5, #46	; 0x2e
    ef9c:	0a000054 	beq	f0f4 <CString::FormatV(char const*, std::__va_list)+0x25c>
    efa0:	e3a01006 	mov	r1, #6
    efa4:	e1d650d0 	ldrsb	r5, [r6]
    efa8:	e355006c 	cmp	r5, #108	; 0x6c
    efac:	13a03000 	movne	r3, #0
    efb0:	158d3008 	strne	r3, [sp, #8]
    efb4:	1a00000c 	bne	efec <CString::FormatV(char const*, std::__va_list)+0x154>
    efb8:	e1d650d1 	ldrsb	r5, [r6, #1]
    efbc:	e2893001 	add	r3, r9, #1
    efc0:	e355006c 	cmp	r5, #108	; 0x6c
    efc4:	02890002 	addeq	r0, r9, #2
    efc8:	01a09003 	moveq	r9, r3
    efcc:	03a03001 	moveq	r3, #1
    efd0:	058d3008 	streq	r3, [sp, #8]
    efd4:	01a03000 	moveq	r3, r0
    efd8:	13a00000 	movne	r0, #0
    efdc:	01d650d2 	ldrsbeq	r5, [r6, #2]
    efe0:	e1a06009 	mov	r6, r9
    efe4:	e1a09003 	mov	r9, r3
    efe8:	158d0008 	strne	r0, [sp, #8]
    efec:	e2453058 	sub	r3, r5, #88	; 0x58
    eff0:	e3530020 	cmp	r3, #32
    eff4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    eff8:	ea0001d2 	b	f748 <CString::FormatV(char const*, std::__va_list)+0x8b0>
    effc:	0000f488 	.word	0x0000f488
    f000:	0000f748 	.word	0x0000f748
    f004:	0000f748 	.word	0x0000f748
    f008:	0000f748 	.word	0x0000f748
    f00c:	0000f748 	.word	0x0000f748
    f010:	0000f748 	.word	0x0000f748
    f014:	0000f748 	.word	0x0000f748
    f018:	0000f748 	.word	0x0000f748
    f01c:	0000f748 	.word	0x0000f748
    f020:	0000f748 	.word	0x0000f748
    f024:	0000f748 	.word	0x0000f748
    f028:	0000f43c 	.word	0x0000f43c
    f02c:	0000f540 	.word	0x0000f540
    f030:	0000f748 	.word	0x0000f748
    f034:	0000f4b8 	.word	0x0000f4b8
    f038:	0000f748 	.word	0x0000f748
    f03c:	0000f748 	.word	0x0000f748
    f040:	0000f540 	.word	0x0000f540
    f044:	0000f748 	.word	0x0000f748
    f048:	0000f748 	.word	0x0000f748
    f04c:	0000f748 	.word	0x0000f748
    f050:	0000f748 	.word	0x0000f748
    f054:	0000f748 	.word	0x0000f748
    f058:	0000f33c 	.word	0x0000f33c
    f05c:	0000f488 	.word	0x0000f488
    f060:	0000f748 	.word	0x0000f748
    f064:	0000f748 	.word	0x0000f748
    f068:	0000f300 	.word	0x0000f300
    f06c:	0000f748 	.word	0x0000f748
    f070:	0000f14c 	.word	0x0000f14c
    f074:	0000f748 	.word	0x0000f748
    f078:	0000f748 	.word	0x0000f748
    f07c:	0000f488 	.word	0x0000f488
    f080:	e1a09007 	mov	r9, r7
    f084:	e59d500c 	ldr	r5, [sp, #12]
    f088:	e3a01001 	mov	r1, #1
    f08c:	e1a00005 	mov	r0, r5
    f090:	ebfffd0f 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f094:	e595300c 	ldr	r3, [r5, #12]
    f098:	e1a01005 	mov	r1, r5
    f09c:	e2832001 	add	r2, r3, #1
    f0a0:	e585200c 	str	r2, [r5, #12]
    f0a4:	e5c34000 	strb	r4, [r3]
    f0a8:	e1d940d0 	ldrsb	r4, [r9]
    f0ac:	e3540000 	cmp	r4, #0
    f0b0:	1affff8a 	bne	eee0 <CString::FormatV(char const*, std::__va_list)+0x48>
    f0b4:	e59d300c 	ldr	r3, [sp, #12]
    f0b8:	e593300c 	ldr	r3, [r3, #12]
    f0bc:	e5c34000 	strb	r4, [r3]
    f0c0:	e28dd05c 	add	sp, sp, #92	; 0x5c
    f0c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0c8:	e59d400c 	ldr	r4, [sp, #12]
    f0cc:	e3a01001 	mov	r1, #1
    f0d0:	e1a00004 	mov	r0, r4
    f0d4:	ebfffcfe 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f0d8:	e594300c 	ldr	r3, [r4, #12]
    f0dc:	e1a01004 	mov	r1, r4
    f0e0:	e2832001 	add	r2, r3, #1
    f0e4:	e584200c 	str	r2, [r4, #12]
    f0e8:	e2899002 	add	r9, r9, #2
    f0ec:	e5c35000 	strb	r5, [r3]
    f0f0:	eaffff77 	b	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    f0f4:	e1d650d1 	ldrsb	r5, [r6, #1]
    f0f8:	e2453030 	sub	r3, r5, #48	; 0x30
    f0fc:	e6ef3073 	uxtb	r3, r3
    f100:	e3530009 	cmp	r3, #9
    f104:	81a06009 	movhi	r6, r9
    f108:	83a01000 	movhi	r1, #0
    f10c:	82899001 	addhi	r9, r9, #1
    f110:	8affffa4 	bhi	efa8 <CString::FormatV(char const*, std::__va_list)+0x110>
    f114:	e3a01000 	mov	r1, #0
    f118:	ea000000 	b	f120 <CString::FormatV(char const*, std::__va_list)+0x288>
    f11c:	e1a09006 	mov	r9, r6
    f120:	e0811101 	add	r1, r1, r1, lsl #2
    f124:	e0851081 	add	r1, r5, r1, lsl #1
    f128:	e1d950d1 	ldrsb	r5, [r9, #1]
    f12c:	e2411030 	sub	r1, r1, #48	; 0x30
    f130:	e2453030 	sub	r3, r5, #48	; 0x30
    f134:	e6ef3073 	uxtb	r3, r3
    f138:	e3530009 	cmp	r3, #9
    f13c:	e2896001 	add	r6, r9, #1
    f140:	9afffff5 	bls	f11c <CString::FormatV(char const*, std::__va_list)+0x284>
    f144:	e2899002 	add	r9, r9, #2
    f148:	eaffff96 	b	efa8 <CString::FormatV(char const*, std::__va_list)+0x110>
    f14c:	e3a0700a 	mov	r7, #10
    f150:	e59d3008 	ldr	r3, [sp, #8]
    f154:	e3530000 	cmp	r3, #0
    f158:	0a000088 	beq	f380 <CString::FormatV(char const*, std::__va_list)+0x4e8>
    f15c:	e3a01000 	mov	r1, #0
    f160:	e1a00007 	mov	r0, r7
    f164:	e59d3010 	ldr	r3, [sp, #16]
    f168:	e1a02000 	mov	r2, r0
    f16c:	e2833007 	add	r3, r3, #7
    f170:	e3c33007 	bic	r3, r3, #7
    f174:	e0c360d8 	ldrd	r6, [r3], #8
    f178:	e58d3010 	str	r3, [sp, #16]
    f17c:	e1a03001 	mov	r3, r1
    f180:	e1530007 	cmp	r3, r7
    f184:	01520006 	cmpeq	r2, r6
    f188:	e1cd00f0 	strd	r0, [sp]
    f18c:	e1cd62f0 	strd	r6, [sp, #32]
    f190:	8a000248 	bhi	fab8 <CString::FormatV(char const*, std::__va_list)+0xc20>
    f194:	e58d4008 	str	r4, [sp, #8]
    f198:	e58d5018 	str	r5, [sp, #24]
    f19c:	e58d9028 	str	r9, [sp, #40]	; 0x28
    f1a0:	e3a0a001 	mov	sl, #1
    f1a4:	e3a0b000 	mov	fp, #0
    f1a8:	e1a04006 	mov	r4, r6
    f1ac:	e1a05007 	mov	r5, r7
    f1b0:	e1a08002 	mov	r8, r2
    f1b4:	e1a09003 	mov	r9, r3
    f1b8:	e003099a 	mul	r3, sl, r9
    f1bc:	e0233b98 	mla	r3, r8, fp, r3
    f1c0:	e08ba89a 	umull	sl, fp, sl, r8
    f1c4:	e083b00b 	add	fp, r3, fp
    f1c8:	e1a0200a 	mov	r2, sl
    f1cc:	e1a0300b 	mov	r3, fp
    f1d0:	e1a00004 	mov	r0, r4
    f1d4:	e1a01005 	mov	r1, r5
    f1d8:	eb0017ff 	bl	151dc <__aeabi_uldivmod>
    f1dc:	e1590001 	cmp	r9, r1
    f1e0:	01580000 	cmpeq	r8, r0
    f1e4:	e1a06000 	mov	r6, r0
    f1e8:	e1a07001 	mov	r7, r1
    f1ec:	9afffff1 	bls	f1b8 <CString::FormatV(char const*, std::__va_list)+0x320>
    f1f0:	e59d4008 	ldr	r4, [sp, #8]
    f1f4:	e59d5018 	ldr	r5, [sp, #24]
    f1f8:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
    f1fc:	e3550058 	cmp	r5, #88	; 0x58
    f200:	13a02057 	movne	r2, #87	; 0x57
    f204:	03a02037 	moveq	r2, #55	; 0x37
    f208:	e28d3034 	add	r3, sp, #52	; 0x34
    f20c:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    f210:	e58d3018 	str	r3, [sp, #24]
    f214:	e1cd42d0 	ldrd	r4, [sp, #32]
    f218:	e58d2028 	str	r2, [sp, #40]	; 0x28
    f21c:	e58d3008 	str	r3, [sp, #8]
    f220:	e58d9020 	str	r9, [sp, #32]
    f224:	ea000008 	b	f24c <CString::FormatV(char const*, std::__va_list)+0x3b4>
    f228:	e1a02000 	mov	r2, r0
    f22c:	e1a03001 	mov	r3, r1
    f230:	e1a00004 	mov	r0, r4
    f234:	e1a01005 	mov	r1, r5
    f238:	eb0017e7 	bl	151dc <__aeabi_uldivmod>
    f23c:	e1a0a009 	mov	sl, r9
    f240:	e1a06000 	mov	r6, r0
    f244:	e1a07001 	mov	r7, r1
    f248:	e1a0b008 	mov	fp, r8
    f24c:	e1a00004 	mov	r0, r4
    f250:	e1a01005 	mov	r1, r5
    f254:	e1a0200a 	mov	r2, sl
    f258:	e1a0300b 	mov	r3, fp
    f25c:	eb0017de 	bl	151dc <__aeabi_uldivmod>
    f260:	e3570000 	cmp	r7, #0
    f264:	03560009 	cmpeq	r6, #9
    f268:	e6ef6076 	uxtb	r6, r6
    f26c:	e1a05003 	mov	r5, r3
    f270:	e2863030 	add	r3, r6, #48	; 0x30
    f274:	859d3028 	ldrhi	r3, [sp, #40]	; 0x28
    f278:	e59dc008 	ldr	ip, [sp, #8]
    f27c:	80866003 	addhi	r6, r6, r3
    f280:	96af6073 	sxtbls	r6, r3
    f284:	86af6076 	sxtbhi	r6, r6
    f288:	e4cc6001 	strb	r6, [ip], #1
    f28c:	e1a04002 	mov	r4, r2
    f290:	e1cd20d0 	ldrd	r2, [sp]
    f294:	e1a0000a 	mov	r0, sl
    f298:	e1a0100b 	mov	r1, fp
    f29c:	e58dc008 	str	ip, [sp, #8]
    f2a0:	eb0017cd 	bl	151dc <__aeabi_uldivmod>
    f2a4:	e1cd20d0 	ldrd	r2, [sp]
    f2a8:	e153000b 	cmp	r3, fp
    f2ac:	0152000a 	cmpeq	r2, sl
    f2b0:	e1a09000 	mov	r9, r0
    f2b4:	e1a08001 	mov	r8, r1
    f2b8:	9affffda 	bls	f228 <CString::FormatV(char const*, std::__va_list)+0x390>
    f2bc:	e3a03000 	mov	r3, #0
    f2c0:	e59d2008 	ldr	r2, [sp, #8]
    f2c4:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
    f2c8:	e59d9020 	ldr	r9, [sp, #32]
    f2cc:	e5c23000 	strb	r3, [r2]
    f2d0:	e59d0018 	ldr	r0, [sp, #24]
    f2d4:	eb000658 	bl	10c3c <strlen>
    f2d8:	e59d3014 	ldr	r3, [sp, #20]
    f2dc:	e1a05000 	mov	r5, r0
    f2e0:	e3530000 	cmp	r3, #0
    f2e4:	1a00012a 	bne	f794 <CString::FormatV(char const*, std::__va_list)+0x8fc>
    f2e8:	e1500004 	cmp	r0, r4
    f2ec:	3a000140 	bcc	f7f4 <CString::FormatV(char const*, std::__va_list)+0x95c>
    f2f0:	e59d1018 	ldr	r1, [sp, #24]
    f2f4:	e59d000c 	ldr	r0, [sp, #12]
    f2f8:	ebfffd4e 	bl	e838 <CString::PutString(char const*)>
    f2fc:	eafffef4 	b	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    f300:	e59d5010 	ldr	r5, [sp, #16]
    f304:	e4957004 	ldr	r7, [r5], #4
    f308:	e1a00007 	mov	r0, r7
    f30c:	eb00064a 	bl	10c3c <strlen>
    f310:	e59d3014 	ldr	r3, [sp, #20]
    f314:	e1a06000 	mov	r6, r0
    f318:	e3530000 	cmp	r3, #0
    f31c:	1a0001d0 	bne	fa64 <CString::FormatV(char const*, std::__va_list)+0xbcc>
    f320:	e1500004 	cmp	r0, r4
    f324:	3a0001f9 	bcc	fb10 <CString::FormatV(char const*, std::__va_list)+0xc78>
    f328:	e1a01007 	mov	r1, r7
    f32c:	e59d000c 	ldr	r0, [sp, #12]
    f330:	e58d5010 	str	r5, [sp, #16]
    f334:	ebfffd3f 	bl	e838 <CString::PutString(char const*)>
    f338:	eafffee5 	b	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    f33c:	e3520000 	cmp	r2, #0
    f340:	03a07008 	moveq	r7, #8
    f344:	0affff81 	beq	f150 <CString::FormatV(char const*, std::__va_list)+0x2b8>
    f348:	e59d500c 	ldr	r5, [sp, #12]
    f34c:	e3a01001 	mov	r1, #1
    f350:	e1a00005 	mov	r0, r5
    f354:	ebfffc5e 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f358:	e3a02030 	mov	r2, #48	; 0x30
    f35c:	e595300c 	ldr	r3, [r5, #12]
    f360:	e3a07008 	mov	r7, #8
    f364:	e2831001 	add	r1, r3, #1
    f368:	e585100c 	str	r1, [r5, #12]
    f36c:	e5c32000 	strb	r2, [r3]
    f370:	e59d3008 	ldr	r3, [sp, #8]
    f374:	e1d650d0 	ldrsb	r5, [r6]
    f378:	e3530000 	cmp	r3, #0
    f37c:	1affff76 	bne	f15c <CString::FormatV(char const*, std::__va_list)+0x2c4>
    f380:	e59db010 	ldr	fp, [sp, #16]
    f384:	e49b8004 	ldr	r8, [fp], #4
    f388:	e1570008 	cmp	r7, r8
    f38c:	8a0001cd 	bhi	fac8 <CString::FormatV(char const*, std::__va_list)+0xc30>
    f390:	e3a06001 	mov	r6, #1
    f394:	e0060697 	mul	r6, r7, r6
    f398:	e1a00008 	mov	r0, r8
    f39c:	e1a01006 	mov	r1, r6
    f3a0:	eb001644 	bl	14cb8 <__udivsi3>
    f3a4:	e1570000 	cmp	r7, r0
    f3a8:	9afffff9 	bls	f394 <CString::FormatV(char const*, std::__va_list)+0x4fc>
    f3ac:	e1a0a000 	mov	sl, r0
    f3b0:	e3550058 	cmp	r5, #88	; 0x58
    f3b4:	13a03057 	movne	r3, #87	; 0x57
    f3b8:	03a03037 	moveq	r3, #55	; 0x37
    f3bc:	e28d5034 	add	r5, sp, #52	; 0x34
    f3c0:	e58d4008 	str	r4, [sp, #8]
    f3c4:	e58d5018 	str	r5, [sp, #24]
    f3c8:	e1a0400a 	mov	r4, sl
    f3cc:	e1a0a003 	mov	sl, r3
    f3d0:	ea000004 	b	f3e8 <CString::FormatV(char const*, std::__va_list)+0x550>
    f3d4:	e1a01000 	mov	r1, r0
    f3d8:	e1a00008 	mov	r0, r8
    f3dc:	e1a06001 	mov	r6, r1
    f3e0:	eb001634 	bl	14cb8 <__udivsi3>
    f3e4:	e1a04000 	mov	r4, r0
    f3e8:	e1a00008 	mov	r0, r8
    f3ec:	e1a01006 	mov	r1, r6
    f3f0:	eb0016ab 	bl	14ea4 <__aeabi_uidivmod>
    f3f4:	e6ef3074 	uxtb	r3, r4
    f3f8:	e3540009 	cmp	r4, #9
    f3fc:	e2832030 	add	r2, r3, #48	; 0x30
    f400:	8083300a 	addhi	r3, r3, sl
    f404:	96af3072 	sxtbls	r3, r2
    f408:	86af3073 	sxtbhi	r3, r3
    f40c:	e1a08001 	mov	r8, r1
    f410:	e1a00006 	mov	r0, r6
    f414:	e1a01007 	mov	r1, r7
    f418:	e4c53001 	strb	r3, [r5], #1
    f41c:	eb001625 	bl	14cb8 <__udivsi3>
    f420:	e1570006 	cmp	r7, r6
    f424:	9affffea 	bls	f3d4 <CString::FormatV(char const*, std::__va_list)+0x53c>
    f428:	e3a03000 	mov	r3, #0
    f42c:	e59d4008 	ldr	r4, [sp, #8]
    f430:	e58db010 	str	fp, [sp, #16]
    f434:	e5c53000 	strb	r3, [r5]
    f438:	eaffffa4 	b	f2d0 <CString::FormatV(char const*, std::__va_list)+0x438>
    f43c:	e59d5010 	ldr	r5, [sp, #16]
    f440:	e59d3014 	ldr	r3, [sp, #20]
    f444:	e4956004 	ldr	r6, [r5], #4
    f448:	e3530000 	cmp	r3, #0
    f44c:	e6af6076 	sxtb	r6, r6
    f450:	1a000161 	bne	f9dc <CString::FormatV(char const*, std::__va_list)+0xb44>
    f454:	e3540001 	cmp	r4, #1
    f458:	8a00019d 	bhi	fad4 <CString::FormatV(char const*, std::__va_list)+0xc3c>
    f45c:	e59d400c 	ldr	r4, [sp, #12]
    f460:	e3a01001 	mov	r1, #1
    f464:	e1a00004 	mov	r0, r4
    f468:	ebfffc19 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f46c:	e594300c 	ldr	r3, [r4, #12]
    f470:	e1a01004 	mov	r1, r4
    f474:	e2832001 	add	r2, r3, #1
    f478:	e584200c 	str	r2, [r4, #12]
    f47c:	e58d5010 	str	r5, [sp, #16]
    f480:	e5c36000 	strb	r6, [r3]
    f484:	eafffe92 	b	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    f488:	e3520000 	cmp	r2, #0
    f48c:	03a07010 	moveq	r7, #16
    f490:	0affff2e 	beq	f150 <CString::FormatV(char const*, std::__va_list)+0x2b8>
    f494:	e59f3744 	ldr	r3, [pc, #1860]	; fbe0 <CString::FormatV(char const*, std::__va_list)+0xd48>
    f498:	e3550058 	cmp	r5, #88	; 0x58
    f49c:	e59f1740 	ldr	r1, [pc, #1856]	; fbe4 <CString::FormatV(char const*, std::__va_list)+0xd4c>
    f4a0:	e59d000c 	ldr	r0, [sp, #12]
    f4a4:	01a01003 	moveq	r1, r3
    f4a8:	ebfffce2 	bl	e838 <CString::PutString(char const*)>
    f4ac:	e3a07010 	mov	r7, #16
    f4b0:	e1d650d0 	ldrsb	r5, [r6]
    f4b4:	eaffff25 	b	f150 <CString::FormatV(char const*, std::__va_list)+0x2b8>
    f4b8:	e59d3010 	ldr	r3, [sp, #16]
    f4bc:	e2833007 	add	r3, r3, #7
    f4c0:	e3c32007 	bic	r2, r3, #7
    f4c4:	e28d3034 	add	r3, sp, #52	; 0x34
    f4c8:	e1a05003 	mov	r5, r3
    f4cc:	ecb20b02 	vldmia	r2!, {d0}
    f4d0:	e1a00003 	mov	r0, r3
    f4d4:	e58d3018 	str	r3, [sp, #24]
    f4d8:	e58d2010 	str	r2, [sp, #16]
    f4dc:	ebfffdc8 	bl	ec04 <CString::ftoa(char*, double, unsigned int)>
    f4e0:	e1a00005 	mov	r0, r5
    f4e4:	eb0005d4 	bl	10c3c <strlen>
    f4e8:	e59d3014 	ldr	r3, [sp, #20]
    f4ec:	e1a05000 	mov	r5, r0
    f4f0:	e3530000 	cmp	r3, #0
    f4f4:	1a000145 	bne	fa10 <CString::FormatV(char const*, std::__va_list)+0xb78>
    f4f8:	e1500004 	cmp	r0, r4
    f4fc:	2affff7b 	bcs	f2f0 <CString::FormatV(char const*, std::__va_list)+0x458>
    f500:	e59d500c 	ldr	r5, [sp, #12]
    f504:	e0444000 	sub	r4, r4, r0
    f508:	e1a01004 	mov	r1, r4
    f50c:	e1a00005 	mov	r0, r5
    f510:	ebfffbef 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f514:	e3a00020 	mov	r0, #32
    f518:	e1a01005 	mov	r1, r5
    f51c:	e2443001 	sub	r3, r4, #1
    f520:	e591200c 	ldr	r2, [r1, #12]
    f524:	e2433001 	sub	r3, r3, #1
    f528:	e282c001 	add	ip, r2, #1
    f52c:	e3730001 	cmn	r3, #1
    f530:	e581c00c 	str	ip, [r1, #12]
    f534:	e5c20000 	strb	r0, [r2]
    f538:	1afffff8 	bne	f520 <CString::FormatV(char const*, std::__va_list)+0x688>
    f53c:	eaffff6b 	b	f2f0 <CString::FormatV(char const*, std::__va_list)+0x458>
    f540:	e59d3008 	ldr	r3, [sp, #8]
    f544:	e3530000 	cmp	r3, #0
    f548:	0a0000d4 	beq	f8a0 <CString::FormatV(char const*, std::__va_list)+0xa08>
    f54c:	e59d3010 	ldr	r3, [sp, #16]
    f550:	e2833007 	add	r3, r3, #7
    f554:	e3c33007 	bic	r3, r3, #7
    f558:	e0c3a0d8 	ldrd	sl, [r3], #8
    f55c:	e35a0000 	cmp	sl, #0
    f560:	e58d3010 	str	r3, [sp, #16]
    f564:	e2db3000 	sbcs	r3, fp, #0
    f568:	a3a03000 	movge	r3, #0
    f56c:	a58d3008 	strge	r3, [sp, #8]
    f570:	aa000001 	bge	f57c <CString::FormatV(char const*, std::__va_list)+0x6e4>
    f574:	e27aa000 	rsbs	sl, sl, #0
    f578:	e2ebb000 	rsc	fp, fp, #0
    f57c:	e35a000a 	cmp	sl, #10
    f580:	e2db3000 	sbcs	r3, fp, #0
    f584:	e1a0500a 	mov	r5, sl
    f588:	e1a0800b 	mov	r8, fp
    f58c:	ba000188 	blt	fbb4 <CString::FormatV(char const*, std::__va_list)+0xd1c>
    f590:	e3a06001 	mov	r6, #1
    f594:	e3a07000 	mov	r7, #0
    f598:	e1a02107 	lsl	r2, r7, #2
    f59c:	e1a03106 	lsl	r3, r6, #2
    f5a0:	e0933006 	adds	r3, r3, r6
    f5a4:	e1822f26 	orr	r2, r2, r6, lsr #30
    f5a8:	e0a22007 	adc	r2, r2, r7
    f5ac:	e0936003 	adds	r6, r3, r3
    f5b0:	e0a27002 	adc	r7, r2, r2
    f5b4:	e1a03007 	mov	r3, r7
    f5b8:	e1a02006 	mov	r2, r6
    f5bc:	e1a0000a 	mov	r0, sl
    f5c0:	e1a0100b 	mov	r1, fp
    f5c4:	eb001704 	bl	151dc <__aeabi_uldivmod>
    f5c8:	e3510000 	cmp	r1, #0
    f5cc:	03500009 	cmpeq	r0, #9
    f5d0:	8afffff0 	bhi	f598 <CString::FormatV(char const*, std::__va_list)+0x700>
    f5d4:	e28d3034 	add	r3, sp, #52	; 0x34
    f5d8:	e58d4028 	str	r4, [sp, #40]	; 0x28
    f5dc:	e58d9020 	str	r9, [sp, #32]
    f5e0:	e58d3018 	str	r3, [sp, #24]
    f5e4:	e1a09005 	mov	r9, r5
    f5e8:	e58d3000 	str	r3, [sp]
    f5ec:	e1a04000 	mov	r4, r0
    f5f0:	e1a05001 	mov	r5, r1
    f5f4:	ea000008 	b	f61c <CString::FormatV(char const*, std::__va_list)+0x784>
    f5f8:	e1a02000 	mov	r2, r0
    f5fc:	e1a03001 	mov	r3, r1
    f600:	e1a00009 	mov	r0, r9
    f604:	e1a01008 	mov	r1, r8
    f608:	eb0016f3 	bl	151dc <__aeabi_uldivmod>
    f60c:	e1a0600b 	mov	r6, fp
    f610:	e1a04000 	mov	r4, r0
    f614:	e1a05001 	mov	r5, r1
    f618:	e1a0700a 	mov	r7, sl
    f61c:	e1a00009 	mov	r0, r9
    f620:	e1a01008 	mov	r1, r8
    f624:	e1a02006 	mov	r2, r6
    f628:	e1a03007 	mov	r3, r7
    f62c:	eb0016ea 	bl	151dc <__aeabi_uldivmod>
    f630:	e3550000 	cmp	r5, #0
    f634:	03540009 	cmpeq	r4, #9
    f638:	e6ef4074 	uxtb	r4, r4
    f63c:	e59dc000 	ldr	ip, [sp]
    f640:	e1a08003 	mov	r8, r3
    f644:	e2843030 	add	r3, r4, #48	; 0x30
    f648:	82844057 	addhi	r4, r4, #87	; 0x57
    f64c:	96af4073 	sxtbls	r4, r3
    f650:	86af4074 	sxtbhi	r4, r4
    f654:	e4cc4001 	strb	r4, [ip], #1
    f658:	e1a09002 	mov	r9, r2
    f65c:	e3a03000 	mov	r3, #0
    f660:	e3a0200a 	mov	r2, #10
    f664:	e1a00006 	mov	r0, r6
    f668:	e1a01007 	mov	r1, r7
    f66c:	e58dc000 	str	ip, [sp]
    f670:	eb0016d9 	bl	151dc <__aeabi_uldivmod>
    f674:	e3570000 	cmp	r7, #0
    f678:	03560009 	cmpeq	r6, #9
    f67c:	e1a0b000 	mov	fp, r0
    f680:	e1a0a001 	mov	sl, r1
    f684:	8affffdb 	bhi	f5f8 <CString::FormatV(char const*, std::__va_list)+0x760>
    f688:	e3a03000 	mov	r3, #0
    f68c:	e59d2000 	ldr	r2, [sp]
    f690:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
    f694:	e59d9020 	ldr	r9, [sp, #32]
    f698:	e5c23000 	strb	r3, [r2]
    f69c:	e59d0018 	ldr	r0, [sp, #24]
    f6a0:	eb000565 	bl	10c3c <strlen>
    f6a4:	e59d3008 	ldr	r3, [sp, #8]
    f6a8:	e1a05000 	mov	r5, r0
    f6ac:	e3530000 	cmp	r3, #0
    f6b0:	0a000062 	beq	f840 <CString::FormatV(char const*, std::__va_list)+0x9a8>
    f6b4:	e59d3014 	ldr	r3, [sp, #20]
    f6b8:	e2805001 	add	r5, r0, #1
    f6bc:	e3530000 	cmp	r3, #0
    f6c0:	1a0000bb 	bne	f9b4 <CString::FormatV(char const*, std::__va_list)+0xb1c>
    f6c4:	e59d301c 	ldr	r3, [sp, #28]
    f6c8:	e3530000 	cmp	r3, #0
    f6cc:	1a00011f 	bne	fb50 <CString::FormatV(char const*, std::__va_list)+0xcb8>
    f6d0:	e1540005 	cmp	r4, r5
    f6d4:	9a000011 	bls	f720 <CString::FormatV(char const*, std::__va_list)+0x888>
    f6d8:	e0444005 	sub	r4, r4, r5
    f6dc:	e59d500c 	ldr	r5, [sp, #12]
    f6e0:	e1a01004 	mov	r1, r4
    f6e4:	e1a00005 	mov	r0, r5
    f6e8:	ebfffb79 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f6ec:	e3a00020 	mov	r0, #32
    f6f0:	e1a01005 	mov	r1, r5
    f6f4:	e2443001 	sub	r3, r4, #1
    f6f8:	e591200c 	ldr	r2, [r1, #12]
    f6fc:	e2433001 	sub	r3, r3, #1
    f700:	e282c001 	add	ip, r2, #1
    f704:	e3730001 	cmn	r3, #1
    f708:	e581c00c 	str	ip, [r1, #12]
    f70c:	e5c20000 	strb	r0, [r2]
    f710:	1afffff8 	bne	f6f8 <CString::FormatV(char const*, std::__va_list)+0x860>
    f714:	e59d3008 	ldr	r3, [sp, #8]
    f718:	e3530000 	cmp	r3, #0
    f71c:	0afffef3 	beq	f2f0 <CString::FormatV(char const*, std::__va_list)+0x458>
    f720:	e59d400c 	ldr	r4, [sp, #12]
    f724:	e3a01001 	mov	r1, #1
    f728:	e1a00004 	mov	r0, r4
    f72c:	ebfffb68 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f730:	e3a0202d 	mov	r2, #45	; 0x2d
    f734:	e594300c 	ldr	r3, [r4, #12]
    f738:	e2831001 	add	r1, r3, #1
    f73c:	e584100c 	str	r1, [r4, #12]
    f740:	e5c32000 	strb	r2, [r3]
    f744:	eafffee9 	b	f2f0 <CString::FormatV(char const*, std::__va_list)+0x458>
    f748:	e59d500c 	ldr	r5, [sp, #12]
    f74c:	e3a01001 	mov	r1, #1
    f750:	e1a00005 	mov	r0, r5
    f754:	ebfffb5e 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f758:	e3a02025 	mov	r2, #37	; 0x25
    f75c:	e595300c 	ldr	r3, [r5, #12]
    f760:	e1a00005 	mov	r0, r5
    f764:	e2831001 	add	r1, r3, #1
    f768:	e585100c 	str	r1, [r5, #12]
    f76c:	e5c32000 	strb	r2, [r3]
    f770:	e3a01001 	mov	r1, #1
    f774:	e1d640d0 	ldrsb	r4, [r6]
    f778:	ebfffb55 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f77c:	e595300c 	ldr	r3, [r5, #12]
    f780:	e1a01005 	mov	r1, r5
    f784:	e2832001 	add	r2, r3, #1
    f788:	e585200c 	str	r2, [r5, #12]
    f78c:	e5c34000 	strb	r4, [r3]
    f790:	eafffdcf 	b	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    f794:	e59d1018 	ldr	r1, [sp, #24]
    f798:	e59d000c 	ldr	r0, [sp, #12]
    f79c:	ebfffc25 	bl	e838 <CString::PutString(char const*)>
    f7a0:	e1550004 	cmp	r5, r4
    f7a4:	2afffdca 	bcs	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    f7a8:	e0444005 	sub	r4, r4, r5
    f7ac:	e59d500c 	ldr	r5, [sp, #12]
    f7b0:	e1a01004 	mov	r1, r4
    f7b4:	e1a00005 	mov	r0, r5
    f7b8:	ebfffb45 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f7bc:	e3a00020 	mov	r0, #32
    f7c0:	e1a01005 	mov	r1, r5
    f7c4:	e2443001 	sub	r3, r4, #1
    f7c8:	e591200c 	ldr	r2, [r1, #12]
    f7cc:	e2433001 	sub	r3, r3, #1
    f7d0:	e282c001 	add	ip, r2, #1
    f7d4:	e3730001 	cmn	r3, #1
    f7d8:	e581c00c 	str	ip, [r1, #12]
    f7dc:	e5c20000 	strb	r0, [r2]
    f7e0:	1afffff8 	bne	f7c8 <CString::FormatV(char const*, std::__va_list)+0x930>
    f7e4:	eafffdba 	b	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    f7e8:	e1a06007 	mov	r6, r7
    f7ec:	e3a04000 	mov	r4, #0
    f7f0:	eafffde8 	b	ef98 <CString::FormatV(char const*, std::__va_list)+0x100>
    f7f4:	e59d301c 	ldr	r3, [sp, #28]
    f7f8:	e59d600c 	ldr	r6, [sp, #12]
    f7fc:	e0444000 	sub	r4, r4, r0
    f800:	e3530000 	cmp	r3, #0
    f804:	e1a01004 	mov	r1, r4
    f808:	e1a00006 	mov	r0, r6
    f80c:	13a05030 	movne	r5, #48	; 0x30
    f810:	03a05020 	moveq	r5, #32
    f814:	ebfffb2e 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f818:	e1a01006 	mov	r1, r6
    f81c:	e2443001 	sub	r3, r4, #1
    f820:	e591200c 	ldr	r2, [r1, #12]
    f824:	e2433001 	sub	r3, r3, #1
    f828:	e2820001 	add	r0, r2, #1
    f82c:	e3730001 	cmn	r3, #1
    f830:	e581000c 	str	r0, [r1, #12]
    f834:	e5c25000 	strb	r5, [r2]
    f838:	1afffff8 	bne	f820 <CString::FormatV(char const*, std::__va_list)+0x988>
    f83c:	eafffeab 	b	f2f0 <CString::FormatV(char const*, std::__va_list)+0x458>
    f840:	e59d3014 	ldr	r3, [sp, #20]
    f844:	e3530000 	cmp	r3, #0
    f848:	0a000044 	beq	f960 <CString::FormatV(char const*, std::__va_list)+0xac8>
    f84c:	e59d1018 	ldr	r1, [sp, #24]
    f850:	e59d000c 	ldr	r0, [sp, #12]
    f854:	ebfffbf7 	bl	e838 <CString::PutString(char const*)>
    f858:	e1540005 	cmp	r4, r5
    f85c:	9afffd9c 	bls	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    f860:	e0444005 	sub	r4, r4, r5
    f864:	e59d500c 	ldr	r5, [sp, #12]
    f868:	e1a01004 	mov	r1, r4
    f86c:	e1a00005 	mov	r0, r5
    f870:	ebfffb17 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f874:	e3a00020 	mov	r0, #32
    f878:	e1a01005 	mov	r1, r5
    f87c:	e2443001 	sub	r3, r4, #1
    f880:	e591200c 	ldr	r2, [r1, #12]
    f884:	e2433001 	sub	r3, r3, #1
    f888:	e282c001 	add	ip, r2, #1
    f88c:	e3730001 	cmn	r3, #1
    f890:	e581c00c 	str	ip, [r1, #12]
    f894:	e5c20000 	strb	r0, [r2]
    f898:	1afffff8 	bne	f880 <CString::FormatV(char const*, std::__va_list)+0x9e8>
    f89c:	eafffd8c 	b	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    f8a0:	e59d7010 	ldr	r7, [sp, #16]
    f8a4:	e4976004 	ldr	r6, [r7], #4
    f8a8:	e3560000 	cmp	r6, #0
    f8ac:	ba000027 	blt	f950 <CString::FormatV(char const*, std::__va_list)+0xab8>
    f8b0:	e3560009 	cmp	r6, #9
    f8b4:	e1a05006 	mov	r5, r6
    f8b8:	da0000c2 	ble	fbc8 <CString::FormatV(char const*, std::__va_list)+0xd30>
    f8bc:	e3a0a001 	mov	sl, #1
    f8c0:	e08aa10a 	add	sl, sl, sl, lsl #2
    f8c4:	e1a0a08a 	lsl	sl, sl, #1
    f8c8:	e1a0100a 	mov	r1, sl
    f8cc:	e1a00006 	mov	r0, r6
    f8d0:	eb0014f8 	bl	14cb8 <__udivsi3>
    f8d4:	e3500009 	cmp	r0, #9
    f8d8:	8afffff8 	bhi	f8c0 <CString::FormatV(char const*, std::__va_list)+0xa28>
    f8dc:	e1a08000 	mov	r8, r0
    f8e0:	e28d3034 	add	r3, sp, #52	; 0x34
    f8e4:	e58d3018 	str	r3, [sp, #24]
    f8e8:	e1a06003 	mov	r6, r3
    f8ec:	ea000003 	b	f900 <CString::FormatV(char const*, std::__va_list)+0xa68>
    f8f0:	e1a00005 	mov	r0, r5
    f8f4:	e1a0a001 	mov	sl, r1
    f8f8:	eb0014ee 	bl	14cb8 <__udivsi3>
    f8fc:	e1a08000 	mov	r8, r0
    f900:	e1a00005 	mov	r0, r5
    f904:	e1a0100a 	mov	r1, sl
    f908:	eb001565 	bl	14ea4 <__aeabi_uidivmod>
    f90c:	e3580009 	cmp	r8, #9
    f910:	e6ef8078 	uxtb	r8, r8
    f914:	e2883030 	add	r3, r8, #48	; 0x30
    f918:	96af8073 	sxtbls	r8, r3
    f91c:	e59f32c4 	ldr	r3, [pc, #708]	; fbe8 <CString::FormatV(char const*, std::__va_list)+0xd50>
    f920:	e1a05001 	mov	r5, r1
    f924:	e0813a93 	umull	r3, r1, r3, sl
    f928:	82888057 	addhi	r8, r8, #87	; 0x57
    f92c:	86af8078 	sxtbhi	r8, r8
    f930:	e35a0009 	cmp	sl, #9
    f934:	e1a011a1 	lsr	r1, r1, #3
    f938:	e4c68001 	strb	r8, [r6], #1
    f93c:	8affffeb 	bhi	f8f0 <CString::FormatV(char const*, std::__va_list)+0xa58>
    f940:	e3a03000 	mov	r3, #0
    f944:	e58d7010 	str	r7, [sp, #16]
    f948:	e5c63000 	strb	r3, [r6]
    f94c:	eaffff52 	b	f69c <CString::FormatV(char const*, std::__va_list)+0x804>
    f950:	e3a03001 	mov	r3, #1
    f954:	e2666000 	rsb	r6, r6, #0
    f958:	e58d3008 	str	r3, [sp, #8]
    f95c:	eaffffd3 	b	f8b0 <CString::FormatV(char const*, std::__va_list)+0xa18>
    f960:	e59d301c 	ldr	r3, [sp, #28]
    f964:	e3530000 	cmp	r3, #0
    f968:	0a000099 	beq	fbd4 <CString::FormatV(char const*, std::__va_list)+0xd3c>
    f96c:	e1550004 	cmp	r5, r4
    f970:	2afffe5e 	bcs	f2f0 <CString::FormatV(char const*, std::__va_list)+0x458>
    f974:	e0444005 	sub	r4, r4, r5
    f978:	e59d500c 	ldr	r5, [sp, #12]
    f97c:	e1a01004 	mov	r1, r4
    f980:	e1a00005 	mov	r0, r5
    f984:	ebfffad2 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f988:	e3a00030 	mov	r0, #48	; 0x30
    f98c:	e1a01005 	mov	r1, r5
    f990:	e2443001 	sub	r3, r4, #1
    f994:	e591200c 	ldr	r2, [r1, #12]
    f998:	e2433001 	sub	r3, r3, #1
    f99c:	e282c001 	add	ip, r2, #1
    f9a0:	e3730001 	cmn	r3, #1
    f9a4:	e581c00c 	str	ip, [r1, #12]
    f9a8:	e5c20000 	strb	r0, [r2]
    f9ac:	1afffff8 	bne	f994 <CString::FormatV(char const*, std::__va_list)+0xafc>
    f9b0:	eafffe4e 	b	f2f0 <CString::FormatV(char const*, std::__va_list)+0x458>
    f9b4:	e59d600c 	ldr	r6, [sp, #12]
    f9b8:	e3a01001 	mov	r1, #1
    f9bc:	e1a00006 	mov	r0, r6
    f9c0:	ebfffac3 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f9c4:	e3a0202d 	mov	r2, #45	; 0x2d
    f9c8:	e596300c 	ldr	r3, [r6, #12]
    f9cc:	e2831001 	add	r1, r3, #1
    f9d0:	e586100c 	str	r1, [r6, #12]
    f9d4:	e5c32000 	strb	r2, [r3]
    f9d8:	eaffff9b 	b	f84c <CString::FormatV(char const*, std::__va_list)+0x9b4>
    f9dc:	e59d700c 	ldr	r7, [sp, #12]
    f9e0:	e3a01001 	mov	r1, #1
    f9e4:	e1a00007 	mov	r0, r7
    f9e8:	ebfffab9 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f9ec:	e597300c 	ldr	r3, [r7, #12]
    f9f0:	e3540001 	cmp	r4, #1
    f9f4:	e2832001 	add	r2, r3, #1
    f9f8:	e587200c 	str	r2, [r7, #12]
    f9fc:	e1a01007 	mov	r1, r7
    fa00:	e5c36000 	strb	r6, [r3]
    fa04:	8a00005b 	bhi	fb78 <CString::FormatV(char const*, std::__va_list)+0xce0>
    fa08:	e58d5010 	str	r5, [sp, #16]
    fa0c:	eafffd30 	b	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    fa10:	e59d1018 	ldr	r1, [sp, #24]
    fa14:	e59d000c 	ldr	r0, [sp, #12]
    fa18:	ebfffb86 	bl	e838 <CString::PutString(char const*)>
    fa1c:	e1550004 	cmp	r5, r4
    fa20:	2afffd2b 	bcs	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    fa24:	e0444005 	sub	r4, r4, r5
    fa28:	e59d500c 	ldr	r5, [sp, #12]
    fa2c:	e1a01004 	mov	r1, r4
    fa30:	e1a00005 	mov	r0, r5
    fa34:	ebfffaa6 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fa38:	e3a00020 	mov	r0, #32
    fa3c:	e1a01005 	mov	r1, r5
    fa40:	e2443001 	sub	r3, r4, #1
    fa44:	e591200c 	ldr	r2, [r1, #12]
    fa48:	e2433001 	sub	r3, r3, #1
    fa4c:	e282c001 	add	ip, r2, #1
    fa50:	e3730001 	cmn	r3, #1
    fa54:	e581c00c 	str	ip, [r1, #12]
    fa58:	e5c20000 	strb	r0, [r2]
    fa5c:	1afffff8 	bne	fa44 <CString::FormatV(char const*, std::__va_list)+0xbac>
    fa60:	eafffd1b 	b	eed4 <CString::FormatV(char const*, std::__va_list)+0x3c>
    fa64:	e1a01007 	mov	r1, r7
    fa68:	e59d000c 	ldr	r0, [sp, #12]
    fa6c:	ebfffb71 	bl	e838 <CString::PutString(char const*)>
    fa70:	e1560004 	cmp	r6, r4
    fa74:	2affffe3 	bcs	fa08 <CString::FormatV(char const*, std::__va_list)+0xb70>
    fa78:	e0444006 	sub	r4, r4, r6
    fa7c:	e59d600c 	ldr	r6, [sp, #12]
    fa80:	e1a01004 	mov	r1, r4
    fa84:	e1a00006 	mov	r0, r6
    fa88:	ebfffa91 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fa8c:	e3a00020 	mov	r0, #32
    fa90:	e1a01006 	mov	r1, r6
    fa94:	e2443001 	sub	r3, r4, #1
    fa98:	e591200c 	ldr	r2, [r1, #12]
    fa9c:	e2433001 	sub	r3, r3, #1
    faa0:	e282c001 	add	ip, r2, #1
    faa4:	e3730001 	cmn	r3, #1
    faa8:	e581c00c 	str	ip, [r1, #12]
    faac:	e5c20000 	strb	r0, [r2]
    fab0:	1afffff8 	bne	fa98 <CString::FormatV(char const*, std::__va_list)+0xc00>
    fab4:	eaffffd3 	b	fa08 <CString::FormatV(char const*, std::__va_list)+0xb70>
    fab8:	e1cd62d0 	ldrd	r6, [sp, #32]
    fabc:	e3a0a001 	mov	sl, #1
    fac0:	e3a0b000 	mov	fp, #0
    fac4:	eafffdcc 	b	f1fc <CString::FormatV(char const*, std::__va_list)+0x364>
    fac8:	e1a0a008 	mov	sl, r8
    facc:	e3a06001 	mov	r6, #1
    fad0:	eafffe36 	b	f3b0 <CString::FormatV(char const*, std::__va_list)+0x518>
    fad4:	e59d700c 	ldr	r7, [sp, #12]
    fad8:	e2441001 	sub	r1, r4, #1
    fadc:	e1a00007 	mov	r0, r7
    fae0:	ebfffa7b 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fae4:	e3a01020 	mov	r1, #32
    fae8:	e1a02007 	mov	r2, r7
    faec:	e2444002 	sub	r4, r4, #2
    faf0:	e592300c 	ldr	r3, [r2, #12]
    faf4:	e2444001 	sub	r4, r4, #1
    faf8:	e2830001 	add	r0, r3, #1
    fafc:	e3740001 	cmn	r4, #1
    fb00:	e582000c 	str	r0, [r2, #12]
    fb04:	e5c31000 	strb	r1, [r3]
    fb08:	1afffff8 	bne	faf0 <CString::FormatV(char const*, std::__va_list)+0xc58>
    fb0c:	eafffe52 	b	f45c <CString::FormatV(char const*, std::__va_list)+0x5c4>
    fb10:	e59d600c 	ldr	r6, [sp, #12]
    fb14:	e0444000 	sub	r4, r4, r0
    fb18:	e1a01004 	mov	r1, r4
    fb1c:	e1a00006 	mov	r0, r6
    fb20:	ebfffa6b 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fb24:	e3a00020 	mov	r0, #32
    fb28:	e1a01006 	mov	r1, r6
    fb2c:	e2443001 	sub	r3, r4, #1
    fb30:	e591200c 	ldr	r2, [r1, #12]
    fb34:	e2433001 	sub	r3, r3, #1
    fb38:	e282c001 	add	ip, r2, #1
    fb3c:	e3730001 	cmn	r3, #1
    fb40:	e581c00c 	str	ip, [r1, #12]
    fb44:	e5c20000 	strb	r0, [r2]
    fb48:	1afffff8 	bne	fb30 <CString::FormatV(char const*, std::__va_list)+0xc98>
    fb4c:	eafffdf5 	b	f328 <CString::FormatV(char const*, std::__va_list)+0x490>
    fb50:	e59d600c 	ldr	r6, [sp, #12]
    fb54:	e3a01001 	mov	r1, #1
    fb58:	e1a00006 	mov	r0, r6
    fb5c:	ebfffa5c 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fb60:	e3a0202d 	mov	r2, #45	; 0x2d
    fb64:	e596300c 	ldr	r3, [r6, #12]
    fb68:	e2831001 	add	r1, r3, #1
    fb6c:	e586100c 	str	r1, [r6, #12]
    fb70:	e5c32000 	strb	r2, [r3]
    fb74:	eaffff7c 	b	f96c <CString::FormatV(char const*, std::__va_list)+0xad4>
    fb78:	e59d600c 	ldr	r6, [sp, #12]
    fb7c:	e2441001 	sub	r1, r4, #1
    fb80:	e1a00006 	mov	r0, r6
    fb84:	ebfffa52 	bl	e4d4 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    fb88:	e3a01020 	mov	r1, #32
    fb8c:	e1a02006 	mov	r2, r6
    fb90:	e2444002 	sub	r4, r4, #2
    fb94:	e592300c 	ldr	r3, [r2, #12]
    fb98:	e2444001 	sub	r4, r4, #1
    fb9c:	e2830001 	add	r0, r3, #1
    fba0:	e3740001 	cmn	r4, #1
    fba4:	e582000c 	str	r0, [r2, #12]
    fba8:	e5c31000 	strb	r1, [r3]
    fbac:	1afffff8 	bne	fb94 <CString::FormatV(char const*, std::__va_list)+0xcfc>
    fbb0:	eaffff94 	b	fa08 <CString::FormatV(char const*, std::__va_list)+0xb70>
    fbb4:	e1a00005 	mov	r0, r5
    fbb8:	e3a06001 	mov	r6, #1
    fbbc:	e3a07000 	mov	r7, #0
    fbc0:	e1a01008 	mov	r1, r8
    fbc4:	eafffe82 	b	f5d4 <CString::FormatV(char const*, std::__va_list)+0x73c>
    fbc8:	e1a08005 	mov	r8, r5
    fbcc:	e3a0a001 	mov	sl, #1
    fbd0:	eaffff42 	b	f8e0 <CString::FormatV(char const*, std::__va_list)+0xa48>
    fbd4:	e1500004 	cmp	r0, r4
    fbd8:	2afffdc4 	bcs	f2f0 <CString::FormatV(char const*, std::__va_list)+0x458>
    fbdc:	eafffebd 	b	f6d8 <CString::FormatV(char const*, std::__va_list)+0x840>
    fbe0:	00017da8 	.word	0x00017da8
    fbe4:	00017da4 	.word	0x00017da4
    fbe8:	cccccccd 	.word	0xcccccccd

0000fbec <CString::Format(char const*, ...)>:
    fbec:	e92d000e 	push	{r1, r2, r3}
    fbf0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    fbf4:	e24dd008 	sub	sp, sp, #8
    fbf8:	e28d3010 	add	r3, sp, #16
    fbfc:	e1a02003 	mov	r2, r3
    fc00:	e59d100c 	ldr	r1, [sp, #12]
    fc04:	e58d3004 	str	r3, [sp, #4]
    fc08:	ebfffca2 	bl	ee98 <CString::FormatV(char const*, std::__va_list)>
    fc0c:	e28dd008 	add	sp, sp, #8
    fc10:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    fc14:	e28dd00c 	add	sp, sp, #12
    fc18:	e12fff1e 	bx	lr

0000fc1c <__aeabi_atexit>:
    fc1c:	e12fff1e 	bx	lr

0000fc20 <__errno>:
    fc20:	e59f0000 	ldr	r0, [pc]	; fc28 <__errno+0x8>
    fc24:	e12fff1e 	bx	lr
    fc28:	00019b70 	.word	0x00019b70

0000fc2c <set_qemu_exit_status>:
    fc2c:	e59f3004 	ldr	r3, [pc, #4]	; fc38 <set_qemu_exit_status+0xc>
    fc30:	e5830008 	str	r0, [r3, #8]
    fc34:	e12fff1e 	bx	lr
    fc38:	00019b6c 	.word	0x00019b6c

0000fc3c <halt>:
    fc3c:	f10c0080 	cpsid	i
    fc40:	f10c0040 	cpsid	f
    fc44:	eafffffe 	b	fc44 <halt+0x8>

0000fc48 <reboot>:
    fc48:	e3a03000 	mov	r3, #0
    fc4c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    fc50:	e59f3010 	ldr	r3, [pc, #16]	; fc68 <reboot+0x20>
    fc54:	e59f1010 	ldr	r1, [pc, #16]	; fc6c <reboot+0x24>
    fc58:	e59f2010 	ldr	r2, [pc, #16]	; fc70 <reboot+0x28>
    fc5c:	e5831024 	str	r1, [r3, #36]	; 0x24
    fc60:	e583201c 	str	r2, [r3, #28]
    fc64:	eafffffe 	b	fc64 <reboot+0x1c>
    fc68:	20100000 	.word	0x20100000
    fc6c:	5a000001 	.word	0x5a000001
    fc70:	5a000020 	.word	0x5a000020

0000fc74 <vfpinit>:
    fc74:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    fc78:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    fc7c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    fc80:	e3a03000 	mov	r3, #0
    fc84:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
    fc88:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    fc8c:	eee83a10 	vmsr	fpexc, r3
    fc90:	e3a03403 	mov	r3, #50331648	; 0x3000000
    fc94:	eee13a10 	vmsr	fpscr, r3
    fc98:	e12fff1e 	bx	lr

0000fc9c <sysinit>:
    fc9c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    fca0:	e24ddf45 	sub	sp, sp, #276	; 0x114
    fca4:	f1080040 	cpsie	f
    fca8:	f1080080 	cpsie	i
    fcac:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    fcb0:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    fcb4:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    fcb8:	e3a01000 	mov	r1, #0
    fcbc:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
    fcc0:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    fcc4:	eee83a10 	vmsr	fpexc, r3
    fcc8:	e3a03403 	mov	r3, #50331648	; 0x3000000
    fccc:	eee13a10 	vmsr	fpscr, r3
    fcd0:	e59f00c0 	ldr	r0, [pc, #192]	; fd98 <sysinit+0xfc>
    fcd4:	e59f20c0 	ldr	r2, [pc, #192]	; fd9c <sysinit+0x100>
    fcd8:	e59f50c0 	ldr	r5, [pc, #192]	; fda0 <sysinit+0x104>
    fcdc:	e0422000 	sub	r2, r2, r0
    fce0:	eb0005d4 	bl	11438 <memset>
    fce4:	e28d0018 	add	r0, sp, #24
    fce8:	ebffee24 	bl	b580 <CMachineInfo::CMachineInfo()>
    fcec:	e3a01001 	mov	r1, #1
    fcf0:	e28d0034 	add	r0, sp, #52	; 0x34
    fcf4:	eb000919 	bl	12160 <CMemorySystem::CMemorySystem(bool)>
    fcf8:	e28d0008 	add	r0, sp, #8
    fcfc:	ebfffa0e 	bl	e53c <CString::CString()>
    fd00:	e3a03001 	mov	r3, #1
    fd04:	e3a0202c 	mov	r2, #44	; 0x2c
    fd08:	e59f1094 	ldr	r1, [pc, #148]	; fda4 <sysinit+0x108>
    fd0c:	e28d0008 	add	r0, sp, #8
    fd10:	e58d3000 	str	r3, [sp]
    fd14:	e3a03004 	mov	r3, #4
    fd18:	ebffffb3 	bl	fbec <CString::Format(char const*, ...)>
    fd1c:	e28d0008 	add	r0, sp, #8
    fd20:	ebfffa3d 	bl	e61c <CString::operator char const*() const>
    fd24:	e1a01000 	mov	r1, r0
    fd28:	e59f0078 	ldr	r0, [pc, #120]	; fda8 <sysinit+0x10c>
    fd2c:	eb000455 	bl	10e88 <strcpy>
    fd30:	e59f3074 	ldr	r3, [pc, #116]	; fdac <sysinit+0x110>
    fd34:	e1550003 	cmp	r5, r3
    fd38:	2a000009 	bcs	fd64 <sysinit+0xc8>
    fd3c:	e2433001 	sub	r3, r3, #1
    fd40:	e0433005 	sub	r3, r3, r5
    fd44:	e3c33003 	bic	r3, r3, #3
    fd48:	e2833004 	add	r3, r3, #4
    fd4c:	e1a04005 	mov	r4, r5
    fd50:	e0855003 	add	r5, r5, r3
    fd54:	e4943004 	ldr	r3, [r4], #4
    fd58:	e12fff33 	blx	r3
    fd5c:	e1540005 	cmp	r4, r5
    fd60:	1afffffb 	bne	fd54 <sysinit+0xb8>
    fd64:	ebffe0bf 	bl	8068 <main>
    fd68:	e3500001 	cmp	r0, #1
    fd6c:	0a000000 	beq	fd74 <sysinit+0xd8>
    fd70:	ebffffb1 	bl	fc3c <halt>
    fd74:	eb0006b7 	bl	11858 <IsChainBootEnabled>
    fd78:	e3500000 	cmp	r0, #0
    fd7c:	1a000000 	bne	fd84 <sysinit+0xe8>
    fd80:	ebffffb0 	bl	fc48 <reboot>
    fd84:	e28d0034 	add	r0, sp, #52	; 0x34
    fd88:	eb000958 	bl	122f0 <CMemorySystem::Destructor()>
    fd8c:	f10c0040 	cpsid	f
    fd90:	eb0006b6 	bl	11870 <DoChainBoot>
    fd94:	eafffff9 	b	fd80 <sysinit+0xe4>
    fd98:	00019b40 	.word	0x00019b40
    fd9c:	00019bfc 	.word	0x00019bfc
    fda0:	00019818 	.word	0x00019818
    fda4:	00017dac 	.word	0x00017dac
    fda8:	00019b78 	.word	0x00019b78
    fdac:	00019824 	.word	0x00019824

0000fdb0 <CTimer::SimpleusDelay(unsigned int) [clone .part.5]>:
    fdb0:	e2800001 	add	r0, r0, #1
    fdb4:	e3a03000 	mov	r3, #0
    fdb8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    fdbc:	e59f3020 	ldr	r3, [pc, #32]	; fde4 <CTimer::SimpleusDelay(unsigned int) [clone .part.5]+0x34>
    fdc0:	e1a01003 	mov	r1, r3
    fdc4:	e5932004 	ldr	r2, [r3, #4]
    fdc8:	e5913004 	ldr	r3, [r1, #4]
    fdcc:	e0433002 	sub	r3, r3, r2
    fdd0:	e1500003 	cmp	r0, r3
    fdd4:	8afffffb 	bhi	fdc8 <CTimer::SimpleusDelay(unsigned int) [clone .part.5]+0x18>
    fdd8:	e3a03000 	mov	r3, #0
    fddc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    fde0:	e12fff1e 	bx	lr
    fde4:	20003000 	.word	0x20003000

0000fde8 <CTimer::CTimer(CInterruptSystem*)>:
    fde8:	e92d4070 	push	{r4, r5, r6, lr}
    fdec:	e3a05000 	mov	r5, #0
    fdf0:	e3a06001 	mov	r6, #1
    fdf4:	e1a04000 	mov	r4, r0
    fdf8:	e5805004 	str	r5, [r0, #4]
    fdfc:	e5801000 	str	r1, [r0]
    fe00:	e5805008 	str	r5, [r0, #8]
    fe04:	e5805014 	str	r5, [r0, #20]
    fe08:	e5806010 	str	r6, [r0, #16]
    fe0c:	e580500c 	str	r5, [r0, #12]
    fe10:	e2800018 	add	r0, r0, #24
    fe14:	eb0011c0 	bl	1451c <CPtrList::CPtrList()>
    fe18:	e3a020c8 	mov	r2, #200	; 0xc8
    fe1c:	e59f303c 	ldr	r3, [pc, #60]	; fe60 <CTimer::CTimer(CInterruptSystem*)+0x78>
    fe20:	e59f103c 	ldr	r1, [pc, #60]	; fe64 <CTimer::CTimer(CInterruptSystem*)+0x7c>
    fe24:	e5930000 	ldr	r0, [r3]
    fe28:	e584601c 	str	r6, [r4, #28]
    fe2c:	e1500005 	cmp	r0, r5
    fe30:	e5845028 	str	r5, [r4, #40]	; 0x28
    fe34:	e584503c 	str	r5, [r4, #60]	; 0x3c
    fe38:	e5841020 	str	r1, [r4, #32]
    fe3c:	e5842024 	str	r2, [r4, #36]	; 0x24
    fe40:	1a000002 	bne	fe50 <CTimer::CTimer(CInterruptSystem*)+0x68>
    fe44:	e5834000 	str	r4, [r3]
    fe48:	e1a00004 	mov	r0, r4
    fe4c:	e8bd8070 	pop	{r4, r5, r6, pc}
    fe50:	e3a02040 	mov	r2, #64	; 0x40
    fe54:	e59f100c 	ldr	r1, [pc, #12]	; fe68 <CTimer::CTimer(CInterruptSystem*)+0x80>
    fe58:	e59f000c 	ldr	r0, [pc, #12]	; fe6c <CTimer::CTimer(CInterruptSystem*)+0x84>
    fe5c:	ebffe4b5 	bl	9138 <assertion_failed>
    fe60:	00019b84 	.word	0x00019b84
    fe64:	00030d40 	.word	0x00030d40
    fe68:	00017df0 	.word	0x00017df0
    fe6c:	00017dfc 	.word	0x00017dfc

0000fe70 <CTimer::~CTimer()>:
    fe70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fe74:	e1a08000 	mov	r8, r0
    fe78:	e5900000 	ldr	r0, [r0]
    fe7c:	e3500000 	cmp	r0, #0
    fe80:	0a000027 	beq	ff24 <CTimer::~CTimer()+0xb4>
    fe84:	e3a01003 	mov	r1, #3
    fe88:	e2884018 	add	r4, r8, #24
    fe8c:	eb000ad7 	bl	129f0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    fe90:	e1a00004 	mov	r0, r4
    fe94:	eb0011ad 	bl	14550 <CPtrList::GetFirst()>
    fe98:	e2505000 	subs	r5, r0, #0
    fe9c:	e59f7090 	ldr	r7, [pc, #144]	; ff34 <CTimer::~CTimer()+0xc4>
    fea0:	0a000011 	beq	feec <CTimer::~CTimer()+0x7c>
    fea4:	e1a01005 	mov	r1, r5
    fea8:	e1a00004 	mov	r0, r4
    feac:	eb0011be 	bl	145ac <CPtrList::GetPtr(TPtrListElement*)>
    feb0:	e2506000 	subs	r6, r0, #0
    feb4:	0a000012 	beq	ff04 <CTimer::~CTimer()+0x94>
    feb8:	e5963000 	ldr	r3, [r6]
    febc:	e1530007 	cmp	r3, r7
    fec0:	1a000013 	bne	ff14 <CTimer::~CTimer()+0xa4>
    fec4:	e1a01005 	mov	r1, r5
    fec8:	e1a00004 	mov	r0, r4
    fecc:	eb00123e 	bl	147cc <CPtrList::Remove(TPtrListElement*)>
    fed0:	e1a00006 	mov	r0, r6
    fed4:	e3a01014 	mov	r1, #20
    fed8:	eb000688 	bl	11900 <operator delete(void*, unsigned int)>
    fedc:	e1a00004 	mov	r0, r4
    fee0:	eb00119a 	bl	14550 <CPtrList::GetFirst()>
    fee4:	e2505000 	subs	r5, r0, #0
    fee8:	1affffed 	bne	fea4 <CTimer::~CTimer()+0x34>
    feec:	e59f3044 	ldr	r3, [pc, #68]	; ff38 <CTimer::~CTimer()+0xc8>
    fef0:	e1a00004 	mov	r0, r4
    fef4:	e5835000 	str	r5, [r3]
    fef8:	eb00118a 	bl	14528 <CPtrList::~CPtrList()>
    fefc:	e1a00008 	mov	r0, r8
    ff00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ff04:	e3a02057 	mov	r2, #87	; 0x57
    ff08:	e59f102c 	ldr	r1, [pc, #44]	; ff3c <CTimer::~CTimer()+0xcc>
    ff0c:	e59f002c 	ldr	r0, [pc, #44]	; ff40 <CTimer::~CTimer()+0xd0>
    ff10:	ebffe488 	bl	9138 <assertion_failed>
    ff14:	e3a02058 	mov	r2, #88	; 0x58
    ff18:	e59f101c 	ldr	r1, [pc, #28]	; ff3c <CTimer::~CTimer()+0xcc>
    ff1c:	e59f0020 	ldr	r0, [pc, #32]	; ff44 <CTimer::~CTimer()+0xd4>
    ff20:	ebffe484 	bl	9138 <assertion_failed>
    ff24:	e3a02046 	mov	r2, #70	; 0x46
    ff28:	e59f100c 	ldr	r1, [pc, #12]	; ff3c <CTimer::~CTimer()+0xcc>
    ff2c:	e59f0014 	ldr	r0, [pc, #20]	; ff48 <CTimer::~CTimer()+0xd8>
    ff30:	ebffe480 	bl	9138 <assertion_failed>
    ff34:	4b544d43 	.word	0x4b544d43
    ff38:	00019b84 	.word	0x00019b84
    ff3c:	00017df0 	.word	0x00017df0
    ff40:	00017e24 	.word	0x00017e24
    ff44:	00017e30 	.word	0x00017e30
    ff48:	00017e0c 	.word	0x00017e0c

0000ff4c <CTimer::SetTimeZone(int)>:
    ff4c:	e59f2018 	ldr	r2, [pc, #24]	; ff6c <CTimer::SetTimeZone(int)+0x20>
    ff50:	e2813e59 	add	r3, r1, #1424	; 0x590
    ff54:	e283300f 	add	r3, r3, #15
    ff58:	e1530002 	cmp	r3, r2
    ff5c:	95801014 	strls	r1, [r0, #20]
    ff60:	93a00001 	movls	r0, #1
    ff64:	83a00000 	movhi	r0, #0
    ff68:	e12fff1e 	bx	lr
    ff6c:	00000b3e 	.word	0x00000b3e

0000ff70 <CTimer::GetTimeZone() const>:
    ff70:	e5900014 	ldr	r0, [r0, #20]
    ff74:	e12fff1e 	bx	lr

0000ff78 <CTimer::SetTime(unsigned int, bool)>:
    ff78:	e5903014 	ldr	r3, [r0, #20]
    ff7c:	e3520000 	cmp	r2, #0
    ff80:	e0633203 	rsb	r3, r3, r3, lsl #4
    ff84:	e92d4070 	push	{r4, r5, r6, lr}
    ff88:	e1a05001 	mov	r5, r1
    ff8c:	e1a04000 	mov	r4, r0
    ff90:	e1a01103 	lsl	r1, r3, #2
    ff94:	1a000002 	bne	ffa4 <CTimer::SetTime(unsigned int, bool)+0x2c>
    ff98:	e3510000 	cmp	r1, #0
    ff9c:	ba000019 	blt	10008 <CTimer::SetTime(unsigned int, bool)+0x90>
    ffa0:	e0855001 	add	r5, r5, r1
    ffa4:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    ffa8:	e3520000 	cmp	r2, #0
    ffac:	0a000007 	beq	ffd0 <CTimer::SetTime(unsigned int, bool)+0x58>
    ffb0:	e594300c 	ldr	r3, [r4, #12]
    ffb4:	e0450001 	sub	r0, r5, r1
    ffb8:	e1510003 	cmp	r1, r3
    ffbc:	d0431001 	suble	r1, r3, r1
    ffc0:	c3a01000 	movgt	r1, #0
    ffc4:	e12fff32 	blx	r2
    ffc8:	e3500000 	cmp	r0, #0
    ffcc:	0a000010 	beq	10014 <CTimer::SetTime(unsigned int, bool)+0x9c>
    ffd0:	e5940010 	ldr	r0, [r4, #16]
    ffd4:	e3500000 	cmp	r0, #0
    ffd8:	1a000002 	bne	ffe8 <CTimer::SetTime(unsigned int, bool)+0x70>
    ffdc:	e3a00001 	mov	r0, #1
    ffe0:	e584500c 	str	r5, [r4, #12]
    ffe4:	e8bd8070 	pop	{r4, r5, r6, pc}
    ffe8:	eb00094e 	bl	12528 <EnterCritical>
    ffec:	e5943010 	ldr	r3, [r4, #16]
    fff0:	e584500c 	str	r5, [r4, #12]
    fff4:	e3530000 	cmp	r3, #0
    fff8:	0a000007 	beq	1001c <CTimer::SetTime(unsigned int, bool)+0xa4>
    fffc:	eb000973 	bl	125d0 <LeaveCritical>
   10000:	e3a00001 	mov	r0, #1
   10004:	e8bd8070 	pop	{r4, r5, r6, pc}
   10008:	e2613000 	rsb	r3, r1, #0
   1000c:	e1530005 	cmp	r3, r5
   10010:	daffffe2 	ble	ffa0 <CTimer::SetTime(unsigned int, bool)+0x28>
   10014:	e3a00000 	mov	r0, #0
   10018:	e8bd8070 	pop	{r4, r5, r6, pc}
   1001c:	e3a00001 	mov	r0, #1
   10020:	e8bd8070 	pop	{r4, r5, r6, pc}

00010024 <CTimer::GetClockTicks()>:
   10024:	e3a03000 	mov	r3, #0
   10028:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1002c:	e59f2008 	ldr	r2, [pc, #8]	; 1003c <CTimer::GetClockTicks()+0x18>
   10030:	e5920004 	ldr	r0, [r2, #4]
   10034:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   10038:	e12fff1e 	bx	lr
   1003c:	20003000 	.word	0x20003000

00010040 <CTimer::GetTicks() const>:
   10040:	e5900004 	ldr	r0, [r0, #4]
   10044:	e12fff1e 	bx	lr

00010048 <CTimer::GetUptime() const>:
   10048:	e5900008 	ldr	r0, [r0, #8]
   1004c:	e12fff1e 	bx	lr

00010050 <CTimer::GetTime() const>:
   10050:	e590000c 	ldr	r0, [r0, #12]
   10054:	e12fff1e 	bx	lr

00010058 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   10058:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1005c:	e1a04000 	mov	r4, r0
   10060:	e5900010 	ldr	r0, [r0, #16]
   10064:	e1a06001 	mov	r6, r1
   10068:	e3500000 	cmp	r0, #0
   1006c:	e1a05002 	mov	r5, r2
   10070:	1a000013 	bne	100c4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x6c>
   10074:	e594700c 	ldr	r7, [r4, #12]
   10078:	e5944004 	ldr	r4, [r4, #4]
   1007c:	e3560000 	cmp	r6, #0
   10080:	0a000018 	beq	100e8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x90>
   10084:	e3550000 	cmp	r5, #0
   10088:	e5867000 	str	r7, [r6]
   1008c:	0a000019 	beq	100f8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
   10090:	e59f3070 	ldr	r3, [pc, #112]	; 10108 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   10094:	e3a00001 	mov	r0, #1
   10098:	e0832493 	umull	r2, r3, r3, r4
   1009c:	e1a032a3 	lsr	r3, r3, #5
   100a0:	e0833103 	add	r3, r3, r3, lsl #2
   100a4:	e0833103 	add	r3, r3, r3, lsl #2
   100a8:	e0443103 	sub	r3, r4, r3, lsl #2
   100ac:	e0632283 	rsb	r2, r3, r3, lsl #5
   100b0:	e0833102 	add	r3, r3, r2, lsl #2
   100b4:	e0833103 	add	r3, r3, r3, lsl #2
   100b8:	e1a03203 	lsl	r3, r3, #4
   100bc:	e5853000 	str	r3, [r5]
   100c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   100c4:	eb000917 	bl	12528 <EnterCritical>
   100c8:	e5943010 	ldr	r3, [r4, #16]
   100cc:	e594700c 	ldr	r7, [r4, #12]
   100d0:	e3530000 	cmp	r3, #0
   100d4:	e5944004 	ldr	r4, [r4, #4]
   100d8:	0affffe7 	beq	1007c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   100dc:	eb00093b 	bl	125d0 <LeaveCritical>
   100e0:	e3560000 	cmp	r6, #0
   100e4:	1affffe6 	bne	10084 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   100e8:	e59f201c 	ldr	r2, [pc, #28]	; 1010c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   100ec:	e59f101c 	ldr	r1, [pc, #28]	; 10110 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   100f0:	e59f001c 	ldr	r0, [pc, #28]	; 10114 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   100f4:	ebffe40f 	bl	9138 <assertion_failed>
   100f8:	e59f2018 	ldr	r2, [pc, #24]	; 10118 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc0>
   100fc:	e59f100c 	ldr	r1, [pc, #12]	; 10110 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   10100:	e59f0014 	ldr	r0, [pc, #20]	; 1011c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc4>
   10104:	ebffe40b 	bl	9138 <assertion_failed>
   10108:	51eb851f 	.word	0x51eb851f
   1010c:	0000010a 	.word	0x0000010a
   10110:	00017df0 	.word	0x00017df0
   10114:	00017e58 	.word	0x00017e58
   10118:	0000010d 	.word	0x0000010d
   1011c:	00017e68 	.word	0x00017e68

00010120 <CTimer::GetUniversalTime() const>:
   10120:	e5903014 	ldr	r3, [r0, #20]
   10124:	e590000c 	ldr	r0, [r0, #12]
   10128:	e0633203 	rsb	r3, r3, r3, lsl #4
   1012c:	e1a03103 	lsl	r3, r3, #2
   10130:	e1500003 	cmp	r0, r3
   10134:	a0400003 	subge	r0, r0, r3
   10138:	b3a00000 	movlt	r0, #0
   1013c:	e12fff1e 	bx	lr

00010140 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   10140:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10144:	e1a05000 	mov	r5, r0
   10148:	e5900010 	ldr	r0, [r0, #16]
   1014c:	e1a08001 	mov	r8, r1
   10150:	e3500000 	cmp	r0, #0
   10154:	e1a04002 	mov	r4, r2
   10158:	1a00001b 	bne	101cc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x8c>
   1015c:	e595600c 	ldr	r6, [r5, #12]
   10160:	e5957004 	ldr	r7, [r5, #4]
   10164:	e5950014 	ldr	r0, [r5, #20]
   10168:	e0600200 	rsb	r0, r0, r0, lsl #4
   1016c:	e1a00100 	lsl	r0, r0, #2
   10170:	e1560000 	cmp	r6, r0
   10174:	ba000012 	blt	101c4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   10178:	e3580000 	cmp	r8, #0
   1017c:	0a00001a 	beq	101ec <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xac>
   10180:	e0460000 	sub	r0, r6, r0
   10184:	e3540000 	cmp	r4, #0
   10188:	e5880000 	str	r0, [r8]
   1018c:	0a00001a 	beq	101fc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
   10190:	e59f3074 	ldr	r3, [pc, #116]	; 1020c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   10194:	e3a00001 	mov	r0, #1
   10198:	e0832793 	umull	r2, r3, r3, r7
   1019c:	e1a032a3 	lsr	r3, r3, #5
   101a0:	e0833103 	add	r3, r3, r3, lsl #2
   101a4:	e0833103 	add	r3, r3, r3, lsl #2
   101a8:	e0473103 	sub	r3, r7, r3, lsl #2
   101ac:	e0632283 	rsb	r2, r3, r3, lsl #5
   101b0:	e0833102 	add	r3, r3, r2, lsl #2
   101b4:	e0833103 	add	r3, r3, r3, lsl #2
   101b8:	e1a03203 	lsl	r3, r3, #4
   101bc:	e5843000 	str	r3, [r4]
   101c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   101c4:	e3a00000 	mov	r0, #0
   101c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   101cc:	eb0008d5 	bl	12528 <EnterCritical>
   101d0:	e5953010 	ldr	r3, [r5, #16]
   101d4:	e595600c 	ldr	r6, [r5, #12]
   101d8:	e3530000 	cmp	r3, #0
   101dc:	e5957004 	ldr	r7, [r5, #4]
   101e0:	0affffdf 	beq	10164 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   101e4:	eb0008f9 	bl	125d0 <LeaveCritical>
   101e8:	eaffffdd 	b	10164 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   101ec:	e59f201c 	ldr	r2, [pc, #28]	; 10210 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   101f0:	e59f101c 	ldr	r1, [pc, #28]	; 10214 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   101f4:	e59f001c 	ldr	r0, [pc, #28]	; 10218 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   101f8:	ebffe3ce 	bl	9138 <assertion_failed>
   101fc:	e59f2018 	ldr	r2, [pc, #24]	; 1021c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   10200:	e59f100c 	ldr	r1, [pc, #12]	; 10214 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   10204:	e59f0014 	ldr	r0, [pc, #20]	; 10220 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
   10208:	ebffe3ca 	bl	9138 <assertion_failed>
   1020c:	51eb851f 	.word	0x51eb851f
   10210:	0000012f 	.word	0x0000012f
   10214:	00017df0 	.word	0x00017df0
   10218:	00017e58 	.word	0x00017e58
   1021c:	00000132 	.word	0x00000132
   10220:	00017e68 	.word	0x00017e68

00010224 <CTimer::GetTimeString()>:
   10224:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10228:	e1a04000 	mov	r4, r0
   1022c:	e5900010 	ldr	r0, [r0, #16]
   10230:	e24dd014 	sub	sp, sp, #20
   10234:	e3500000 	cmp	r0, #0
   10238:	1a000063 	bne	103cc <CTimer::GetTimeString()+0x1a8>
   1023c:	e594b00c 	ldr	fp, [r4, #12]
   10240:	e5949004 	ldr	r9, [r4, #4]
   10244:	e19b3009 	orrs	r3, fp, r9
   10248:	01a09003 	moveq	r9, r3
   1024c:	0a00004a 	beq	1037c <CTimer::GetTimeString()+0x158>
   10250:	e59f6194 	ldr	r6, [pc, #404]	; 103ec <CTimer::GetTimeString()+0x1c8>
   10254:	e59f8194 	ldr	r8, [pc, #404]	; 103f0 <CTimer::GetTimeString()+0x1cc>
   10258:	e0873b96 	umull	r3, r7, r6, fp
   1025c:	e1a072a7 	lsr	r7, r7, #5
   10260:	e0863796 	umull	r3, r6, r6, r7
   10264:	e59f4188 	ldr	r4, [pc, #392]	; 103f4 <CTimer::GetTimeString()+0x1d0>
   10268:	e0883b98 	umull	r3, r8, r8, fp
   1026c:	e0843b94 	umull	r3, r4, r4, fp
   10270:	e1a062a6 	lsr	r6, r6, #5
   10274:	e0666206 	rsb	r6, r6, r6, lsl #4
   10278:	e0672207 	rsb	r2, r7, r7, lsl #4
   1027c:	e0476106 	sub	r6, r7, r6, lsl #2
   10280:	e59f5170 	ldr	r5, [pc, #368]	; 103f8 <CTimer::GetTimeString()+0x1d4>
   10284:	e59fa170 	ldr	sl, [pc, #368]	; 103fc <CTimer::GetTimeString()+0x1d8>
   10288:	e59fe170 	ldr	lr, [pc, #368]	; 10400 <CTimer::GetTimeString()+0x1dc>
   1028c:	e59fc170 	ldr	ip, [pc, #368]	; 10404 <CTimer::GetTimeString()+0x1e0>
   10290:	e04b7102 	sub	r7, fp, r2, lsl #2
   10294:	e1a085a8 	lsr	r8, r8, #11
   10298:	e1a04824 	lsr	r4, r4, #16
   1029c:	ea000009 	b	102c8 <CTimer::GetTimeString()+0xa4>
   102a0:	e3150003 	tst	r5, #3
   102a4:	03a03001 	moveq	r3, #1
   102a8:	13a03000 	movne	r3, #0
   102ac:	e3530000 	cmp	r3, #0
   102b0:	11a0200e 	movne	r2, lr
   102b4:	01a0200c 	moveq	r2, ip
   102b8:	e1540002 	cmp	r4, r2
   102bc:	3a00000e 	bcc	102fc <CTimer::GetTimeString()+0xd8>
   102c0:	e0444002 	sub	r4, r4, r2
   102c4:	e2855001 	add	r5, r5, #1
   102c8:	e080359a 	umull	r3, r0, sl, r5
   102cc:	e1a012a0 	lsr	r1, r0, #5
   102d0:	e0811101 	add	r1, r1, r1, lsl #2
   102d4:	e0811101 	add	r1, r1, r1, lsl #2
   102d8:	e1550101 	cmp	r5, r1, lsl #2
   102dc:	1affffef 	bne	102a0 <CTimer::GetTimeString()+0x7c>
   102e0:	e1a003a0 	lsr	r0, r0, #7
   102e4:	e0800100 	add	r0, r0, r0, lsl #2
   102e8:	e0800100 	add	r0, r0, r0, lsl #2
   102ec:	e1550200 	cmp	r5, r0, lsl #4
   102f0:	03a03001 	moveq	r3, #1
   102f4:	13a03000 	movne	r3, #0
   102f8:	eaffffeb 	b	102ac <CTimer::GetTimeString()+0x88>
   102fc:	e3a0a000 	mov	sl, #0
   10300:	e59f1100 	ldr	r1, [pc, #256]	; 10408 <CTimer::GetTimeString()+0x1e4>
   10304:	ea000001 	b	10310 <CTimer::GetTimeString()+0xec>
   10308:	e0444002 	sub	r4, r4, r2
   1030c:	e28aa001 	add	sl, sl, #1
   10310:	e35a0001 	cmp	sl, #1
   10314:	13a02000 	movne	r2, #0
   10318:	02032001 	andeq	r2, r3, #1
   1031c:	e3520000 	cmp	r2, #0
   10320:	13a0201d 	movne	r2, #29
   10324:	0791210a 	ldreq	r2, [r1, sl, lsl #2]
   10328:	e1540002 	cmp	r4, r2
   1032c:	2afffff5 	bcs	10308 <CTimer::GetTimeString()+0xe4>
   10330:	e3a00010 	mov	r0, #16
   10334:	eb000563 	bl	118c8 <operator new(unsigned int)>
   10338:	e59fb0bc 	ldr	fp, [pc, #188]	; 103fc <CTimer::GetTimeString()+0x1d8>
   1033c:	e08b399b 	umull	r3, fp, fp, r9
   10340:	e1a0b2ab 	lsr	fp, fp, #5
   10344:	e08bb10b 	add	fp, fp, fp, lsl #2
   10348:	e08bb10b 	add	fp, fp, fp, lsl #2
   1034c:	e049b10b 	sub	fp, r9, fp, lsl #2
   10350:	e1a09000 	mov	r9, r0
   10354:	ebfff878 	bl	e53c <CString::CString()>
   10358:	e59f30ac 	ldr	r3, [pc, #172]	; 1040c <CTimer::GetTimeString()+0x1e8>
   1035c:	e1550003 	cmp	r5, r3
   10360:	8a000008 	bhi	10388 <CTimer::GetTimeString()+0x164>
   10364:	e88d0880 	stm	sp, {r7, fp}
   10368:	e1a03006 	mov	r3, r6
   1036c:	e1a02008 	mov	r2, r8
   10370:	e59f1098 	ldr	r1, [pc, #152]	; 10410 <CTimer::GetTimeString()+0x1ec>
   10374:	e1a00009 	mov	r0, r9
   10378:	ebfffe1b 	bl	fbec <CString::Format(char const*, ...)>
   1037c:	e1a00009 	mov	r0, r9
   10380:	e28dd014 	add	sp, sp, #20
   10384:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10388:	e59f3084 	ldr	r3, [pc, #132]	; 10414 <CTimer::GetTimeString()+0x1f0>
   1038c:	e1cd60f4 	strd	r6, [sp, #4]
   10390:	e0832893 	umull	r2, r3, r3, r8
   10394:	e1a03223 	lsr	r3, r3, #4
   10398:	e0833083 	add	r3, r3, r3, lsl #1
   1039c:	e0488183 	sub	r8, r8, r3, lsl #3
   103a0:	e59f2070 	ldr	r2, [pc, #112]	; 10418 <CTimer::GetTimeString()+0x1f4>
   103a4:	e58db00c 	str	fp, [sp, #12]
   103a8:	e58d8000 	str	r8, [sp]
   103ac:	e1a00009 	mov	r0, r9
   103b0:	e2843001 	add	r3, r4, #1
   103b4:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   103b8:	e59f105c 	ldr	r1, [pc, #92]	; 1041c <CTimer::GetTimeString()+0x1f8>
   103bc:	ebfffe0a 	bl	fbec <CString::Format(char const*, ...)>
   103c0:	e1a00009 	mov	r0, r9
   103c4:	e28dd014 	add	sp, sp, #20
   103c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103cc:	eb000855 	bl	12528 <EnterCritical>
   103d0:	e5943010 	ldr	r3, [r4, #16]
   103d4:	e594b00c 	ldr	fp, [r4, #12]
   103d8:	e3530000 	cmp	r3, #0
   103dc:	e5949004 	ldr	r9, [r4, #4]
   103e0:	0affff97 	beq	10244 <CTimer::GetTimeString()+0x20>
   103e4:	eb000879 	bl	125d0 <LeaveCritical>
   103e8:	eaffff95 	b	10244 <CTimer::GetTimeString()+0x20>
   103ec:	88888889 	.word	0x88888889
   103f0:	91a2b3c5 	.word	0x91a2b3c5
   103f4:	c22e4507 	.word	0xc22e4507
   103f8:	000007b2 	.word	0x000007b2
   103fc:	51eb851f 	.word	0x51eb851f
   10400:	0000016e 	.word	0x0000016e
   10404:	0000016d 	.word	0x0000016d
   10408:	00017db8 	.word	0x00017db8
   1040c:	000007b7 	.word	0x000007b7
   10410:	00017e98 	.word	0x00017e98
   10414:	aaaaaaab 	.word	0xaaaaaaab
   10418:	00019ad0 	.word	0x00019ad0
   1041c:	00017e7c 	.word	0x00017e7c

00010420 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   10420:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10424:	e1a09000 	mov	r9, r0
   10428:	e1a04002 	mov	r4, r2
   1042c:	e1a05001 	mov	r5, r1
   10430:	e3a00014 	mov	r0, #20
   10434:	e1a08003 	mov	r8, r3
   10438:	eb000522 	bl	118c8 <operator new(unsigned int)>
   1043c:	e5996004 	ldr	r6, [r9, #4]
   10440:	e3540000 	cmp	r4, #0
   10444:	e0866005 	add	r6, r6, r5
   10448:	0a000034 	beq	10520 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x100>
   1044c:	e1a07000 	mov	r7, r0
   10450:	e599001c 	ldr	r0, [r9, #28]
   10454:	e59f30f0 	ldr	r3, [pc, #240]	; 1054c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   10458:	e59d2020 	ldr	r2, [sp, #32]
   1045c:	e3500000 	cmp	r0, #0
   10460:	e5874004 	str	r4, [r7, #4]
   10464:	e5876008 	str	r6, [r7, #8]
   10468:	e587800c 	str	r8, [r7, #12]
   1046c:	e5872010 	str	r2, [r7, #16]
   10470:	e5873000 	str	r3, [r7]
   10474:	1a000020 	bne	104fc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   10478:	e2895018 	add	r5, r9, #24
   1047c:	e1a00005 	mov	r0, r5
   10480:	eb001032 	bl	14550 <CPtrList::GetFirst()>
   10484:	e2504000 	subs	r4, r0, #0
   10488:	0a00002a 	beq	10538 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   1048c:	e59f80b8 	ldr	r8, [pc, #184]	; 1054c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   10490:	e1a01004 	mov	r1, r4
   10494:	e1a00005 	mov	r0, r5
   10498:	eb001043 	bl	145ac <CPtrList::GetPtr(TPtrListElement*)>
   1049c:	e3500000 	cmp	r0, #0
   104a0:	0a00000d 	beq	104dc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xbc>
   104a4:	e5903000 	ldr	r3, [r0]
   104a8:	e1530008 	cmp	r3, r8
   104ac:	1a00000e 	bne	104ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xcc>
   104b0:	e5903008 	ldr	r3, [r0, #8]
   104b4:	e1a01004 	mov	r1, r4
   104b8:	e0433006 	sub	r3, r3, r6
   104bc:	e3530000 	cmp	r3, #0
   104c0:	e1a00005 	mov	r0, r5
   104c4:	ca00000e 	bgt	10504 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
   104c8:	eb001022 	bl	14558 <CPtrList::GetNext(TPtrListElement*)>
   104cc:	e3500000 	cmp	r0, #0
   104d0:	0a000018 	beq	10538 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   104d4:	e1a04000 	mov	r4, r0
   104d8:	eaffffec 	b	10490 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x70>
   104dc:	e59f206c 	ldr	r2, [pc, #108]	; 10550 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
   104e0:	e59f106c 	ldr	r1, [pc, #108]	; 10554 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   104e4:	e59f006c 	ldr	r0, [pc, #108]	; 10558 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
   104e8:	ebffe312 	bl	9138 <assertion_failed>
   104ec:	e59f2068 	ldr	r2, [pc, #104]	; 1055c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
   104f0:	e59f105c 	ldr	r1, [pc, #92]	; 10554 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   104f4:	e59f0064 	ldr	r0, [pc, #100]	; 10560 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
   104f8:	ebffe30e 	bl	9138 <assertion_failed>
   104fc:	eb000809 	bl	12528 <EnterCritical>
   10500:	eaffffdc 	b	10478 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
   10504:	e1a02007 	mov	r2, r7
   10508:	eb00103c 	bl	14600 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   1050c:	e599301c 	ldr	r3, [r9, #28]
   10510:	e3530000 	cmp	r3, #0
   10514:	1a000005 	bne	10530 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x110>
   10518:	e1a00007 	mov	r0, r7
   1051c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10520:	e59f203c 	ldr	r2, [pc, #60]	; 10564 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
   10524:	e59f1028 	ldr	r1, [pc, #40]	; 10554 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   10528:	e59f0038 	ldr	r0, [pc, #56]	; 10568 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
   1052c:	ebffe301 	bl	9138 <assertion_failed>
   10530:	eb000826 	bl	125d0 <LeaveCritical>
   10534:	eafffff7 	b	10518 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   10538:	e1a01004 	mov	r1, r4
   1053c:	e1a00005 	mov	r0, r5
   10540:	e1a02007 	mov	r2, r7
   10544:	eb001067 	bl	146e8 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   10548:	eaffffef 	b	1050c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
   1054c:	4b544d43 	.word	0x4b544d43
   10550:	00000199 	.word	0x00000199
   10554:	00017df0 	.word	0x00017df0
   10558:	00017eac 	.word	0x00017eac
   1055c:	0000019a 	.word	0x0000019a
   10560:	00017ebc 	.word	0x00017ebc
   10564:	00000189 	.word	0x00000189
   10568:	000182b8 	.word	0x000182b8

0001056c <CTimer::CancelKernelTimer(unsigned int)>:
   1056c:	e92d4070 	push	{r4, r5, r6, lr}
   10570:	e2514000 	subs	r4, r1, #0
   10574:	0a00001b 	beq	105e8 <CTimer::CancelKernelTimer(unsigned int)+0x7c>
   10578:	e1a05000 	mov	r5, r0
   1057c:	e590001c 	ldr	r0, [r0, #28]
   10580:	e3500000 	cmp	r0, #0
   10584:	1a000015 	bne	105e0 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   10588:	e2856018 	add	r6, r5, #24
   1058c:	e1a01004 	mov	r1, r4
   10590:	e1a00006 	mov	r0, r6
   10594:	eb0010d2 	bl	148e4 <CPtrList::Find(void*)>
   10598:	e2501000 	subs	r1, r0, #0
   1059c:	0a00000a 	beq	105cc <CTimer::CancelKernelTimer(unsigned int)+0x60>
   105a0:	e59f3060 	ldr	r3, [pc, #96]	; 10608 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   105a4:	e5942000 	ldr	r2, [r4]
   105a8:	e1520003 	cmp	r2, r3
   105ac:	1a000011 	bne	105f8 <CTimer::CancelKernelTimer(unsigned int)+0x8c>
   105b0:	e1a00006 	mov	r0, r6
   105b4:	eb001084 	bl	147cc <CPtrList::Remove(TPtrListElement*)>
   105b8:	e3a03000 	mov	r3, #0
   105bc:	e1a00004 	mov	r0, r4
   105c0:	e5843000 	str	r3, [r4]
   105c4:	e3a01014 	mov	r1, #20
   105c8:	eb0004cc 	bl	11900 <operator delete(void*, unsigned int)>
   105cc:	e595301c 	ldr	r3, [r5, #28]
   105d0:	e3530000 	cmp	r3, #0
   105d4:	08bd8070 	popeq	{r4, r5, r6, pc}
   105d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   105dc:	ea0007fb 	b	125d0 <LeaveCritical>
   105e0:	eb0007d0 	bl	12528 <EnterCritical>
   105e4:	eaffffe7 	b	10588 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   105e8:	e59f201c 	ldr	r2, [pc, #28]	; 1060c <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   105ec:	e59f101c 	ldr	r1, [pc, #28]	; 10610 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   105f0:	e59f001c 	ldr	r0, [pc, #28]	; 10614 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   105f4:	ebffe2cf 	bl	9138 <assertion_failed>
   105f8:	e59f2018 	ldr	r2, [pc, #24]	; 10618 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   105fc:	e59f100c 	ldr	r1, [pc, #12]	; 10610 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   10600:	e59f0014 	ldr	r0, [pc, #20]	; 1061c <CTimer::CancelKernelTimer(unsigned int)+0xb0>
   10604:	ebffe2cb 	bl	9138 <assertion_failed>
   10608:	4b544d43 	.word	0x4b544d43
   1060c:	000001b6 	.word	0x000001b6
   10610:	00017df0 	.word	0x00017df0
   10614:	00017e24 	.word	0x00017e24
   10618:	000001bd 	.word	0x000001bd
   1061c:	00017e30 	.word	0x00017e30

00010620 <CTimer::PollKernelTimers()>:
   10620:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10624:	e1a06000 	mov	r6, r0
   10628:	e590001c 	ldr	r0, [r0, #28]
   1062c:	e3500000 	cmp	r0, #0
   10630:	1a00003c 	bne	10728 <CTimer::PollKernelTimers()+0x108>
   10634:	e2867018 	add	r7, r6, #24
   10638:	e1a00007 	mov	r0, r7
   1063c:	eb000fc3 	bl	14550 <CPtrList::GetFirst()>
   10640:	e2505000 	subs	r5, r0, #0
   10644:	0a000028 	beq	106ec <CTimer::PollKernelTimers()+0xcc>
   10648:	e3a09000 	mov	r9, #0
   1064c:	e59f80fc 	ldr	r8, [pc, #252]	; 10750 <CTimer::PollKernelTimers()+0x130>
   10650:	e1a01005 	mov	r1, r5
   10654:	e1a00007 	mov	r0, r7
   10658:	eb000fd3 	bl	145ac <CPtrList::GetPtr(TPtrListElement*)>
   1065c:	e2504000 	subs	r4, r0, #0
   10660:	0a000032 	beq	10730 <CTimer::PollKernelTimers()+0x110>
   10664:	e5943000 	ldr	r3, [r4]
   10668:	e1530008 	cmp	r3, r8
   1066c:	1a000033 	bne	10740 <CTimer::PollKernelTimers()+0x120>
   10670:	e5962004 	ldr	r2, [r6, #4]
   10674:	e5943008 	ldr	r3, [r4, #8]
   10678:	e0433002 	sub	r3, r3, r2
   1067c:	e3530000 	cmp	r3, #0
   10680:	ca000019 	bgt	106ec <CTimer::PollKernelTimers()+0xcc>
   10684:	e1a01005 	mov	r1, r5
   10688:	e1a00007 	mov	r0, r7
   1068c:	eb000fb1 	bl	14558 <CPtrList::GetNext(TPtrListElement*)>
   10690:	e1a01005 	mov	r1, r5
   10694:	e1a0a000 	mov	sl, r0
   10698:	e1a00007 	mov	r0, r7
   1069c:	eb00104a 	bl	147cc <CPtrList::Remove(TPtrListElement*)>
   106a0:	e596301c 	ldr	r3, [r6, #28]
   106a4:	e3530000 	cmp	r3, #0
   106a8:	1a000014 	bne	10700 <CTimer::PollKernelTimers()+0xe0>
   106ac:	e5943004 	ldr	r3, [r4, #4]
   106b0:	e3530000 	cmp	r3, #0
   106b4:	0a000015 	beq	10710 <CTimer::PollKernelTimers()+0xf0>
   106b8:	e5942010 	ldr	r2, [r4, #16]
   106bc:	e594100c 	ldr	r1, [r4, #12]
   106c0:	e1a00004 	mov	r0, r4
   106c4:	e12fff33 	blx	r3
   106c8:	e1a00004 	mov	r0, r4
   106cc:	e5849000 	str	r9, [r4]
   106d0:	e3a01014 	mov	r1, #20
   106d4:	eb000489 	bl	11900 <operator delete(void*, unsigned int)>
   106d8:	e596001c 	ldr	r0, [r6, #28]
   106dc:	e3500000 	cmp	r0, #0
   106e0:	1a00000e 	bne	10720 <CTimer::PollKernelTimers()+0x100>
   106e4:	e25a5000 	subs	r5, sl, #0
   106e8:	1affffd8 	bne	10650 <CTimer::PollKernelTimers()+0x30>
   106ec:	e596301c 	ldr	r3, [r6, #28]
   106f0:	e3530000 	cmp	r3, #0
   106f4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   106f8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   106fc:	ea0007b3 	b	125d0 <LeaveCritical>
   10700:	eb0007b2 	bl	125d0 <LeaveCritical>
   10704:	e5943004 	ldr	r3, [r4, #4]
   10708:	e3530000 	cmp	r3, #0
   1070c:	1affffe9 	bne	106b8 <CTimer::PollKernelTimers()+0x98>
   10710:	e59f203c 	ldr	r2, [pc, #60]	; 10754 <CTimer::PollKernelTimers()+0x134>
   10714:	e59f103c 	ldr	r1, [pc, #60]	; 10758 <CTimer::PollKernelTimers()+0x138>
   10718:	e59f003c 	ldr	r0, [pc, #60]	; 1075c <CTimer::PollKernelTimers()+0x13c>
   1071c:	ebffe285 	bl	9138 <assertion_failed>
   10720:	eb000780 	bl	12528 <EnterCritical>
   10724:	eaffffee 	b	106e4 <CTimer::PollKernelTimers()+0xc4>
   10728:	eb00077e 	bl	12528 <EnterCritical>
   1072c:	eaffffc0 	b	10634 <CTimer::PollKernelTimers()+0x14>
   10730:	e59f2028 	ldr	r2, [pc, #40]	; 10760 <CTimer::PollKernelTimers()+0x140>
   10734:	e59f101c 	ldr	r1, [pc, #28]	; 10758 <CTimer::PollKernelTimers()+0x138>
   10738:	e59f0024 	ldr	r0, [pc, #36]	; 10764 <CTimer::PollKernelTimers()+0x144>
   1073c:	ebffe27d 	bl	9138 <assertion_failed>
   10740:	e59f2020 	ldr	r2, [pc, #32]	; 10768 <CTimer::PollKernelTimers()+0x148>
   10744:	e59f100c 	ldr	r1, [pc, #12]	; 10758 <CTimer::PollKernelTimers()+0x138>
   10748:	e59f001c 	ldr	r0, [pc, #28]	; 1076c <CTimer::PollKernelTimers()+0x14c>
   1074c:	ebffe279 	bl	9138 <assertion_failed>
   10750:	4b544d43 	.word	0x4b544d43
   10754:	000001e1 	.word	0x000001e1
   10758:	00017df0 	.word	0x00017df0
   1075c:	000182b8 	.word	0x000182b8
   10760:	000001d2 	.word	0x000001d2
   10764:	00017e24 	.word	0x00017e24
   10768:	000001d3 	.word	0x000001d3
   1076c:	00017e30 	.word	0x00017e30

00010770 <CTimer::InterruptHandler()>:
   10770:	e92d4070 	push	{r4, r5, r6, lr}
   10774:	e3a03000 	mov	r3, #0
   10778:	e1a04000 	mov	r4, r0
   1077c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   10780:	e59f30f4 	ldr	r3, [pc, #244]	; 1087c <CTimer::InterruptHandler()+0x10c>
   10784:	e1a01003 	mov	r1, r3
   10788:	e5933018 	ldr	r3, [r3, #24]
   1078c:	e2833c27 	add	r3, r3, #9984	; 0x2700
   10790:	e2833010 	add	r3, r3, #16
   10794:	e5813018 	str	r3, [r1, #24]
   10798:	e5912004 	ldr	r2, [r1, #4]
   1079c:	e0432002 	sub	r2, r3, r2
   107a0:	e3520001 	cmp	r2, #1
   107a4:	dafffff8 	ble	1078c <CTimer::InterruptHandler()+0x1c>
   107a8:	e3a02008 	mov	r2, #8
   107ac:	e3a03000 	mov	r3, #0
   107b0:	e5812000 	str	r2, [r1]
   107b4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   107b8:	e5940010 	ldr	r0, [r4, #16]
   107bc:	e1500003 	cmp	r0, r3
   107c0:	1a000017 	bne	10824 <CTimer::InterruptHandler()+0xb4>
   107c4:	e5942004 	ldr	r2, [r4, #4]
   107c8:	e59f30b0 	ldr	r3, [pc, #176]	; 10880 <CTimer::InterruptHandler()+0x110>
   107cc:	e2822001 	add	r2, r2, #1
   107d0:	e0831293 	umull	r1, r3, r3, r2
   107d4:	e1a032a3 	lsr	r3, r3, #5
   107d8:	e0833103 	add	r3, r3, r3, lsl #2
   107dc:	e0833103 	add	r3, r3, r3, lsl #2
   107e0:	e0523103 	subs	r3, r2, r3, lsl #2
   107e4:	e5842004 	str	r2, [r4, #4]
   107e8:	0a000019 	beq	10854 <CTimer::InterruptHandler()+0xe4>
   107ec:	e1a00004 	mov	r0, r4
   107f0:	ebffff8a 	bl	10620 <CTimer::PollKernelTimers()>
   107f4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   107f8:	e3530000 	cmp	r3, #0
   107fc:	08bd8070 	popeq	{r4, r5, r6, pc}
   10800:	e3a05000 	mov	r5, #0
   10804:	e284602c 	add	r6, r4, #44	; 0x2c
   10808:	e4963004 	ldr	r3, [r6], #4
   1080c:	e12fff33 	blx	r3
   10810:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   10814:	e2855001 	add	r5, r5, #1
   10818:	e1530005 	cmp	r3, r5
   1081c:	8afffff9 	bhi	10808 <CTimer::InterruptHandler()+0x98>
   10820:	e8bd8070 	pop	{r4, r5, r6, pc}
   10824:	eb00073f 	bl	12528 <EnterCritical>
   10828:	e5942004 	ldr	r2, [r4, #4]
   1082c:	e59f304c 	ldr	r3, [pc, #76]	; 10880 <CTimer::InterruptHandler()+0x110>
   10830:	e2822001 	add	r2, r2, #1
   10834:	e0831293 	umull	r1, r3, r3, r2
   10838:	e1a032a3 	lsr	r3, r3, #5
   1083c:	e0833103 	add	r3, r3, r3, lsl #2
   10840:	e0833103 	add	r3, r3, r3, lsl #2
   10844:	e1520103 	cmp	r2, r3, lsl #2
   10848:	e5842004 	str	r2, [r4, #4]
   1084c:	e5943010 	ldr	r3, [r4, #16]
   10850:	1a000005 	bne	1086c <CTimer::InterruptHandler()+0xfc>
   10854:	e5942008 	ldr	r2, [r4, #8]
   10858:	e2822001 	add	r2, r2, #1
   1085c:	e5842008 	str	r2, [r4, #8]
   10860:	e594200c 	ldr	r2, [r4, #12]
   10864:	e2822001 	add	r2, r2, #1
   10868:	e584200c 	str	r2, [r4, #12]
   1086c:	e3530000 	cmp	r3, #0
   10870:	0affffdd 	beq	107ec <CTimer::InterruptHandler()+0x7c>
   10874:	eb000755 	bl	125d0 <LeaveCritical>
   10878:	eaffffdb 	b	107ec <CTimer::InterruptHandler()+0x7c>
   1087c:	20003000 	.word	0x20003000
   10880:	51eb851f 	.word	0x51eb851f

00010884 <CTimer::InterruptHandler(void*)>:
   10884:	e3500000 	cmp	r0, #0
   10888:	0a000000 	beq	10890 <CTimer::InterruptHandler(void*)+0xc>
   1088c:	eaffffb7 	b	10770 <CTimer::InterruptHandler()>
   10890:	e92d4010 	push	{r4, lr}
   10894:	e3a02f8a 	mov	r2, #552	; 0x228
   10898:	e59f1004 	ldr	r1, [pc, #4]	; 108a4 <CTimer::InterruptHandler(void*)+0x20>
   1089c:	e59f0004 	ldr	r0, [pc, #4]	; 108a8 <CTimer::InterruptHandler(void*)+0x24>
   108a0:	ebffe224 	bl	9138 <assertion_failed>
   108a4:	00017df0 	.word	0x00017df0
   108a8:	00017ee4 	.word	0x00017ee4

000108ac <CTimer::TuneMsDelay()>:
   108ac:	e92d4070 	push	{r4, r5, r6, lr}
   108b0:	e1a05000 	mov	r5, r0
   108b4:	e5900020 	ldr	r0, [r0, #32]
   108b8:	e24dd008 	sub	sp, sp, #8
   108bc:	e0603280 	rsb	r3, r0, r0, lsl #5
   108c0:	e0800103 	add	r0, r0, r3, lsl #2
   108c4:	e1a00180 	lsl	r0, r0, #3
   108c8:	e5954004 	ldr	r4, [r5, #4]
   108cc:	ebffe2a5 	bl	9368 <DelayLoop>
   108d0:	e5951004 	ldr	r1, [r5, #4]
   108d4:	e59f0068 	ldr	r0, [pc, #104]	; 10944 <CTimer::TuneMsDelay()+0x98>
   108d8:	e0411004 	sub	r1, r1, r4
   108dc:	eb0010f5 	bl	14cb8 <__udivsi3>
   108e0:	e1a06000 	mov	r6, r0
   108e4:	e5953020 	ldr	r3, [r5, #32]
   108e8:	e59f4058 	ldr	r4, [pc, #88]	; 10948 <CTimer::TuneMsDelay()+0x9c>
   108ec:	e0030093 	mul	r3, r3, r0
   108f0:	e0832394 	umull	r2, r3, r4, r3
   108f4:	e59f1050 	ldr	r1, [pc, #80]	; 1094c <CTimer::TuneMsDelay()+0xa0>
   108f8:	e1a032a3 	lsr	r3, r3, #5
   108fc:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   10900:	e0821291 	umull	r1, r2, r1, r2
   10904:	e1a02322 	lsr	r2, r2, #6
   10908:	e5852024 	str	r2, [r5, #36]	; 0x24
   1090c:	e5853020 	str	r3, [r5, #32]
   10910:	ebffe9f5 	bl	b0ec <CLogger::Get()>
   10914:	e0832694 	umull	r2, r3, r4, r6
   10918:	e1a032a3 	lsr	r3, r3, #5
   1091c:	e0832103 	add	r2, r3, r3, lsl #2
   10920:	e0822102 	add	r2, r2, r2, lsl #2
   10924:	e0466102 	sub	r6, r6, r2, lsl #2
   10928:	e88d0048 	stm	sp, {r3, r6}
   1092c:	e3a02003 	mov	r2, #3
   10930:	e59f3018 	ldr	r3, [pc, #24]	; 10950 <CTimer::TuneMsDelay()+0xa4>
   10934:	e59f1018 	ldr	r1, [pc, #24]	; 10954 <CTimer::TuneMsDelay()+0xa8>
   10938:	ebffe92d 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1093c:	e28dd008 	add	sp, sp, #8
   10940:	e8bd8070 	pop	{r4, r5, r6, pc}
   10944:	00002710 	.word	0x00002710
   10948:	51eb851f 	.word	0x51eb851f
   1094c:	10624dd3 	.word	0x10624dd3
   10950:	00017ef0 	.word	0x00017ef0
   10954:	00017de8 	.word	0x00017de8

00010958 <CTimer::Initialize()>:
   10958:	e92d4070 	push	{r4, r5, r6, lr}
   1095c:	e1a04000 	mov	r4, r0
   10960:	e5900000 	ldr	r0, [r0]
   10964:	e3500000 	cmp	r0, #0
   10968:	0a000011 	beq	109b4 <CTimer::Initialize()+0x5c>
   1096c:	e1a03004 	mov	r3, r4
   10970:	e59f204c 	ldr	r2, [pc, #76]	; 109c4 <CTimer::Initialize()+0x6c>
   10974:	e3a01003 	mov	r1, #3
   10978:	eb0007e8 	bl	12920 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   1097c:	e3a05000 	mov	r5, #0
   10980:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   10984:	e59f203c 	ldr	r2, [pc, #60]	; 109c8 <CTimer::Initialize()+0x70>
   10988:	e59f303c 	ldr	r3, [pc, #60]	; 109cc <CTimer::Initialize()+0x74>
   1098c:	e1a00004 	mov	r0, r4
   10990:	e5823004 	str	r3, [r2, #4]
   10994:	e5923004 	ldr	r3, [r2, #4]
   10998:	e2833c27 	add	r3, r3, #9984	; 0x2700
   1099c:	e2833010 	add	r3, r3, #16
   109a0:	e5823018 	str	r3, [r2, #24]
   109a4:	ebffffc0 	bl	108ac <CTimer::TuneMsDelay()>
   109a8:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   109ac:	e3a00001 	mov	r0, #1
   109b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   109b4:	e3a02064 	mov	r2, #100	; 0x64
   109b8:	e59f1010 	ldr	r1, [pc, #16]	; 109d0 <CTimer::Initialize()+0x78>
   109bc:	e59f0010 	ldr	r0, [pc, #16]	; 109d4 <CTimer::Initialize()+0x7c>
   109c0:	ebffe1dc 	bl	9138 <assertion_failed>
   109c4:	00010884 	.word	0x00010884
   109c8:	20003000 	.word	0x20003000
   109cc:	fe363c80 	.word	0xfe363c80
   109d0:	00017df0 	.word	0x00017df0
   109d4:	00017e0c 	.word	0x00017e0c

000109d8 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
   109d8:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   109dc:	e92d4010 	push	{r4, lr}
   109e0:	e3530000 	cmp	r3, #0
   109e4:	1a000006 	bne	10a04 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x2c>
   109e8:	e3510000 	cmp	r1, #0
   109ec:	e5801028 	str	r1, [r0, #40]	; 0x28
   109f0:	18bd8010 	popne	{r4, pc}
   109f4:	e3a02d09 	mov	r2, #576	; 0x240
   109f8:	e59f1014 	ldr	r1, [pc, #20]	; 10a14 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x3c>
   109fc:	e59f0014 	ldr	r0, [pc, #20]	; 10a18 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x40>
   10a00:	ebffe1cc 	bl	9138 <assertion_failed>
   10a04:	e59f2010 	ldr	r2, [pc, #16]	; 10a1c <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x44>
   10a08:	e59f1004 	ldr	r1, [pc, #4]	; 10a14 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x3c>
   10a0c:	e59f000c 	ldr	r0, [pc, #12]	; 10a20 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x48>
   10a10:	ebffe1c8 	bl	9138 <assertion_failed>
   10a14:	00017df0 	.word	0x00017df0
   10a18:	00017f24 	.word	0x00017f24
   10a1c:	0000023e 	.word	0x0000023e
   10a20:	00017f08 	.word	0x00017f08

00010a24 <CTimer::RegisterPeriodicHandler(void (*)())>:
   10a24:	e3510000 	cmp	r1, #0
   10a28:	e92d4010 	push	{r4, lr}
   10a2c:	0a00000b 	beq	10a60 <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
   10a30:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   10a34:	e3530003 	cmp	r3, #3
   10a38:	8a00000c 	bhi	10a70 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   10a3c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   10a40:	e3a02000 	mov	r2, #0
   10a44:	e0803103 	add	r3, r0, r3, lsl #2
   10a48:	e583102c 	str	r1, [r3, #44]	; 0x2c
   10a4c:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   10a50:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   10a54:	e2833001 	add	r3, r3, #1
   10a58:	e580303c 	str	r3, [r0, #60]	; 0x3c
   10a5c:	e8bd8010 	pop	{r4, pc}
   10a60:	e59f2018 	ldr	r2, [pc, #24]	; 10a80 <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
   10a64:	e59f1018 	ldr	r1, [pc, #24]	; 10a84 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   10a68:	e59f0018 	ldr	r0, [pc, #24]	; 10a88 <CTimer::RegisterPeriodicHandler(void (*)())+0x64>
   10a6c:	ebffe1b1 	bl	9138 <assertion_failed>
   10a70:	e59f2014 	ldr	r2, [pc, #20]	; 10a8c <CTimer::RegisterPeriodicHandler(void (*)())+0x68>
   10a74:	e59f1008 	ldr	r1, [pc, #8]	; 10a84 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   10a78:	e59f0010 	ldr	r0, [pc, #16]	; 10a90 <CTimer::RegisterPeriodicHandler(void (*)())+0x6c>
   10a7c:	ebffe1ad 	bl	9138 <assertion_failed>
   10a80:	00000245 	.word	0x00000245
   10a84:	00017df0 	.word	0x00017df0
   10a88:	000182b8 	.word	0x000182b8
   10a8c:	00000247 	.word	0x00000247
   10a90:	00017f40 	.word	0x00017f40

00010a94 <CTimer::SimpleMsDelay(unsigned int)>:
   10a94:	e3500000 	cmp	r0, #0
   10a98:	012fff1e 	bxeq	lr
   10a9c:	e0603280 	rsb	r3, r0, r0, lsl #5
   10aa0:	e0800103 	add	r0, r0, r3, lsl #2
   10aa4:	e1b00180 	lsls	r0, r0, #3
   10aa8:	012fff1e 	bxeq	lr
   10aac:	eafffcbf 	b	fdb0 <CTimer::SimpleusDelay(unsigned int) [clone .part.5]>

00010ab0 <CTimer::SimpleusDelay(unsigned int)>:
   10ab0:	e3500000 	cmp	r0, #0
   10ab4:	012fff1e 	bxeq	lr
   10ab8:	eafffcbc 	b	fdb0 <CTimer::SimpleusDelay(unsigned int) [clone .part.5]>

00010abc <CTimer::IsLeapYear(unsigned int)>:
   10abc:	e59f2040 	ldr	r2, [pc, #64]	; 10b04 <CTimer::IsLeapYear(unsigned int)+0x48>
   10ac0:	e0823092 	umull	r3, r2, r2, r0
   10ac4:	e1a032a2 	lsr	r3, r2, #5
   10ac8:	e0833103 	add	r3, r3, r3, lsl #2
   10acc:	e0833103 	add	r3, r3, r3, lsl #2
   10ad0:	e1500103 	cmp	r0, r3, lsl #2
   10ad4:	0a000003 	beq	10ae8 <CTimer::IsLeapYear(unsigned int)+0x2c>
   10ad8:	e3100003 	tst	r0, #3
   10adc:	03a00001 	moveq	r0, #1
   10ae0:	13a00000 	movne	r0, #0
   10ae4:	e12fff1e 	bx	lr
   10ae8:	e1a023a2 	lsr	r2, r2, #7
   10aec:	e0822102 	add	r2, r2, r2, lsl #2
   10af0:	e0822102 	add	r2, r2, r2, lsl #2
   10af4:	e1500202 	cmp	r0, r2, lsl #4
   10af8:	03a00001 	moveq	r0, #1
   10afc:	13a00000 	movne	r0, #0
   10b00:	e12fff1e 	bx	lr
   10b04:	51eb851f 	.word	0x51eb851f

00010b08 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   10b08:	e3500001 	cmp	r0, #1
   10b0c:	0a000002 	beq	10b1c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   10b10:	e59f3058 	ldr	r3, [pc, #88]	; 10b70 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   10b14:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   10b18:	e12fff1e 	bx	lr
   10b1c:	e59f2050 	ldr	r2, [pc, #80]	; 10b74 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   10b20:	e0823192 	umull	r3, r2, r2, r1
   10b24:	e1a032a2 	lsr	r3, r2, #5
   10b28:	e0833103 	add	r3, r3, r3, lsl #2
   10b2c:	e0833103 	add	r3, r3, r3, lsl #2
   10b30:	e1510103 	cmp	r1, r3, lsl #2
   10b34:	0a000006 	beq	10b54 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   10b38:	e3110003 	tst	r1, #3
   10b3c:	03a03001 	moveq	r3, #1
   10b40:	13a03000 	movne	r3, #0
   10b44:	e3530000 	cmp	r3, #0
   10b48:	0afffff0 	beq	10b10 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   10b4c:	e3a0001d 	mov	r0, #29
   10b50:	e12fff1e 	bx	lr
   10b54:	e1a023a2 	lsr	r2, r2, #7
   10b58:	e0822102 	add	r2, r2, r2, lsl #2
   10b5c:	e0822102 	add	r2, r2, r2, lsl #2
   10b60:	e1510202 	cmp	r1, r2, lsl #4
   10b64:	03a03001 	moveq	r3, #1
   10b68:	13a03000 	movne	r3, #0
   10b6c:	eafffff4 	b	10b44 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   10b70:	00017db8 	.word	0x00017db8
   10b74:	51eb851f 	.word	0x51eb851f

00010b78 <CTimer::Get()>:
   10b78:	e59f301c 	ldr	r3, [pc, #28]	; 10b9c <CTimer::Get()+0x24>
   10b7c:	e5930000 	ldr	r0, [r3]
   10b80:	e3500000 	cmp	r0, #0
   10b84:	112fff1e 	bxne	lr
   10b88:	e92d4010 	push	{r4, lr}
   10b8c:	e3a02fa2 	mov	r2, #648	; 0x288
   10b90:	e59f1008 	ldr	r1, [pc, #8]	; 10ba0 <CTimer::Get()+0x28>
   10b94:	e59f0008 	ldr	r0, [pc, #8]	; 10ba4 <CTimer::Get()+0x2c>
   10b98:	ebffe166 	bl	9138 <assertion_failed>
   10b9c:	00019b84 	.word	0x00019b84
   10ba0:	00017df0 	.word	0x00017df0
   10ba4:	00017f74 	.word	0x00017f74

00010ba8 <memmove>:
   10ba8:	e1500001 	cmp	r0, r1
   10bac:	9a000002 	bls	10bbc <memmove+0x14>
   10bb0:	e0813002 	add	r3, r1, r2
   10bb4:	e1530000 	cmp	r3, r0
   10bb8:	8a000000 	bhi	10bc0 <memmove+0x18>
   10bbc:	ea000234 	b	11494 <memcpy>
   10bc0:	e3520000 	cmp	r2, #0
   10bc4:	e0802002 	add	r2, r0, r2
   10bc8:	012fff1e 	bxeq	lr
   10bcc:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   10bd0:	e1510003 	cmp	r1, r3
   10bd4:	e562c001 	strb	ip, [r2, #-1]!
   10bd8:	1afffffb 	bne	10bcc <memmove+0x24>
   10bdc:	e12fff1e 	bx	lr

00010be0 <memcmp>:
   10be0:	e3520000 	cmp	r2, #0
   10be4:	e242c001 	sub	ip, r2, #1
   10be8:	0a00000d 	beq	10c24 <memcmp+0x44>
   10bec:	e5d02000 	ldrb	r2, [r0]
   10bf0:	e5d13000 	ldrb	r3, [r1]
   10bf4:	e1520003 	cmp	r2, r3
   10bf8:	8a00000b 	bhi	10c2c <memcmp+0x4c>
   10bfc:	3a00000c 	bcc	10c34 <memcmp+0x54>
   10c00:	e081c00c 	add	ip, r1, ip
   10c04:	ea000004 	b	10c1c <memcmp+0x3c>
   10c08:	e5f02001 	ldrb	r2, [r0, #1]!
   10c0c:	e5f13001 	ldrb	r3, [r1, #1]!
   10c10:	e1520003 	cmp	r2, r3
   10c14:	8a000004 	bhi	10c2c <memcmp+0x4c>
   10c18:	3a000005 	bcc	10c34 <memcmp+0x54>
   10c1c:	e151000c 	cmp	r1, ip
   10c20:	1afffff8 	bne	10c08 <memcmp+0x28>
   10c24:	e3a00000 	mov	r0, #0
   10c28:	e12fff1e 	bx	lr
   10c2c:	e3a00001 	mov	r0, #1
   10c30:	e12fff1e 	bx	lr
   10c34:	e3e00000 	mvn	r0, #0
   10c38:	e12fff1e 	bx	lr

00010c3c <strlen>:
   10c3c:	e0d030d1 	ldrsb	r3, [r0], #1
   10c40:	e3530000 	cmp	r3, #0
   10c44:	0a000004 	beq	10c5c <strlen+0x20>
   10c48:	e3a03000 	mov	r3, #0
   10c4c:	e0d020d1 	ldrsb	r2, [r0], #1
   10c50:	e2833001 	add	r3, r3, #1
   10c54:	e3520000 	cmp	r2, #0
   10c58:	1afffffb 	bne	10c4c <strlen+0x10>
   10c5c:	e1a00003 	mov	r0, r3
   10c60:	e12fff1e 	bx	lr

00010c64 <strcmp>:
   10c64:	e1d030d0 	ldrsb	r3, [r0]
   10c68:	e1d120d0 	ldrsb	r2, [r1]
   10c6c:	e3530000 	cmp	r3, #0
   10c70:	0a00000e 	beq	10cb0 <strcmp+0x4c>
   10c74:	e3520000 	cmp	r2, #0
   10c78:	0a00000c 	beq	10cb0 <strcmp+0x4c>
   10c7c:	e1520003 	cmp	r2, r3
   10c80:	ba00000f 	blt	10cc4 <strcmp+0x60>
   10c84:	da000005 	ble	10ca0 <strcmp+0x3c>
   10c88:	ea00000f 	b	10ccc <strcmp+0x68>
   10c8c:	e3520000 	cmp	r2, #0
   10c90:	0a000006 	beq	10cb0 <strcmp+0x4c>
   10c94:	e1530002 	cmp	r3, r2
   10c98:	ca000009 	bgt	10cc4 <strcmp+0x60>
   10c9c:	ba00000a 	blt	10ccc <strcmp+0x68>
   10ca0:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10ca4:	e1f120d1 	ldrsb	r2, [r1, #1]!
   10ca8:	e3530000 	cmp	r3, #0
   10cac:	1afffff6 	bne	10c8c <strcmp+0x28>
   10cb0:	e1530002 	cmp	r3, r2
   10cb4:	ca000002 	bgt	10cc4 <strcmp+0x60>
   10cb8:	b3e00000 	mvnlt	r0, #0
   10cbc:	a3a00000 	movge	r0, #0
   10cc0:	e12fff1e 	bx	lr
   10cc4:	e3a00001 	mov	r0, #1
   10cc8:	e12fff1e 	bx	lr
   10ccc:	e3e00000 	mvn	r0, #0
   10cd0:	e12fff1e 	bx	lr

00010cd4 <strcasecmp>:
   10cd4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10cd8:	e2400001 	sub	r0, r0, #1
   10cdc:	e2411001 	sub	r1, r1, #1
   10ce0:	ea000007 	b	10d04 <strcasecmp+0x30>
   10ce4:	e35e0019 	cmp	lr, #25
   10ce8:	81a0c002 	movhi	ip, r2
   10cec:	9242c020 	subls	ip, r2, #32
   10cf0:	e35c0000 	cmp	ip, #0
   10cf4:	0a00000a 	beq	10d24 <strcasecmp+0x50>
   10cf8:	e153000c 	cmp	r3, ip
   10cfc:	ca00000f 	bgt	10d40 <strcasecmp+0x6c>
   10d00:	ba000010 	blt	10d48 <strcasecmp+0x74>
   10d04:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10d08:	e2432061 	sub	r2, r3, #97	; 0x61
   10d0c:	e3520019 	cmp	r2, #25
   10d10:	92433020 	subls	r3, r3, #32
   10d14:	e1f120d1 	ldrsb	r2, [r1, #1]!
   10d18:	e3530000 	cmp	r3, #0
   10d1c:	e242e061 	sub	lr, r2, #97	; 0x61
   10d20:	1affffef 	bne	10ce4 <strcasecmp+0x10>
   10d24:	e35e0019 	cmp	lr, #25
   10d28:	92422020 	subls	r2, r2, #32
   10d2c:	e1530002 	cmp	r3, r2
   10d30:	ca000002 	bgt	10d40 <strcasecmp+0x6c>
   10d34:	b3e00000 	mvnlt	r0, #0
   10d38:	a3a00000 	movge	r0, #0
   10d3c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10d40:	e3a00001 	mov	r0, #1
   10d44:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10d48:	e3e00000 	mvn	r0, #0
   10d4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00010d50 <strncmp>:
   10d50:	e3520000 	cmp	r2, #0
   10d54:	0a000016 	beq	10db4 <strncmp+0x64>
   10d58:	e1d030d0 	ldrsb	r3, [r0]
   10d5c:	e1d1c0d0 	ldrsb	ip, [r1]
   10d60:	e3530000 	cmp	r3, #0
   10d64:	0a000015 	beq	10dc0 <strncmp+0x70>
   10d68:	e35c0000 	cmp	ip, #0
   10d6c:	0a000013 	beq	10dc0 <strncmp+0x70>
   10d70:	e153000c 	cmp	r3, ip
   10d74:	ca000016 	bgt	10dd4 <strncmp+0x84>
   10d78:	ba000017 	blt	10ddc <strncmp+0x8c>
   10d7c:	e2422001 	sub	r2, r2, #1
   10d80:	e0812002 	add	r2, r1, r2
   10d84:	ea000008 	b	10dac <strncmp+0x5c>
   10d88:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10d8c:	e3530000 	cmp	r3, #0
   10d90:	0a000009 	beq	10dbc <strncmp+0x6c>
   10d94:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   10d98:	e35c0000 	cmp	ip, #0
   10d9c:	0a000007 	beq	10dc0 <strncmp+0x70>
   10da0:	e153000c 	cmp	r3, ip
   10da4:	ca00000a 	bgt	10dd4 <strncmp+0x84>
   10da8:	ba00000b 	blt	10ddc <strncmp+0x8c>
   10dac:	e1510002 	cmp	r1, r2
   10db0:	1afffff4 	bne	10d88 <strncmp+0x38>
   10db4:	e3a00000 	mov	r0, #0
   10db8:	e12fff1e 	bx	lr
   10dbc:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   10dc0:	e153000c 	cmp	r3, ip
   10dc4:	ca000002 	bgt	10dd4 <strncmp+0x84>
   10dc8:	b3e00000 	mvnlt	r0, #0
   10dcc:	a3a00000 	movge	r0, #0
   10dd0:	e12fff1e 	bx	lr
   10dd4:	e3a00001 	mov	r0, #1
   10dd8:	e12fff1e 	bx	lr
   10ddc:	e3e00000 	mvn	r0, #0
   10de0:	e12fff1e 	bx	lr

00010de4 <strncasecmp>:
   10de4:	e3520000 	cmp	r2, #0
   10de8:	0a000020 	beq	10e70 <strncasecmp+0x8c>
   10dec:	e92d4010 	push	{r4, lr}
   10df0:	e2400001 	sub	r0, r0, #1
   10df4:	e2411001 	sub	r1, r1, #1
   10df8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10dfc:	e243c061 	sub	ip, r3, #97	; 0x61
   10e00:	e35c0019 	cmp	ip, #25
   10e04:	92433020 	subls	r3, r3, #32
   10e08:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   10e0c:	e3530000 	cmp	r3, #0
   10e10:	e24c4061 	sub	r4, ip, #97	; 0x61
   10e14:	1a000007 	bne	10e38 <strncasecmp+0x54>
   10e18:	e3540019 	cmp	r4, #25
   10e1c:	9a000017 	bls	10e80 <strncasecmp+0x9c>
   10e20:	e153000c 	cmp	r3, ip
   10e24:	ca00000f 	bgt	10e68 <strncasecmp+0x84>
   10e28:	b3e02000 	mvnlt	r2, #0
   10e2c:	a3a02000 	movge	r2, #0
   10e30:	e1a00002 	mov	r0, r2
   10e34:	e8bd8010 	pop	{r4, pc}
   10e38:	e3540019 	cmp	r4, #25
   10e3c:	81a0e00c 	movhi	lr, ip
   10e40:	924ce020 	subls	lr, ip, #32
   10e44:	e35e0000 	cmp	lr, #0
   10e48:	0afffff2 	beq	10e18 <strncasecmp+0x34>
   10e4c:	e153000e 	cmp	r3, lr
   10e50:	ca000004 	bgt	10e68 <strncasecmp+0x84>
   10e54:	ba000007 	blt	10e78 <strncasecmp+0x94>
   10e58:	e2522001 	subs	r2, r2, #1
   10e5c:	1affffe5 	bne	10df8 <strncasecmp+0x14>
   10e60:	e1a00002 	mov	r0, r2
   10e64:	e8bd8010 	pop	{r4, pc}
   10e68:	e3a02001 	mov	r2, #1
   10e6c:	eaffffef 	b	10e30 <strncasecmp+0x4c>
   10e70:	e1a00002 	mov	r0, r2
   10e74:	e12fff1e 	bx	lr
   10e78:	e3e02000 	mvn	r2, #0
   10e7c:	eaffffeb 	b	10e30 <strncasecmp+0x4c>
   10e80:	e24cc020 	sub	ip, ip, #32
   10e84:	eaffffe5 	b	10e20 <strncasecmp+0x3c>

00010e88 <strcpy>:
   10e88:	e1d130d0 	ldrsb	r3, [r1]
   10e8c:	e1a02000 	mov	r2, r0
   10e90:	e3530000 	cmp	r3, #0
   10e94:	0a000003 	beq	10ea8 <strcpy+0x20>
   10e98:	e4c23001 	strb	r3, [r2], #1
   10e9c:	e1f130d1 	ldrsb	r3, [r1, #1]!
   10ea0:	e3530000 	cmp	r3, #0
   10ea4:	1afffffb 	bne	10e98 <strcpy+0x10>
   10ea8:	e3a03000 	mov	r3, #0
   10eac:	e5c23000 	strb	r3, [r2]
   10eb0:	e12fff1e 	bx	lr

00010eb4 <strncpy>:
   10eb4:	e3520000 	cmp	r2, #0
   10eb8:	012fff1e 	bxeq	lr
   10ebc:	e1d1c0d0 	ldrsb	ip, [r1]
   10ec0:	e35c0000 	cmp	ip, #0
   10ec4:	0a00000a 	beq	10ef4 <strncpy+0x40>
   10ec8:	e1a03000 	mov	r3, r0
   10ecc:	e0802002 	add	r2, r0, r2
   10ed0:	e4c3c001 	strb	ip, [r3], #1
   10ed4:	e1530002 	cmp	r3, r2
   10ed8:	012fff1e 	bxeq	lr
   10edc:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   10ee0:	e35c0000 	cmp	ip, #0
   10ee4:	1afffff9 	bne	10ed0 <strncpy+0x1c>
   10ee8:	e3a02000 	mov	r2, #0
   10eec:	e5c32000 	strb	r2, [r3]
   10ef0:	e12fff1e 	bx	lr
   10ef4:	e1a03000 	mov	r3, r0
   10ef8:	eafffffa 	b	10ee8 <strncpy+0x34>

00010efc <strcat>:
   10efc:	e1d030d0 	ldrsb	r3, [r0]
   10f00:	e3530000 	cmp	r3, #0
   10f04:	e1a03000 	mov	r3, r0
   10f08:	0a000002 	beq	10f18 <strcat+0x1c>
   10f0c:	e1f320d1 	ldrsb	r2, [r3, #1]!
   10f10:	e3520000 	cmp	r2, #0
   10f14:	1afffffc 	bne	10f0c <strcat+0x10>
   10f18:	e1d120d0 	ldrsb	r2, [r1]
   10f1c:	e3520000 	cmp	r2, #0
   10f20:	0a000003 	beq	10f34 <strcat+0x38>
   10f24:	e4c32001 	strb	r2, [r3], #1
   10f28:	e1f120d1 	ldrsb	r2, [r1, #1]!
   10f2c:	e3520000 	cmp	r2, #0
   10f30:	1afffffb 	bne	10f24 <strcat+0x28>
   10f34:	e3a02000 	mov	r2, #0
   10f38:	e5c32000 	strb	r2, [r3]
   10f3c:	e12fff1e 	bx	lr

00010f40 <strchr>:
   10f40:	e1d020d0 	ldrsb	r2, [r0]
   10f44:	e3520000 	cmp	r2, #0
   10f48:	0a000009 	beq	10f74 <strchr+0x34>
   10f4c:	e1510002 	cmp	r1, r2
   10f50:	1a000002 	bne	10f60 <strchr+0x20>
   10f54:	e12fff1e 	bx	lr
   10f58:	e1530001 	cmp	r3, r1
   10f5c:	012fff1e 	bxeq	lr
   10f60:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10f64:	e3530000 	cmp	r3, #0
   10f68:	1afffffa 	bne	10f58 <strchr+0x18>
   10f6c:	e1a00003 	mov	r0, r3
   10f70:	e12fff1e 	bx	lr
   10f74:	e1a00002 	mov	r0, r2
   10f78:	e12fff1e 	bx	lr

00010f7c <strstr>:
   10f7c:	e92d4010 	push	{r4, lr}
   10f80:	e1d030d0 	ldrsb	r3, [r0]
   10f84:	e1d140d0 	ldrsb	r4, [r1]
   10f88:	e3530000 	cmp	r3, #0
   10f8c:	1a000005 	bne	10fa8 <strstr+0x2c>
   10f90:	e3540000 	cmp	r4, #0
   10f94:	13a00000 	movne	r0, #0
   10f98:	e8bd8010 	pop	{r4, pc}
   10f9c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10fa0:	e3530000 	cmp	r3, #0
   10fa4:	0a00000d 	beq	10fe0 <strstr+0x64>
   10fa8:	e3540000 	cmp	r4, #0
   10fac:	08bd8010 	popeq	{r4, pc}
   10fb0:	e1d030d0 	ldrsb	r3, [r0]
   10fb4:	e1530004 	cmp	r3, r4
   10fb8:	1afffff7 	bne	10f9c <strstr+0x20>
   10fbc:	e1a02001 	mov	r2, r1
   10fc0:	e1a0c000 	mov	ip, r0
   10fc4:	e1f230d1 	ldrsb	r3, [r2, #1]!
   10fc8:	e3530000 	cmp	r3, #0
   10fcc:	08bd8010 	popeq	{r4, pc}
   10fd0:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   10fd4:	e15e0003 	cmp	lr, r3
   10fd8:	0afffff9 	beq	10fc4 <strstr+0x48>
   10fdc:	eaffffee 	b	10f9c <strstr+0x20>
   10fe0:	e1a00003 	mov	r0, r3
   10fe4:	e8bd8010 	pop	{r4, pc}

00010fe8 <strtok_r>:
   10fe8:	e3500000 	cmp	r0, #0
   10fec:	0a000024 	beq	11084 <strtok_r+0x9c>
   10ff0:	e1d0c0d0 	ldrsb	ip, [r0]
   10ff4:	e35c0000 	cmp	ip, #0
   10ff8:	0a000027 	beq	1109c <strtok_r+0xb4>
   10ffc:	e92d4030 	push	{r4, r5, lr}
   11000:	e1d140d0 	ldrsb	r4, [r1]
   11004:	e3540000 	cmp	r4, #0
   11008:	0a000008 	beq	11030 <strtok_r+0x48>
   1100c:	e154000c 	cmp	r4, ip
   11010:	0a000019 	beq	1107c <strtok_r+0x94>
   11014:	e1a0e001 	mov	lr, r1
   11018:	ea000001 	b	11024 <strtok_r+0x3c>
   1101c:	e153000c 	cmp	r3, ip
   11020:	0a000015 	beq	1107c <strtok_r+0x94>
   11024:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   11028:	e3530000 	cmp	r3, #0
   1102c:	1afffffa 	bne	1101c <strtok_r+0x34>
   11030:	e35c0000 	cmp	ip, #0
   11034:	11a05000 	movne	r5, r0
   11038:	0a00001e 	beq	110b8 <strtok_r+0xd0>
   1103c:	e3540000 	cmp	r4, #0
   11040:	0a000008 	beq	11068 <strtok_r+0x80>
   11044:	e15c0004 	cmp	ip, r4
   11048:	0a000016 	beq	110a8 <strtok_r+0xc0>
   1104c:	e1a0e001 	mov	lr, r1
   11050:	ea000001 	b	1105c <strtok_r+0x74>
   11054:	e15c0003 	cmp	ip, r3
   11058:	0a000012 	beq	110a8 <strtok_r+0xc0>
   1105c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   11060:	e3530000 	cmp	r3, #0
   11064:	1afffffa 	bne	11054 <strtok_r+0x6c>
   11068:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
   1106c:	e35c0000 	cmp	ip, #0
   11070:	1afffff1 	bne	1103c <strtok_r+0x54>
   11074:	e5825000 	str	r5, [r2]
   11078:	e8bd8030 	pop	{r4, r5, pc}
   1107c:	e1f0c0d1 	ldrsb	ip, [r0, #1]!
   11080:	eaffffdf 	b	11004 <strtok_r+0x1c>
   11084:	e5920000 	ldr	r0, [r2]
   11088:	e3500000 	cmp	r0, #0
   1108c:	012fff1e 	bxeq	lr
   11090:	e1d0c0d0 	ldrsb	ip, [r0]
   11094:	e35c0000 	cmp	ip, #0
   11098:	1affffd7 	bne	10ffc <strtok_r+0x14>
   1109c:	e3a00000 	mov	r0, #0
   110a0:	e5820000 	str	r0, [r2]
   110a4:	e12fff1e 	bx	lr
   110a8:	e3a03000 	mov	r3, #0
   110ac:	e4c53001 	strb	r3, [r5], #1
   110b0:	e5825000 	str	r5, [r2]
   110b4:	e8bd8030 	pop	{r4, r5, pc}
   110b8:	e3a00000 	mov	r0, #0
   110bc:	e5820000 	str	r0, [r2]
   110c0:	e8bd8030 	pop	{r4, r5, pc}

000110c4 <strtoul>:
   110c4:	e3510000 	cmp	r1, #0
   110c8:	e2423002 	sub	r3, r2, #2
   110cc:	15810000 	strne	r0, [r1]
   110d0:	e3520000 	cmp	r2, #0
   110d4:	13530022 	cmpne	r3, #34	; 0x22
   110d8:	8a000043 	bhi	111ec <strtoul+0x128>
   110dc:	e92d4070 	push	{r4, r5, r6, lr}
   110e0:	e1d030d0 	ldrsb	r3, [r0]
   110e4:	e1a0e000 	mov	lr, r0
   110e8:	e243c009 	sub	ip, r3, #9
   110ec:	e3530020 	cmp	r3, #32
   110f0:	e2800001 	add	r0, r0, #1
   110f4:	e6efc07c 	uxtb	ip, ip
   110f8:	0afffff8 	beq	110e0 <strtoul+0x1c>
   110fc:	e35c0004 	cmp	ip, #4
   11100:	9afffff6 	bls	110e0 <strtoul+0x1c>
   11104:	e353002b 	cmp	r3, #43	; 0x2b
   11108:	0a000027 	beq	111ac <strtoul+0xe8>
   1110c:	e353002d 	cmp	r3, #45	; 0x2d
   11110:	01de30d1 	ldrsbeq	r3, [lr, #1]
   11114:	03a06001 	moveq	r6, #1
   11118:	01a0e000 	moveq	lr, r0
   1111c:	13a06000 	movne	r6, #0
   11120:	e3530030 	cmp	r3, #48	; 0x30
   11124:	0a000025 	beq	111c0 <strtoul+0xfc>
   11128:	e3520000 	cmp	r2, #0
   1112c:	03a0200a 	moveq	r2, #10
   11130:	e353002f 	cmp	r3, #47	; 0x2f
   11134:	e1a0c003 	mov	ip, r3
   11138:	da00003c 	ble	11230 <strtoul+0x16c>
   1113c:	e3a05001 	mov	r5, #1
   11140:	e3a04000 	mov	r4, #0
   11144:	ea000008 	b	1116c <strtoul+0xa8>
   11148:	e020c294 	mla	r0, r4, r2, ip
   1114c:	e1500004 	cmp	r0, r4
   11150:	3a00002b 	bcc	11204 <strtoul+0x140>
   11154:	e1fec0d1 	ldrsb	ip, [lr, #1]!
   11158:	e3a05000 	mov	r5, #0
   1115c:	e35c002f 	cmp	ip, #47	; 0x2f
   11160:	e1a0300c 	mov	r3, ip
   11164:	da00002b 	ble	11218 <strtoul+0x154>
   11168:	e1a04000 	mov	r4, r0
   1116c:	e2433061 	sub	r3, r3, #97	; 0x61
   11170:	e3530019 	cmp	r3, #25
   11174:	924cc020 	subls	ip, ip, #32
   11178:	e35c0040 	cmp	ip, #64	; 0x40
   1117c:	c24cc007 	subgt	ip, ip, #7
   11180:	e24cc030 	sub	ip, ip, #48	; 0x30
   11184:	e15c0002 	cmp	ip, r2
   11188:	baffffee 	blt	11148 <strtoul+0x84>
   1118c:	e1a00004 	mov	r0, r4
   11190:	e2253001 	eor	r3, r5, #1
   11194:	e3510000 	cmp	r1, #0
   11198:	e0033006 	and	r3, r3, r6
   1119c:	1581e000 	strne	lr, [r1]
   111a0:	e3530000 	cmp	r3, #0
   111a4:	12600000 	rsbne	r0, r0, #0
   111a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   111ac:	e1de30d1 	ldrsb	r3, [lr, #1]
   111b0:	e3a06000 	mov	r6, #0
   111b4:	e3530030 	cmp	r3, #48	; 0x30
   111b8:	e1a0e000 	mov	lr, r0
   111bc:	1affffd9 	bne	11128 <strtoul+0x64>
   111c0:	e1de30d1 	ldrsb	r3, [lr, #1]
   111c4:	e28ec001 	add	ip, lr, #1
   111c8:	e3c30020 	bic	r0, r3, #32
   111cc:	e3500058 	cmp	r0, #88	; 0x58
   111d0:	1a000007 	bne	111f4 <strtoul+0x130>
   111d4:	e3d23010 	bics	r3, r2, #16
   111d8:	1a000012 	bne	11228 <strtoul+0x164>
   111dc:	e1de30d2 	ldrsb	r3, [lr, #2]
   111e0:	e3a02010 	mov	r2, #16
   111e4:	e28ee002 	add	lr, lr, #2
   111e8:	eaffffd0 	b	11130 <strtoul+0x6c>
   111ec:	e3a00000 	mov	r0, #0
   111f0:	e12fff1e 	bx	lr
   111f4:	e3520000 	cmp	r2, #0
   111f8:	e1a0e00c 	mov	lr, ip
   111fc:	03a02008 	moveq	r2, #8
   11200:	eaffffca 	b	11130 <strtoul+0x6c>
   11204:	e3510000 	cmp	r1, #0
   11208:	0a000004 	beq	11220 <strtoul+0x15c>
   1120c:	e581e000 	str	lr, [r1]
   11210:	e3e00000 	mvn	r0, #0
   11214:	e8bd8070 	pop	{r4, r5, r6, pc}
   11218:	e3a03001 	mov	r3, #1
   1121c:	eaffffdc 	b	11194 <strtoul+0xd0>
   11220:	e3e00000 	mvn	r0, #0
   11224:	e8bd8070 	pop	{r4, r5, r6, pc}
   11228:	e3a00000 	mov	r0, #0
   1122c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11230:	e3510000 	cmp	r1, #0
   11234:	0afffffb 	beq	11228 <strtoul+0x164>
   11238:	e3a00000 	mov	r0, #0
   1123c:	e581e000 	str	lr, [r1]
   11240:	e8bd8070 	pop	{r4, r5, r6, pc}

00011244 <strtoull>:
   11244:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11248:	e2423002 	sub	r3, r2, #2
   1124c:	e2518000 	subs	r8, r1, #0
   11250:	15880000 	strne	r0, [r8]
   11254:	e3520000 	cmp	r2, #0
   11258:	13530022 	cmpne	r3, #34	; 0x22
   1125c:	8a000052 	bhi	113ac <strtoull+0x168>
   11260:	e1d030d0 	ldrsb	r3, [r0]
   11264:	e1a0e000 	mov	lr, r0
   11268:	e243c009 	sub	ip, r3, #9
   1126c:	e3530020 	cmp	r3, #32
   11270:	e2800001 	add	r0, r0, #1
   11274:	e6efc07c 	uxtb	ip, ip
   11278:	0afffff8 	beq	11260 <strtoull+0x1c>
   1127c:	e35c0004 	cmp	ip, #4
   11280:	9afffff6 	bls	11260 <strtoull+0x1c>
   11284:	e353002b 	cmp	r3, #43	; 0x2b
   11288:	0a000038 	beq	11370 <strtoull+0x12c>
   1128c:	e353002d 	cmp	r3, #45	; 0x2d
   11290:	01de30d1 	ldrsbeq	r3, [lr, #1]
   11294:	03a0c001 	moveq	ip, #1
   11298:	01a0e000 	moveq	lr, r0
   1129c:	13a0c000 	movne	ip, #0
   112a0:	e3530030 	cmp	r3, #48	; 0x30
   112a4:	0a000036 	beq	11384 <strtoull+0x140>
   112a8:	e3520000 	cmp	r2, #0
   112ac:	03a0200a 	moveq	r2, #10
   112b0:	e353002f 	cmp	r3, #47	; 0x2f
   112b4:	e1a09003 	mov	r9, r3
   112b8:	da000053 	ble	1140c <strtoull+0x1c8>
   112bc:	e3a0a001 	mov	sl, #1
   112c0:	e3a04000 	mov	r4, #0
   112c4:	e3a05000 	mov	r5, #0
   112c8:	e1a06002 	mov	r6, r2
   112cc:	e1a07fc2 	asr	r7, r2, #31
   112d0:	ea000011 	b	1131c <strtoull+0xd8>
   112d4:	e0030592 	mul	r3, r2, r5
   112d8:	e0810492 	umull	r0, r1, r2, r4
   112dc:	e0233794 	mla	r3, r4, r7, r3
   112e0:	e090a009 	adds	sl, r0, r9
   112e4:	e0831001 	add	r1, r3, r1
   112e8:	e0a1bfc9 	adc	fp, r1, r9, asr #31
   112ec:	e15b0005 	cmp	fp, r5
   112f0:	015a0004 	cmpeq	sl, r4
   112f4:	e1a0000a 	mov	r0, sl
   112f8:	e1a0100b 	mov	r1, fp
   112fc:	3a000033 	bcc	113d0 <strtoull+0x18c>
   11300:	e1fe90d1 	ldrsb	r9, [lr, #1]!
   11304:	e3a0a000 	mov	sl, #0
   11308:	e359002f 	cmp	r9, #47	; 0x2f
   1130c:	e1a03009 	mov	r3, r9
   11310:	da000036 	ble	113f0 <strtoull+0x1ac>
   11314:	e1a04000 	mov	r4, r0
   11318:	e1a0500b 	mov	r5, fp
   1131c:	e2433061 	sub	r3, r3, #97	; 0x61
   11320:	e3530019 	cmp	r3, #25
   11324:	92499020 	subls	r9, r9, #32
   11328:	e3590040 	cmp	r9, #64	; 0x40
   1132c:	c2499007 	subgt	r9, r9, #7
   11330:	e2499030 	sub	r9, r9, #48	; 0x30
   11334:	e1590002 	cmp	r9, r2
   11338:	baffffe5 	blt	112d4 <strtoull+0x90>
   1133c:	e1a00004 	mov	r0, r4
   11340:	e1a01005 	mov	r1, r5
   11344:	e22aa001 	eor	sl, sl, #1
   11348:	e3580000 	cmp	r8, #0
   1134c:	e00cc00a 	and	ip, ip, sl
   11350:	1588e000 	strne	lr, [r8]
   11354:	e35c0000 	cmp	ip, #0
   11358:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1135c:	e2702000 	rsbs	r2, r0, #0
   11360:	e2e13000 	rsc	r3, r1, #0
   11364:	e1a00002 	mov	r0, r2
   11368:	e1a01003 	mov	r1, r3
   1136c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11370:	e1de30d1 	ldrsb	r3, [lr, #1]
   11374:	e3a0c000 	mov	ip, #0
   11378:	e3530030 	cmp	r3, #48	; 0x30
   1137c:	e1a0e000 	mov	lr, r0
   11380:	1affffc8 	bne	112a8 <strtoull+0x64>
   11384:	e1de30d1 	ldrsb	r3, [lr, #1]
   11388:	e28e0001 	add	r0, lr, #1
   1138c:	e3c31020 	bic	r1, r3, #32
   11390:	e3510058 	cmp	r1, #88	; 0x58
   11394:	1a000009 	bne	113c0 <strtoull+0x17c>
   11398:	e3d23010 	bics	r3, r2, #16
   1139c:	01de30d2 	ldrsbeq	r3, [lr, #2]
   113a0:	03a02010 	moveq	r2, #16
   113a4:	028ee002 	addeq	lr, lr, #2
   113a8:	0affffc0 	beq	112b0 <strtoull+0x6c>
   113ac:	e3a02000 	mov	r2, #0
   113b0:	e3a03000 	mov	r3, #0
   113b4:	e1a00002 	mov	r0, r2
   113b8:	e1a01003 	mov	r1, r3
   113bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113c0:	e3520000 	cmp	r2, #0
   113c4:	e1a0e000 	mov	lr, r0
   113c8:	03a02008 	moveq	r2, #8
   113cc:	eaffffb7 	b	112b0 <strtoull+0x6c>
   113d0:	e3580000 	cmp	r8, #0
   113d4:	0a000007 	beq	113f8 <strtoull+0x1b4>
   113d8:	e3e02000 	mvn	r2, #0
   113dc:	e3a03000 	mov	r3, #0
   113e0:	e588e000 	str	lr, [r8]
   113e4:	e1a00002 	mov	r0, r2
   113e8:	e1a01003 	mov	r1, r3
   113ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113f0:	e3a0a001 	mov	sl, #1
   113f4:	eaffffd3 	b	11348 <strtoull+0x104>
   113f8:	e3e02000 	mvn	r2, #0
   113fc:	e3a03000 	mov	r3, #0
   11400:	e1a00002 	mov	r0, r2
   11404:	e1a01003 	mov	r1, r3
   11408:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1140c:	e3a02000 	mov	r2, #0
   11410:	e3a03000 	mov	r3, #0
   11414:	e3580000 	cmp	r8, #0
   11418:	e1a00002 	mov	r0, r2
   1141c:	e1a01003 	mov	r1, r3
   11420:	1588e000 	strne	lr, [r8]
   11424:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011428 <atoi>:
   11428:	e3a0200a 	mov	r2, #10
   1142c:	e3a01000 	mov	r1, #0
   11430:	eaffff23 	b	110c4 <strtoul>

00011434 <char2int>:
   11434:	e12fff1e 	bx	lr

00011438 <memset>:
   11438:	e3100003 	tst	r0, #3
   1143c:	1a00000d 	bne	11478 <memset+0x40>
   11440:	e3520010 	cmp	r2, #16
   11444:	3a00000b 	bcc	11478 <memset+0x40>
   11448:	e1813401 	orr	r3, r1, r1, lsl #8
   1144c:	e183c803 	orr	ip, r3, r3, lsl #16
   11450:	e1a03000 	mov	r3, r0
   11454:	e583c000 	str	ip, [r3]
   11458:	e583c004 	str	ip, [r3, #4]
   1145c:	e583c008 	str	ip, [r3, #8]
   11460:	e583c00c 	str	ip, [r3, #12]
   11464:	e2833010 	add	r3, r3, #16
   11468:	e2422010 	sub	r2, r2, #16
   1146c:	e352000f 	cmp	r2, #15
   11470:	8afffff7 	bhi	11454 <memset+0x1c>
   11474:	ea000000 	b	1147c <memset+0x44>
   11478:	e1a03000 	mov	r3, r0
   1147c:	e3520000 	cmp	r2, #0
   11480:	012fff1e 	bxeq	lr
   11484:	e4c31001 	strb	r1, [r3], #1
   11488:	e2522001 	subs	r2, r2, #1
   1148c:	1afffffc 	bne	11484 <memset+0x4c>
   11490:	e12fff1e 	bx	lr

00011494 <memcpy>:
   11494:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   11498:	e352007f 	cmp	r2, #127	; 0x7f
   1149c:	9a00000b 	bls	114d0 <memcpy+0x3c>
   114a0:	e3110003 	tst	r1, #3
   114a4:	1a000009 	bne	114d0 <memcpy+0x3c>
   114a8:	e3100003 	tst	r0, #3
   114ac:	1a000007 	bne	114d0 <memcpy+0x3c>
   114b0:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   114b4:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   114b8:	e2422020 	sub	r2, r2, #32
   114bc:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   114c0:	f5d1f040 	pld	[r1, #64]	; 0x40
   114c4:	e352001f 	cmp	r2, #31
   114c8:	8afffff9 	bhi	114b4 <memcpy+0x20>
   114cc:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   114d0:	e3520000 	cmp	r2, #0
   114d4:	0a000003 	beq	114e8 <memcpy+0x54>
   114d8:	e4d13001 	ldrb	r3, [r1], #1
   114dc:	e2522001 	subs	r2, r2, #1
   114e0:	e4c03001 	strb	r3, [r0], #1
   114e4:	1afffffb 	bne	114d8 <memcpy+0x44>
   114e8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   114ec:	e12fff1e 	bx	lr

000114f0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   114f0:	e3a03000 	mov	r3, #0
   114f4:	e3510001 	cmp	r1, #1
   114f8:	91a0c002 	movls	ip, r2
   114fc:	8382c001 	orrhi	ip, r2, #1
   11500:	e92d4070 	push	{r4, r5, r6, lr}
   11504:	e1a04000 	mov	r4, r0
   11508:	e59f0124 	ldr	r0, [pc, #292]	; 11634 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x144>
   1150c:	e15c0003 	cmp	ip, r3
   11510:	e24dd020 	sub	sp, sp, #32
   11514:	e5c42004 	strb	r2, [r4, #4]
   11518:	e5841008 	str	r1, [r4, #8]
   1151c:	e5840000 	str	r0, [r4]
   11520:	e5843010 	str	r3, [r4, #16]
   11524:	0a000002 	beq	11534 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   11528:	e1a00004 	mov	r0, r4
   1152c:	e28dd020 	add	sp, sp, #32
   11530:	e8bd8070 	pop	{r4, r5, r6, pc}
   11534:	e59f50fc 	ldr	r5, [pc, #252]	; 11638 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x148>
   11538:	e5950004 	ldr	r0, [r5, #4]
   1153c:	e1500003 	cmp	r0, r3
   11540:	1a00000e 	bne	11580 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
   11544:	e5956000 	ldr	r6, [r5]
   11548:	e3560000 	cmp	r6, #0
   1154c:	0a00000f 	beq	11590 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa0>
   11550:	e3a02000 	mov	r2, #0
   11554:	e5943008 	ldr	r3, [r4, #8]
   11558:	e7862103 	str	r2, [r6, r3, lsl #2]
   1155c:	e5953004 	ldr	r3, [r5, #4]
   11560:	e3530000 	cmp	r3, #0
   11564:	1a000024 	bne	115fc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x10c>
   11568:	e1a00004 	mov	r0, r4
   1156c:	e3a01000 	mov	r1, #0
   11570:	eb00003a 	bl	11660 <CVirtualGPIOPin::Write(unsigned int)>
   11574:	e1a00004 	mov	r0, r4
   11578:	e28dd020 	add	sp, sp, #32
   1157c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11580:	eb0003e8 	bl	12528 <EnterCritical>
   11584:	e5956000 	ldr	r6, [r5]
   11588:	e3560000 	cmp	r6, #0
   1158c:	1affffef 	bne	11550 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   11590:	e3a00001 	mov	r0, #1
   11594:	eb0003a6 	bl	12434 <CMemorySystem::GetCoherentPage(unsigned int)>
   11598:	e1a01006 	mov	r1, r6
   1159c:	e5850000 	str	r0, [r5]
   115a0:	e28d0008 	add	r0, sp, #8
   115a4:	eb0006e4 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   115a8:	e3a03004 	mov	r3, #4
   115ac:	e595c000 	ldr	ip, [r5]
   115b0:	e58d3000 	str	r3, [sp]
   115b4:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   115b8:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   115bc:	e28d0008 	add	r0, sp, #8
   115c0:	e28d2010 	add	r2, sp, #16
   115c4:	e3a03010 	mov	r3, #16
   115c8:	e59f106c 	ldr	r1, [pc, #108]	; 1163c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
   115cc:	e58dc01c 	str	ip, [sp, #28]
   115d0:	eb0006e5 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   115d4:	e3500000 	cmp	r0, #0
   115d8:	0a000009 	beq	11604 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x114>
   115dc:	e28d0008 	add	r0, sp, #8
   115e0:	eb0006dc 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
   115e4:	e5956000 	ldr	r6, [r5]
   115e8:	e3560000 	cmp	r6, #0
   115ec:	1affffd7 	bne	11550 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   115f0:	e5953004 	ldr	r3, [r5, #4]
   115f4:	e3530000 	cmp	r3, #0
   115f8:	0affffda 	beq	11568 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   115fc:	eb0003f3 	bl	125d0 <LeaveCritical>
   11600:	eaffffd8 	b	11568 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   11604:	e3a03010 	mov	r3, #16
   11608:	e58d0000 	str	r0, [sp]
   1160c:	e28d2010 	add	r2, sp, #16
   11610:	e59f1028 	ldr	r1, [pc, #40]	; 11640 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x150>
   11614:	e28d0008 	add	r0, sp, #8
   11618:	eb0006d3 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1161c:	e3500000 	cmp	r0, #0
   11620:	159d301c 	ldrne	r3, [sp, #28]
   11624:	05850000 	streq	r0, [r5]
   11628:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   1162c:	15853000 	strne	r3, [r5]
   11630:	eaffffe9 	b	115dc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xec>
   11634:	00017fbc 	.word	0x00017fbc
   11638:	00019b88 	.word	0x00019b88
   1163c:	00048020 	.word	0x00048020
   11640:	00040010 	.word	0x00040010

00011644 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   11644:	e12fff1e 	bx	lr

00011648 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   11648:	e92d4010 	push	{r4, lr}
   1164c:	e1a04000 	mov	r4, r0
   11650:	e3a01014 	mov	r1, #20
   11654:	eb0000a9 	bl	11900 <operator delete(void*, unsigned int)>
   11658:	e1a00004 	mov	r0, r4
   1165c:	e8bd8010 	pop	{r4, pc}

00011660 <CVirtualGPIOPin::Write(unsigned int)>:
   11660:	e92d4070 	push	{r4, r5, r6, lr}
   11664:	e5d03004 	ldrb	r3, [r0, #4]
   11668:	e1a05001 	mov	r5, r1
   1166c:	e3530000 	cmp	r3, #0
   11670:	e24dd028 	sub	sp, sp, #40	; 0x28
   11674:	e5901008 	ldr	r1, [r0, #8]
   11678:	0a000011 	beq	116c4 <CVirtualGPIOPin::Write(unsigned int)+0x64>
   1167c:	e3510000 	cmp	r1, #0
   11680:	1a000033 	bne	11754 <CVirtualGPIOPin::Write(unsigned int)+0xf4>
   11684:	e28d000c 	add	r0, sp, #12
   11688:	eb0006ab 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1168c:	e3a03008 	mov	r3, #8
   11690:	e58d3000 	str	r3, [sp]
   11694:	e3a03014 	mov	r3, #20
   11698:	e3a0c082 	mov	ip, #130	; 0x82
   1169c:	e28d000c 	add	r0, sp, #12
   116a0:	e08d2003 	add	r2, sp, r3
   116a4:	e59f10d8 	ldr	r1, [pc, #216]	; 11784 <CVirtualGPIOPin::Write(unsigned int)+0x124>
   116a8:	e58d5024 	str	r5, [sp, #36]	; 0x24
   116ac:	e58dc020 	str	ip, [sp, #32]
   116b0:	eb0006ad 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   116b4:	e28d000c 	add	r0, sp, #12
   116b8:	eb0006a6 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
   116bc:	e28dd028 	add	sp, sp, #40	; 0x28
   116c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   116c4:	e3510001 	cmp	r1, #1
   116c8:	8afffffb 	bhi	116bc <CVirtualGPIOPin::Write(unsigned int)+0x5c>
   116cc:	e59f60b4 	ldr	r6, [pc, #180]	; 11788 <CVirtualGPIOPin::Write(unsigned int)+0x128>
   116d0:	e3550001 	cmp	r5, #1
   116d4:	e5962000 	ldr	r2, [r6]
   116d8:	93a03000 	movls	r3, #0
   116dc:	83a03001 	movhi	r3, #1
   116e0:	e3520000 	cmp	r2, #0
   116e4:	03a03001 	moveq	r3, #1
   116e8:	e3530000 	cmp	r3, #0
   116ec:	1afffff2 	bne	116bc <CVirtualGPIOPin::Write(unsigned int)+0x5c>
   116f0:	e1a04000 	mov	r4, r0
   116f4:	e5960004 	ldr	r0, [r6, #4]
   116f8:	e3500000 	cmp	r0, #0
   116fc:	1a00001e 	bne	1177c <CVirtualGPIOPin::Write(unsigned int)+0x11c>
   11700:	e1d421b0 	ldrh	r2, [r4, #16]
   11704:	e1d431b2 	ldrh	r3, [r4, #18]
   11708:	e584500c 	str	r5, [r4, #12]
   1170c:	e0421003 	sub	r1, r2, r3
   11710:	e6bf1071 	sxth	r1, r1
   11714:	e3510000 	cmp	r1, #0
   11718:	da000011 	ble	11764 <CVirtualGPIOPin::Write(unsigned int)+0x104>
   1171c:	e3550000 	cmp	r5, #0
   11720:	02833001 	addeq	r3, r3, #1
   11724:	06ff3073 	uxtheq	r3, r3
   11728:	01c431b2 	strheq	r3, [r4, #18]
   1172c:	1a000003 	bne	11740 <CVirtualGPIOPin::Write(unsigned int)+0xe0>
   11730:	e5940008 	ldr	r0, [r4, #8]
   11734:	e5961000 	ldr	r1, [r6]
   11738:	e1833802 	orr	r3, r3, r2, lsl #16
   1173c:	e7813100 	str	r3, [r1, r0, lsl #2]
   11740:	e5963004 	ldr	r3, [r6, #4]
   11744:	e3530000 	cmp	r3, #0
   11748:	0affffdb 	beq	116bc <CVirtualGPIOPin::Write(unsigned int)+0x5c>
   1174c:	eb00039f 	bl	125d0 <LeaveCritical>
   11750:	eaffffd9 	b	116bc <CVirtualGPIOPin::Write(unsigned int)+0x5c>
   11754:	e59f1030 	ldr	r1, [pc, #48]	; 1178c <CVirtualGPIOPin::Write(unsigned int)+0x12c>
   11758:	e3a0205b 	mov	r2, #91	; 0x5b
   1175c:	e2810014 	add	r0, r1, #20
   11760:	ebffde74 	bl	9138 <assertion_failed>
   11764:	e3550000 	cmp	r5, #0
   11768:	0afffff4 	beq	11740 <CVirtualGPIOPin::Write(unsigned int)+0xe0>
   1176c:	e2822001 	add	r2, r2, #1
   11770:	e6ff2072 	uxth	r2, r2
   11774:	e1c421b0 	strh	r2, [r4, #16]
   11778:	eaffffec 	b	11730 <CVirtualGPIOPin::Write(unsigned int)+0xd0>
   1177c:	eb000369 	bl	12528 <EnterCritical>
   11780:	eaffffde 	b	11700 <CVirtualGPIOPin::Write(unsigned int)+0xa0>
   11784:	00038041 	.word	0x00038041
   11788:	00019b88 	.word	0x00019b88
   1178c:	00017fc4 	.word	0x00017fc4

00011790 <CVirtualGPIOPin::Invert()>:
   11790:	e590100c 	ldr	r1, [r0, #12]
   11794:	e2211001 	eor	r1, r1, #1
   11798:	eaffffb0 	b	11660 <CVirtualGPIOPin::Write(unsigned int)>

0001179c <__static_initialization_and_destruction_0(int, int)>:
   1179c:	e59f3014 	ldr	r3, [pc, #20]	; 117b8 <__static_initialization_and_destruction_0(int, int)+0x1c>
   117a0:	e1510003 	cmp	r1, r3
   117a4:	03500001 	cmpeq	r0, #1
   117a8:	03a02000 	moveq	r2, #0
   117ac:	059f3008 	ldreq	r3, [pc, #8]	; 117bc <__static_initialization_and_destruction_0(int, int)+0x20>
   117b0:	05832004 	streq	r2, [r3, #4]
   117b4:	e12fff1e 	bx	lr
   117b8:	0000ffff 	.word	0x0000ffff
   117bc:	00019b88 	.word	0x00019b88

000117c0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   117c0:	e3a02000 	mov	r2, #0
   117c4:	e59f3004 	ldr	r3, [pc, #4]	; 117d0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   117c8:	e5832004 	str	r2, [r3, #4]
   117cc:	e12fff1e 	bx	lr
   117d0:	00019b88 	.word	0x00019b88

000117d4 <ChainBootStub(void const*, unsigned int)>:
   117d4:	e2811003 	add	r1, r1, #3
   117d8:	e1b01121 	lsrs	r1, r1, #2
   117dc:	0a000007 	beq	11800 <ChainBootStub(void const*, unsigned int)+0x2c>
   117e0:	e1a03000 	mov	r3, r0
   117e4:	e0800101 	add	r0, r0, r1, lsl #2
   117e8:	e263c902 	rsb	ip, r3, #32768	; 0x8000
   117ec:	e083200c 	add	r2, r3, ip
   117f0:	e4931004 	ldr	r1, [r3], #4
   117f4:	e1530000 	cmp	r3, r0
   117f8:	e5821000 	str	r1, [r2]
   117fc:	1afffffa 	bne	117ec <ChainBootStub(void const*, unsigned int)+0x18>
   11800:	e3a03000 	mov	r3, #0
   11804:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11808:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   1180c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11810:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   11814:	e3a03902 	mov	r3, #32768	; 0x8000
   11818:	e12fff13 	bx	r3

0001181c <EnableChainBoot>:
   1181c:	e59f302c 	ldr	r3, [pc, #44]	; 11850 <EnableChainBoot+0x34>
   11820:	e92d4010 	push	{r4, lr}
   11824:	e3a02b01 	mov	r2, #1024	; 0x400
   11828:	e1c300f0 	strd	r0, [r3]
   1182c:	e59f1020 	ldr	r1, [pc, #32]	; 11854 <EnableChainBoot+0x38>
   11830:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   11834:	ebffff16 	bl	11494 <memcpy>
   11838:	e3a03000 	mov	r3, #0
   1183c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11840:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11844:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   11848:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   1184c:	e8bd8010 	pop	{r4, pc}
   11850:	00019b90 	.word	0x00019b90
   11854:	000117d4 	.word	0x000117d4

00011858 <IsChainBootEnabled>:
   11858:	e59f300c 	ldr	r3, [pc, #12]	; 1186c <IsChainBootEnabled+0x14>
   1185c:	e5930000 	ldr	r0, [r3]
   11860:	e2900000 	adds	r0, r0, #0
   11864:	13a00001 	movne	r0, #1
   11868:	e12fff1e 	bx	lr
   1186c:	00019b90 	.word	0x00019b90

00011870 <DoChainBoot>:
   11870:	e59f3008 	ldr	r3, [pc, #8]	; 11880 <DoChainBoot+0x10>
   11874:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   11878:	e1c300d0 	ldrd	r0, [r3]
   1187c:	e12fff12 	bx	r2
   11880:	00019b90 	.word	0x00019b90

00011884 <operator new(unsigned int, int)>:
   11884:	e3510000 	cmp	r1, #0
   11888:	0a000003 	beq	1189c <operator new(unsigned int, int)+0x18>
   1188c:	e3510002 	cmp	r1, #2
   11890:	0a000001 	beq	1189c <operator new(unsigned int, int)+0x18>
   11894:	e3a00000 	mov	r0, #0
   11898:	e12fff1e 	bx	lr
   1189c:	e59f300c 	ldr	r3, [pc, #12]	; 118b0 <operator new(unsigned int, int)+0x2c>
   118a0:	e1a01000 	mov	r1, r0
   118a4:	e5930000 	ldr	r0, [r3]
   118a8:	e280000c 	add	r0, r0, #12
   118ac:	ea000039 	b	11998 <CHeapAllocator::Allocate(unsigned int)>
   118b0:	00019b9c 	.word	0x00019b9c

000118b4 <operator new[](unsigned int, int)>:
   118b4:	eafffff2 	b	11884 <operator new(unsigned int, int)>

000118b8 <operator new(unsigned int, void*)>:
   118b8:	e1a00001 	mov	r0, r1
   118bc:	e12fff1e 	bx	lr

000118c0 <operator new[](unsigned int, void*)>:
   118c0:	e1a00001 	mov	r0, r1
   118c4:	e12fff1e 	bx	lr

000118c8 <operator new(unsigned int)>:
   118c8:	e59f300c 	ldr	r3, [pc, #12]	; 118dc <operator new(unsigned int)+0x14>
   118cc:	e1a01000 	mov	r1, r0
   118d0:	e5930000 	ldr	r0, [r3]
   118d4:	e280000c 	add	r0, r0, #12
   118d8:	ea00002e 	b	11998 <CHeapAllocator::Allocate(unsigned int)>
   118dc:	00019b9c 	.word	0x00019b9c

000118e0 <operator new[](unsigned int)>:
   118e0:	eafffff8 	b	118c8 <operator new(unsigned int)>

000118e4 <operator delete(void*)>:
   118e4:	e59f300c 	ldr	r3, [pc, #12]	; 118f8 <operator delete(void*)+0x14>
   118e8:	e1a01000 	mov	r1, r0
   118ec:	e5930000 	ldr	r0, [r3]
   118f0:	e280000c 	add	r0, r0, #12
   118f4:	ea0000a5 	b	11b90 <CHeapAllocator::Free(void*)>
   118f8:	00019b9c 	.word	0x00019b9c

000118fc <operator delete[](void*)>:
   118fc:	eafffff8 	b	118e4 <operator delete(void*)>

00011900 <operator delete(void*, unsigned int)>:
   11900:	e59f300c 	ldr	r3, [pc, #12]	; 11914 <operator delete(void*, unsigned int)+0x14>
   11904:	e1a01000 	mov	r1, r0
   11908:	e5930000 	ldr	r0, [r3]
   1190c:	e280000c 	add	r0, r0, #12
   11910:	ea00009e 	b	11b90 <CHeapAllocator::Free(void*)>
   11914:	00019b9c 	.word	0x00019b9c

00011918 <operator delete[](void*, unsigned int)>:
   11918:	eafffff8 	b	11900 <operator delete(void*, unsigned int)>

0001191c <CHeapAllocator::CHeapAllocator(char const*)>:
   1191c:	e3a03000 	mov	r3, #0
   11920:	e3a02001 	mov	r2, #1
   11924:	e92d4010 	push	{r4, lr}
   11928:	e1a04000 	mov	r4, r0
   1192c:	e5801000 	str	r1, [r0]
   11930:	e58020b8 	str	r2, [r0, #184]	; 0xb8
   11934:	e5803004 	str	r3, [r0, #4]
   11938:	e5803008 	str	r3, [r0, #8]
   1193c:	e580300c 	str	r3, [r0, #12]
   11940:	e1a01003 	mov	r1, r3
   11944:	e3a020a8 	mov	r2, #168	; 0xa8
   11948:	e2800010 	add	r0, r0, #16
   1194c:	ebfffeb9 	bl	11438 <memset>
   11950:	e1a03004 	mov	r3, r4
   11954:	e59f201c 	ldr	r2, [pc, #28]	; 11978 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   11958:	e2840038 	add	r0, r4, #56	; 0x38
   1195c:	e4921004 	ldr	r1, [r2], #4
   11960:	e2833008 	add	r3, r3, #8
   11964:	e5831008 	str	r1, [r3, #8]
   11968:	e1530000 	cmp	r3, r0
   1196c:	1afffffa 	bne	1195c <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   11970:	e1a00004 	mov	r0, r4
   11974:	e8bd8010 	pop	{r4, pc}
   11978:	00019b00 	.word	0x00019b00

0001197c <CHeapAllocator::~CHeapAllocator()>:
   1197c:	e12fff1e 	bx	lr

00011980 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   11980:	e0812002 	add	r2, r1, r2
   11984:	e980000e 	stmib	r0, {r1, r2, r3}
   11988:	e12fff1e 	bx	lr

0001198c <CHeapAllocator::GetFreeSpace() const>:
   1198c:	e9900005 	ldmib	r0, {r0, r2}
   11990:	e0420000 	sub	r0, r2, r0
   11994:	e12fff1e 	bx	lr

00011998 <CHeapAllocator::Allocate(unsigned int)>:
   11998:	e5903004 	ldr	r3, [r0, #4]
   1199c:	e3530000 	cmp	r3, #0
   119a0:	0a000073 	beq	11b74 <CHeapAllocator::Allocate(unsigned int)+0x1dc>
   119a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   119a8:	e1a06000 	mov	r6, r0
   119ac:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   119b0:	e1a04001 	mov	r4, r1
   119b4:	e3500000 	cmp	r0, #0
   119b8:	1a000057 	bne	11b1c <CHeapAllocator::Allocate(unsigned int)+0x184>
   119bc:	e5963010 	ldr	r3, [r6, #16]
   119c0:	e2862010 	add	r2, r6, #16
   119c4:	e3530000 	cmp	r3, #0
   119c8:	0a000007 	beq	119ec <CHeapAllocator::Allocate(unsigned int)+0x54>
   119cc:	e1540003 	cmp	r4, r3
   119d0:	8a000002 	bhi	119e0 <CHeapAllocator::Allocate(unsigned int)+0x48>
   119d4:	ea00002b 	b	11a88 <CHeapAllocator::Allocate(unsigned int)+0xf0>
   119d8:	e1530004 	cmp	r3, r4
   119dc:	2a000029 	bcs	11a88 <CHeapAllocator::Allocate(unsigned int)+0xf0>
   119e0:	e5b23008 	ldr	r3, [r2, #8]!
   119e4:	e3530000 	cmp	r3, #0
   119e8:	1afffffa 	bne	119d8 <CHeapAllocator::Allocate(unsigned int)+0x40>
   119ec:	e5965004 	ldr	r5, [r6, #4]
   119f0:	e284303f 	add	r3, r4, #63	; 0x3f
   119f4:	e3c3301f 	bic	r3, r3, #31
   119f8:	e0853003 	add	r3, r5, r3
   119fc:	e1550003 	cmp	r5, r3
   11a00:	e596700c 	ldr	r7, [r6, #12]
   11a04:	3a000006 	bcc	11a24 <CHeapAllocator::Allocate(unsigned int)+0x8c>
   11a08:	e3570000 	cmp	r7, #0
   11a0c:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   11a10:	1a000043 	bne	11b24 <CHeapAllocator::Allocate(unsigned int)+0x18c>
   11a14:	e3530000 	cmp	r3, #0
   11a18:	1a00004c 	bne	11b50 <CHeapAllocator::Allocate(unsigned int)+0x1b8>
   11a1c:	e3a00000 	mov	r0, #0
   11a20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11a24:	e5962008 	ldr	r2, [r6, #8]
   11a28:	e0422007 	sub	r2, r2, r7
   11a2c:	e1530002 	cmp	r3, r2
   11a30:	8afffff4 	bhi	11a08 <CHeapAllocator::Allocate(unsigned int)+0x70>
   11a34:	e3a0204d 	mov	r2, #77	; 0x4d
   11a38:	e3a0c043 	mov	ip, #67	; 0x43
   11a3c:	e3a0004c 	mov	r0, #76	; 0x4c
   11a40:	e3a01042 	mov	r1, #66	; 0x42
   11a44:	e5863004 	str	r3, [r6, #4]
   11a48:	e1a03824 	lsr	r3, r4, #16
   11a4c:	e5c54004 	strb	r4, [r5, #4]
   11a50:	e5c52001 	strb	r2, [r5, #1]
   11a54:	e1a02424 	lsr	r2, r4, #8
   11a58:	e1a04c24 	lsr	r4, r4, #24
   11a5c:	e5c5c000 	strb	ip, [r5]
   11a60:	e5c50002 	strb	r0, [r5, #2]
   11a64:	e5c51003 	strb	r1, [r5, #3]
   11a68:	e5c52005 	strb	r2, [r5, #5]
   11a6c:	e5c53006 	strb	r3, [r5, #6]
   11a70:	e5c54007 	strb	r4, [r5, #7]
   11a74:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   11a78:	e3530000 	cmp	r3, #0
   11a7c:	0a00001a 	beq	11aec <CHeapAllocator::Allocate(unsigned int)+0x154>
   11a80:	eb0002d2 	bl	125d0 <LeaveCritical>
   11a84:	ea000018 	b	11aec <CHeapAllocator::Allocate(unsigned int)+0x154>
   11a88:	e5925004 	ldr	r5, [r2, #4]
   11a8c:	e3550000 	cmp	r5, #0
   11a90:	01a04003 	moveq	r4, r3
   11a94:	0affffd4 	beq	119ec <CHeapAllocator::Allocate(unsigned int)+0x54>
   11a98:	e5d50001 	ldrb	r0, [r5, #1]
   11a9c:	e5d53000 	ldrb	r3, [r5]
   11aa0:	e5d51002 	ldrb	r1, [r5, #2]
   11aa4:	e1833400 	orr	r3, r3, r0, lsl #8
   11aa8:	e5d50003 	ldrb	r0, [r5, #3]
   11aac:	e1833801 	orr	r3, r3, r1, lsl #16
   11ab0:	e59f10c4 	ldr	r1, [pc, #196]	; 11b7c <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   11ab4:	e1833c00 	orr	r3, r3, r0, lsl #24
   11ab8:	e1530001 	cmp	r3, r1
   11abc:	1a000028 	bne	11b64 <CHeapAllocator::Allocate(unsigned int)+0x1cc>
   11ac0:	e5d51009 	ldrb	r1, [r5, #9]
   11ac4:	e5d53008 	ldrb	r3, [r5, #8]
   11ac8:	e5d5000a 	ldrb	r0, [r5, #10]
   11acc:	e1833401 	orr	r3, r3, r1, lsl #8
   11ad0:	e5d5100b 	ldrb	r1, [r5, #11]
   11ad4:	e1833800 	orr	r3, r3, r0, lsl #16
   11ad8:	e1833c01 	orr	r3, r3, r1, lsl #24
   11adc:	e5823004 	str	r3, [r2, #4]
   11ae0:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   11ae4:	e3530000 	cmp	r3, #0
   11ae8:	1affffe4 	bne	11a80 <CHeapAllocator::Allocate(unsigned int)+0xe8>
   11aec:	e3a03000 	mov	r3, #0
   11af0:	e2850020 	add	r0, r5, #32
   11af4:	e310001f 	tst	r0, #31
   11af8:	e5c53008 	strb	r3, [r5, #8]
   11afc:	e5c53009 	strb	r3, [r5, #9]
   11b00:	e5c5300a 	strb	r3, [r5, #10]
   11b04:	e5c5300b 	strb	r3, [r5, #11]
   11b08:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   11b0c:	e3a0208e 	mov	r2, #142	; 0x8e
   11b10:	e59f1068 	ldr	r1, [pc, #104]	; 11b80 <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   11b14:	e59f0068 	ldr	r0, [pc, #104]	; 11b84 <CHeapAllocator::Allocate(unsigned int)+0x1ec>
   11b18:	ebffdd86 	bl	9138 <assertion_failed>
   11b1c:	eb000281 	bl	12528 <EnterCritical>
   11b20:	eaffffa5 	b	119bc <CHeapAllocator::Allocate(unsigned int)+0x24>
   11b24:	e3a02000 	mov	r2, #0
   11b28:	e1530002 	cmp	r3, r2
   11b2c:	e586200c 	str	r2, [r6, #12]
   11b30:	1a000009 	bne	11b5c <CHeapAllocator::Allocate(unsigned int)+0x1c4>
   11b34:	ebffe56c 	bl	b0ec <CLogger::Get()>
   11b38:	e5961000 	ldr	r1, [r6]
   11b3c:	e59f3044 	ldr	r3, [pc, #68]	; 11b88 <CHeapAllocator::Allocate(unsigned int)+0x1f0>
   11b40:	e3a02000 	mov	r2, #0
   11b44:	ebffe4aa 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11b48:	e3a00000 	mov	r0, #0
   11b4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11b50:	eb00029e 	bl	125d0 <LeaveCritical>
   11b54:	e1a00007 	mov	r0, r7
   11b58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11b5c:	eb00029b 	bl	125d0 <LeaveCritical>
   11b60:	eafffff3 	b	11b34 <CHeapAllocator::Allocate(unsigned int)+0x19c>
   11b64:	e3a0205e 	mov	r2, #94	; 0x5e
   11b68:	e59f1010 	ldr	r1, [pc, #16]	; 11b80 <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   11b6c:	e59f0018 	ldr	r0, [pc, #24]	; 11b8c <CHeapAllocator::Allocate(unsigned int)+0x1f4>
   11b70:	ebffdd70 	bl	9138 <assertion_failed>
   11b74:	e3a00000 	mov	r0, #0
   11b78:	e12fff1e 	bx	lr
   11b7c:	424c4d43 	.word	0x424c4d43
   11b80:	00017fe4 	.word	0x00017fe4
   11b84:	00018034 	.word	0x00018034
   11b88:	00018024 	.word	0x00018024
   11b8c:	00017ff8 	.word	0x00017ff8

00011b90 <CHeapAllocator::Free(void*)>:
   11b90:	e3510000 	cmp	r1, #0
   11b94:	012fff1e 	bxeq	lr
   11b98:	e92d4070 	push	{r4, r5, r6, lr}
   11b9c:	e2415020 	sub	r5, r1, #32
   11ba0:	e5513020 	ldrb	r3, [r1, #-32]	; 0xffffffe0
   11ba4:	e5d51001 	ldrb	r1, [r5, #1]
   11ba8:	e5d52002 	ldrb	r2, [r5, #2]
   11bac:	e1833401 	orr	r3, r3, r1, lsl #8
   11bb0:	e5d51003 	ldrb	r1, [r5, #3]
   11bb4:	e1833802 	orr	r3, r3, r2, lsl #16
   11bb8:	e59f20b0 	ldr	r2, [pc, #176]	; 11c70 <CHeapAllocator::Free(void*)+0xe0>
   11bbc:	e1833c01 	orr	r3, r3, r1, lsl #24
   11bc0:	e1530002 	cmp	r3, r2
   11bc4:	e1a06000 	mov	r6, r0
   11bc8:	1a000024 	bne	11c60 <CHeapAllocator::Free(void*)+0xd0>
   11bcc:	e5903010 	ldr	r3, [r0, #16]
   11bd0:	e2804010 	add	r4, r0, #16
   11bd4:	e3530000 	cmp	r3, #0
   11bd8:	08bd8070 	popeq	{r4, r5, r6, pc}
   11bdc:	e5d51005 	ldrb	r1, [r5, #5]
   11be0:	e5d52004 	ldrb	r2, [r5, #4]
   11be4:	e5d50006 	ldrb	r0, [r5, #6]
   11be8:	e1822401 	orr	r2, r2, r1, lsl #8
   11bec:	e5d51007 	ldrb	r1, [r5, #7]
   11bf0:	e1822800 	orr	r2, r2, r0, lsl #16
   11bf4:	e1822c01 	orr	r2, r2, r1, lsl #24
   11bf8:	e1530002 	cmp	r3, r2
   11bfc:	0a000004 	beq	11c14 <CHeapAllocator::Free(void*)+0x84>
   11c00:	e5b43008 	ldr	r3, [r4, #8]!
   11c04:	e3530000 	cmp	r3, #0
   11c08:	08bd8070 	popeq	{r4, r5, r6, pc}
   11c0c:	e1520003 	cmp	r2, r3
   11c10:	1afffffa 	bne	11c00 <CHeapAllocator::Free(void*)+0x70>
   11c14:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   11c18:	e3500000 	cmp	r0, #0
   11c1c:	1a00000d 	bne	11c58 <CHeapAllocator::Free(void*)+0xc8>
   11c20:	e5943004 	ldr	r3, [r4, #4]
   11c24:	e5c53008 	strb	r3, [r5, #8]
   11c28:	e1a01423 	lsr	r1, r3, #8
   11c2c:	e1a02823 	lsr	r2, r3, #16
   11c30:	e1a03c23 	lsr	r3, r3, #24
   11c34:	e5c51009 	strb	r1, [r5, #9]
   11c38:	e5c5200a 	strb	r2, [r5, #10]
   11c3c:	e5c5300b 	strb	r3, [r5, #11]
   11c40:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   11c44:	e5845004 	str	r5, [r4, #4]
   11c48:	e3530000 	cmp	r3, #0
   11c4c:	08bd8070 	popeq	{r4, r5, r6, pc}
   11c50:	e8bd4070 	pop	{r4, r5, r6, lr}
   11c54:	ea00025d 	b	125d0 <LeaveCritical>
   11c58:	eb000232 	bl	12528 <EnterCritical>
   11c5c:	eaffffef 	b	11c20 <CHeapAllocator::Free(void*)+0x90>
   11c60:	e3a020bf 	mov	r2, #191	; 0xbf
   11c64:	e59f1008 	ldr	r1, [pc, #8]	; 11c74 <CHeapAllocator::Free(void*)+0xe4>
   11c68:	e59f0008 	ldr	r0, [pc, #8]	; 11c78 <CHeapAllocator::Free(void*)+0xe8>
   11c6c:	ebffdd31 	bl	9138 <assertion_failed>
   11c70:	424c4d43 	.word	0x424c4d43
   11c74:	00017fe4 	.word	0x00017fe4
   11c78:	00017ff8 	.word	0x00017ff8

00011c7c <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   11c7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11c80:	e2517000 	subs	r7, r1, #0
   11c84:	0a00002c 	beq	11d3c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc0>
   11c88:	e3520000 	cmp	r2, #0
   11c8c:	e1a05002 	mov	r5, r2
   11c90:	0a000026 	beq	11d30 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xb4>
   11c94:	e2474020 	sub	r4, r7, #32
   11c98:	e5d41001 	ldrb	r1, [r4, #1]
   11c9c:	e5573020 	ldrb	r3, [r7, #-32]	; 0xffffffe0
   11ca0:	e5d42002 	ldrb	r2, [r4, #2]
   11ca4:	e1833401 	orr	r3, r3, r1, lsl #8
   11ca8:	e5d41003 	ldrb	r1, [r4, #3]
   11cac:	e1833802 	orr	r3, r3, r2, lsl #16
   11cb0:	e59f20a0 	ldr	r2, [pc, #160]	; 11d58 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xdc>
   11cb4:	e1833c01 	orr	r3, r3, r1, lsl #24
   11cb8:	e1530002 	cmp	r3, r2
   11cbc:	1a000021 	bne	11d48 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xcc>
   11cc0:	e5d42005 	ldrb	r2, [r4, #5]
   11cc4:	e5d43004 	ldrb	r3, [r4, #4]
   11cc8:	e5d41006 	ldrb	r1, [r4, #6]
   11ccc:	e1833402 	orr	r3, r3, r2, lsl #8
   11cd0:	e5d42007 	ldrb	r2, [r4, #7]
   11cd4:	e1833801 	orr	r3, r3, r1, lsl #16
   11cd8:	e1833c02 	orr	r3, r3, r2, lsl #24
   11cdc:	e1530005 	cmp	r3, r5
   11ce0:	21a05007 	movcs	r5, r7
   11ce4:	3a000001 	bcc	11cf0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x74>
   11ce8:	e1a00005 	mov	r0, r5
   11cec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11cf0:	e1a01005 	mov	r1, r5
   11cf4:	e1a06000 	mov	r6, r0
   11cf8:	ebffff26 	bl	11998 <CHeapAllocator::Allocate(unsigned int)>
   11cfc:	e2505000 	subs	r5, r0, #0
   11d00:	0afffff8 	beq	11ce8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   11d04:	e5d42005 	ldrb	r2, [r4, #5]
   11d08:	e5d43004 	ldrb	r3, [r4, #4]
   11d0c:	e5d41006 	ldrb	r1, [r4, #6]
   11d10:	e1833402 	orr	r3, r3, r2, lsl #8
   11d14:	e5d42007 	ldrb	r2, [r4, #7]
   11d18:	e1833801 	orr	r3, r3, r1, lsl #16
   11d1c:	e1832c02 	orr	r2, r3, r2, lsl #24
   11d20:	e1a01007 	mov	r1, r7
   11d24:	ebfffdda 	bl	11494 <memcpy>
   11d28:	e1a01007 	mov	r1, r7
   11d2c:	e1a00006 	mov	r0, r6
   11d30:	ebffff96 	bl	11b90 <CHeapAllocator::Free(void*)>
   11d34:	e1a00005 	mov	r0, r5
   11d38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11d3c:	e1a01002 	mov	r1, r2
   11d40:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11d44:	eaffff13 	b	11998 <CHeapAllocator::Allocate(unsigned int)>
   11d48:	e3a020a3 	mov	r2, #163	; 0xa3
   11d4c:	e59f1008 	ldr	r1, [pc, #8]	; 11d5c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xe0>
   11d50:	e59f0008 	ldr	r0, [pc, #8]	; 11d60 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xe4>
   11d54:	ebffdcf7 	bl	9138 <assertion_failed>
   11d58:	424c4d43 	.word	0x424c4d43
   11d5c:	00017fe4 	.word	0x00017fe4
   11d60:	00017ff8 	.word	0x00017ff8

00011d64 <CExceptionHandler::Get() [clone .part.1]>:
   11d64:	e92d4010 	push	{r4, lr}
   11d68:	e3a02087 	mov	r2, #135	; 0x87
   11d6c:	e59f1004 	ldr	r1, [pc, #4]	; 11d78 <CExceptionHandler::Get() [clone .part.1]+0x14>
   11d70:	e59f0004 	ldr	r0, [pc, #4]	; 11d7c <CExceptionHandler::Get() [clone .part.1]+0x18>
   11d74:	ebffdcef 	bl	9138 <assertion_failed>
   11d78:	00018068 	.word	0x00018068
   11d7c:	00017f74 	.word	0x00017f74

00011d80 <CExceptionHandler::CExceptionHandler()>:
   11d80:	e59fc068 	ldr	ip, [pc, #104]	; 11df0 <CExceptionHandler::CExceptionHandler()+0x70>
   11d84:	e92d4010 	push	{r4, lr}
   11d88:	e1a04000 	mov	r4, r0
   11d8c:	e59c0000 	ldr	r0, [ip]
   11d90:	e3500000 	cmp	r0, #0
   11d94:	1a000011 	bne	11de0 <CExceptionHandler::CExceptionHandler()+0x60>
   11d98:	e59f1054 	ldr	r1, [pc, #84]	; 11df4 <CExceptionHandler::CExceptionHandler()+0x74>
   11d9c:	e59f2054 	ldr	r2, [pc, #84]	; 11df8 <CExceptionHandler::CExceptionHandler()+0x78>
   11da0:	e59f3054 	ldr	r3, [pc, #84]	; 11dfc <CExceptionHandler::CExceptionHandler()+0x7c>
   11da4:	e1a01141 	asr	r1, r1, #2
   11da8:	e1a02142 	asr	r2, r2, #2
   11dac:	e1a03143 	asr	r3, r3, #2
   11db0:	e2411002 	sub	r1, r1, #2
   11db4:	e2422002 	sub	r2, r2, #2
   11db8:	e2433002 	sub	r3, r3, #2
   11dbc:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   11dc0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11dc4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   11dc8:	e58c4000 	str	r4, [ip]
   11dcc:	e5801004 	str	r1, [r0, #4]
   11dd0:	e1c020fc 	strd	r2, [r0, #12]
   11dd4:	eb000222 	bl	12664 <SyncDataAndInstructionCache>
   11dd8:	e1a00004 	mov	r0, r4
   11ddc:	e8bd8010 	pop	{r4, pc}
   11de0:	e3a02030 	mov	r2, #48	; 0x30
   11de4:	e59f1014 	ldr	r1, [pc, #20]	; 11e00 <CExceptionHandler::CExceptionHandler()+0x80>
   11de8:	e59f0014 	ldr	r0, [pc, #20]	; 11e04 <CExceptionHandler::CExceptionHandler()+0x84>
   11dec:	ebffdcd1 	bl	9138 <assertion_failed>
   11df0:	00019b98 	.word	0x00019b98
   11df4:	000120c4 	.word	0x000120c4
   11df8:	0001201c 	.word	0x0001201c
   11dfc:	00012068 	.word	0x00012068
   11e00:	00018068 	.word	0x00018068
   11e04:	00017dfc 	.word	0x00017dfc

00011e08 <CExceptionHandler::~CExceptionHandler()>:
   11e08:	e3a02000 	mov	r2, #0
   11e0c:	e59f3004 	ldr	r3, [pc, #4]	; 11e18 <CExceptionHandler::~CExceptionHandler()+0x10>
   11e10:	e5832000 	str	r2, [r3]
   11e14:	e12fff1e 	bx	lr
   11e18:	00019b98 	.word	0x00019b98

00011e1c <CExceptionHandler::Throw(unsigned int)>:
   11e1c:	e92d4010 	push	{r4, lr}
   11e20:	e1a04001 	mov	r4, r1
   11e24:	e24dd008 	sub	sp, sp, #8
   11e28:	ebffe4af 	bl	b0ec <CLogger::Get()>
   11e2c:	e59f201c 	ldr	r2, [pc, #28]	; 11e50 <CExceptionHandler::Throw(unsigned int)+0x34>
   11e30:	e59f301c 	ldr	r3, [pc, #28]	; 11e54 <CExceptionHandler::Throw(unsigned int)+0x38>
   11e34:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   11e38:	e3a02000 	mov	r2, #0
   11e3c:	e58d1000 	str	r1, [sp]
   11e40:	e59f1010 	ldr	r1, [pc, #16]	; 11e58 <CExceptionHandler::Throw(unsigned int)+0x3c>
   11e44:	ebffe3ea 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11e48:	e28dd008 	add	sp, sp, #8
   11e4c:	e8bd8010 	pop	{r4, pc}
   11e50:	00019b1c 	.word	0x00019b1c
   11e54:	00018080 	.word	0x00018080
   11e58:	00018060 	.word	0x00018060

00011e5c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   11e5c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11e60:	e3510002 	cmp	r1, #2
   11e64:	e24dd024 	sub	sp, sp, #36	; 0x24
   11e68:	e1a05001 	mov	r5, r1
   11e6c:	e1a04002 	mov	r4, r2
   11e70:	0a000026 	beq	11f10 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   11e74:	e3510003 	cmp	r1, #3
   11e78:	13a07000 	movne	r7, #0
   11e7c:	11a09007 	movne	r9, r7
   11e80:	1a000001 	bne	11e8c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   11e84:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   11e88:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   11e8c:	e3540000 	cmp	r4, #0
   11e90:	0a000024 	beq	11f28 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   11e94:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   11e98:	e5948048 	ldr	r8, [r4, #72]	; 0x48
   11e9c:	e203301f 	and	r3, r3, #31
   11ea0:	e3530011 	cmp	r3, #17
   11ea4:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   11ea8:	0a00001b 	beq	11f1c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc0>
   11eac:	e3530012 	cmp	r3, #18
   11eb0:	0a000014 	beq	11f08 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
   11eb4:	e59f107c 	ldr	r1, [pc, #124]	; 11f38 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   11eb8:	e1a00006 	mov	r0, r6
   11ebc:	ebffdd03 	bl	92d0 <debug_stacktrace(unsigned int const*, char const*)>
   11ec0:	ebffe489 	bl	b0ec <CLogger::Get()>
   11ec4:	e59f3070 	ldr	r3, [pc, #112]	; 11f3c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   11ec8:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   11ecc:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   11ed0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   11ed4:	e58d1000 	str	r1, [sp]
   11ed8:	e58d2018 	str	r2, [sp, #24]
   11edc:	e58d3004 	str	r3, [sp, #4]
   11ee0:	e58d8014 	str	r8, [sp, #20]
   11ee4:	e58d6010 	str	r6, [sp, #16]
   11ee8:	e58d700c 	str	r7, [sp, #12]
   11eec:	e58d9008 	str	r9, [sp, #8]
   11ef0:	e59f3048 	ldr	r3, [pc, #72]	; 11f40 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   11ef4:	e3a02000 	mov	r2, #0
   11ef8:	e59f1038 	ldr	r1, [pc, #56]	; 11f38 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   11efc:	ebffe3bc 	bl	adf4 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11f00:	e28dd024 	add	sp, sp, #36	; 0x24
   11f04:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11f08:	e8940140 	ldm	r4, {r6, r8}
   11f0c:	eaffffe8 	b	11eb4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   11f10:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   11f14:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   11f18:	eaffffdb 	b	11e8c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   11f1c:	e594800c 	ldr	r8, [r4, #12]
   11f20:	e5946008 	ldr	r6, [r4, #8]
   11f24:	eaffffe2 	b	11eb4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   11f28:	e3a02069 	mov	r2, #105	; 0x69
   11f2c:	e59f1010 	ldr	r1, [pc, #16]	; 11f44 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   11f30:	e59f0010 	ldr	r0, [pc, #16]	; 11f48 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   11f34:	ebffdc7f 	bl	9138 <assertion_failed>
   11f38:	00018060 	.word	0x00018060
   11f3c:	00019b1c 	.word	0x00019b1c
   11f40:	0001809c 	.word	0x0001809c
   11f44:	00018068 	.word	0x00018068
   11f48:	00018090 	.word	0x00018090

00011f4c <CExceptionHandler::Get()>:
   11f4c:	e59f3010 	ldr	r3, [pc, #16]	; 11f64 <CExceptionHandler::Get()+0x18>
   11f50:	e5930000 	ldr	r0, [r3]
   11f54:	e3500000 	cmp	r0, #0
   11f58:	112fff1e 	bxne	lr
   11f5c:	e92d4010 	push	{r4, lr}
   11f60:	ebffff7f 	bl	11d64 <CExceptionHandler::Get() [clone .part.1]>
   11f64:	00019b98 	.word	0x00019b98

00011f68 <ExceptionHandler>:
   11f68:	e92d4070 	push	{r4, r5, r6, lr}
   11f6c:	e3a03000 	mov	r3, #0
   11f70:	e1a04000 	mov	r4, r0
   11f74:	e1a05001 	mov	r5, r1
   11f78:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   11f7c:	eb0002c6 	bl	12a9c <CInterruptSystem::DisableFIQ()>
   11f80:	f1080040 	cpsie	f
   11f84:	e59f301c 	ldr	r3, [pc, #28]	; 11fa8 <ExceptionHandler+0x40>
   11f88:	e5930000 	ldr	r0, [r3]
   11f8c:	e3500000 	cmp	r0, #0
   11f90:	0a000003 	beq	11fa4 <ExceptionHandler+0x3c>
   11f94:	e1a02005 	mov	r2, r5
   11f98:	e1a01004 	mov	r1, r4
   11f9c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11fa0:	eaffffad 	b	11e5c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   11fa4:	ebffff6e 	bl	11d64 <CExceptionHandler::Get() [clone .part.1]>
   11fa8:	00019b98 	.word	0x00019b98

00011fac <raise>:
   11fac:	e59f3020 	ldr	r3, [pc, #32]	; 11fd4 <raise+0x28>
   11fb0:	e92d4010 	push	{r4, lr}
   11fb4:	e5930000 	ldr	r0, [r3]
   11fb8:	e3500000 	cmp	r0, #0
   11fbc:	0a000003 	beq	11fd0 <raise+0x24>
   11fc0:	e3a01004 	mov	r1, #4
   11fc4:	ebffff94 	bl	11e1c <CExceptionHandler::Throw(unsigned int)>
   11fc8:	e3a00000 	mov	r0, #0
   11fcc:	e8bd8010 	pop	{r4, pc}
   11fd0:	ebffff63 	bl	11d64 <CExceptionHandler::Get() [clone .part.1]>
   11fd4:	00019b98 	.word	0x00019b98

00011fd8 <UndefinedInstructionInternal>:
   11fd8:	e24dd004 	sub	sp, sp, #4
   11fdc:	e24ee004 	sub	lr, lr, #4
   11fe0:	e92d4000 	stmfd	sp!, {lr}
   11fe4:	e14fe000 	mrs	lr, SPSR
   11fe8:	e92d4000 	stmfd	sp!, {lr}
   11fec:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   11ff0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11ff4:	e1a0100d 	mov	r1, sp
   11ff8:	f1020012 	cps	#18
   11ffc:	e1a0200d 	mov	r2, sp
   12000:	e1a0300e 	mov	r3, lr
   12004:	f1020011 	cps	#17
   12008:	e1a0400d 	mov	r4, sp
   1200c:	e1a0500e 	mov	r5, lr
   12010:	f102001f 	cps	#31
   12014:	e1a0d001 	mov	sp, r1
   12018:	e92d003c 	push	{r2, r3, r4, r5}
   1201c:	e1a0100d 	mov	r1, sp
   12020:	e3a00001 	mov	r0, #1
   12024:	eaffffcf 	b	11f68 <ExceptionHandler>

00012028 <PrefetchAbortStub>:
   12028:	e24dd004 	sub	sp, sp, #4
   1202c:	e24ee004 	sub	lr, lr, #4
   12030:	e92d4000 	stmfd	sp!, {lr}
   12034:	e14fe000 	mrs	lr, SPSR
   12038:	e92d4000 	stmfd	sp!, {lr}
   1203c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   12040:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12044:	e1a0100d 	mov	r1, sp
   12048:	f1020012 	cps	#18
   1204c:	e1a0200d 	mov	r2, sp
   12050:	e1a0300e 	mov	r3, lr
   12054:	f1020011 	cps	#17
   12058:	e1a0400d 	mov	r4, sp
   1205c:	e1a0500e 	mov	r5, lr
   12060:	f102001f 	cps	#31
   12064:	e1a0d001 	mov	sp, r1
   12068:	e92d003c 	push	{r2, r3, r4, r5}
   1206c:	e1a0100d 	mov	r1, sp
   12070:	e3a00002 	mov	r0, #2
   12074:	eaffffbb 	b	11f68 <ExceptionHandler>

00012078 <DataAbortStub>:
   12078:	e24dd004 	sub	sp, sp, #4
   1207c:	e24ee008 	sub	lr, lr, #8
   12080:	e92d4000 	stmfd	sp!, {lr}
   12084:	e14fe000 	mrs	lr, SPSR
   12088:	e92d4000 	stmfd	sp!, {lr}
   1208c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   12090:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12094:	e1a0100d 	mov	r1, sp
   12098:	f1020012 	cps	#18
   1209c:	e1a0200d 	mov	r2, sp
   120a0:	e1a0300e 	mov	r3, lr
   120a4:	f1020011 	cps	#17
   120a8:	e1a0400d 	mov	r4, sp
   120ac:	e1a0500e 	mov	r5, lr
   120b0:	f102001f 	cps	#31
   120b4:	e1a0d001 	mov	sp, r1
   120b8:	e92d003c 	push	{r2, r3, r4, r5}
   120bc:	e1a0100d 	mov	r1, sp
   120c0:	e3a00003 	mov	r0, #3
   120c4:	eaffffa7 	b	11f68 <ExceptionHandler>

000120c8 <UndefinedInstructionStub>:
   120c8:	e92d4001 	push	{r0, lr}
   120cc:	eef80a10 	vmrs	r0, fpexc
   120d0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   120d4:	0affffbf 	beq	11fd8 <UndefinedInstructionInternal>
   120d8:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   120dc:	eee80a10 	vmsr	fpexc, r0
   120e0:	e8fd8001 	ldm	sp!, {r0, pc}^

000120e4 <IRQStub>:
   120e4:	e24ee004 	sub	lr, lr, #4
   120e8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   120ec:	e59f0060 	ldr	r0, [pc, #96]	; 12154 <FIQStub+0x58>
   120f0:	e580e000 	str	lr, [r0]
   120f4:	eb0002c1 	bl	12c00 <InterruptHandler>
   120f8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

000120fc <FIQStub>:
   120fc:	e24ee004 	sub	lr, lr, #4
   12100:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   12104:	e3a03000 	mov	r3, #0
   12108:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1210c:	e59f2044 	ldr	r2, [pc, #68]	; 12158 <FIQStub+0x5c>
   12110:	e5921000 	ldr	r1, [r2]
   12114:	e3510000 	cmp	r1, #0
   12118:	0a000004 	beq	12130 <FIQStub+0x34>
   1211c:	e5920004 	ldr	r0, [r2, #4]
   12120:	e12fff31 	blx	r1
   12124:	e3a03000 	mov	r3, #0
   12128:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1212c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   12130:	e3a03000 	mov	r3, #0
   12134:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12138:	e59f101c 	ldr	r1, [pc, #28]	; 1215c <FIQStub+0x60>
   1213c:	e3a00000 	mov	r0, #0
   12140:	e5810000 	str	r0, [r1]
   12144:	e3a03000 	mov	r3, #0
   12148:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1214c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12150:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   12154:	00019b3c 	.word	0x00019b3c
   12158:	00019b30 	.word	0x00019b30
   1215c:	2000b20c 	.word	0x2000b20c

00012160 <CMemorySystem::CMemorySystem(bool)>:
   12160:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12164:	e1a04000 	mov	r4, r0
   12168:	e3a05000 	mov	r5, #0
   1216c:	e280700c 	add	r7, r0, #12
   12170:	e5c01000 	strb	r1, [r0]
   12174:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   12178:	e5845004 	str	r5, [r4, #4]
   1217c:	e5845008 	str	r5, [r4, #8]
   12180:	e59f1108 	ldr	r1, [pc, #264]	; 12290 <CMemorySystem::CMemorySystem(bool)+0x130>
   12184:	e1a00007 	mov	r0, r7
   12188:	e28460c8 	add	r6, r4, #200	; 0xc8
   1218c:	ebfffde2 	bl	1191c <CHeapAllocator::CHeapAllocator(char const*)>
   12190:	e1a00006 	mov	r0, r6
   12194:	eb0009ee 	bl	14954 <CPageAllocator::CPageAllocator()>
   12198:	e59f30f4 	ldr	r3, [pc, #244]	; 12294 <CMemorySystem::CMemorySystem(bool)+0x134>
   1219c:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   121a0:	e5935000 	ldr	r5, [r3]
   121a4:	e3550000 	cmp	r5, #0
   121a8:	0a000002 	beq	121b8 <CMemorySystem::CMemorySystem(bool)+0x58>
   121ac:	e1a00004 	mov	r0, r4
   121b0:	e28dd02c 	add	sp, sp, #44	; 0x2c
   121b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   121b8:	e3a01001 	mov	r1, #1
   121bc:	e28d000c 	add	r0, sp, #12
   121c0:	e5834000 	str	r4, [r3]
   121c4:	eb0003dc 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   121c8:	e3a03014 	mov	r3, #20
   121cc:	e58d5000 	str	r5, [sp]
   121d0:	e28d000c 	add	r0, sp, #12
   121d4:	e08d2003 	add	r2, sp, r3
   121d8:	e59f10b8 	ldr	r1, [pc, #184]	; 12298 <CMemorySystem::CMemorySystem(bool)+0x138>
   121dc:	eb0003e2 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   121e0:	e3500000 	cmp	r0, #0
   121e4:	0a000016 	beq	12244 <CMemorySystem::CMemorySystem(bool)+0xe4>
   121e8:	e59d3020 	ldr	r3, [sp, #32]
   121ec:	e3530000 	cmp	r3, #0
   121f0:	1a000022 	bne	12280 <CMemorySystem::CMemorySystem(bool)+0x120>
   121f4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   121f8:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   121fc:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   12200:	e5843004 	str	r3, [r4, #4]
   12204:	e1a00007 	mov	r0, r7
   12208:	e3a03701 	mov	r3, #262144	; 0x40000
   1220c:	e3a01605 	mov	r1, #5242880	; 0x500000
   12210:	ebfffdda 	bl	11980 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   12214:	e1a01005 	mov	r1, r5
   12218:	e1a00006 	mov	r0, r6
   1221c:	e3a02501 	mov	r2, #4194304	; 0x400000
   12220:	eb0009d3 	bl	14974 <CPageAllocator::Setup(unsigned int, unsigned int)>
   12224:	e5d43000 	ldrb	r3, [r4]
   12228:	e3530000 	cmp	r3, #0
   1222c:	1a00000a 	bne	1225c <CMemorySystem::CMemorySystem(bool)+0xfc>
   12230:	e28d000c 	add	r0, sp, #12
   12234:	eb0003c7 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
   12238:	e1a00004 	mov	r0, r4
   1223c:	e28dd02c 	add	sp, sp, #44	; 0x2c
   12240:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12244:	e3a03303 	mov	r3, #201326592	; 0xc000000
   12248:	e58d0020 	str	r0, [sp, #32]
   1224c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   12250:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   12254:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   12258:	eaffffe8 	b	12200 <CMemorySystem::CMemorySystem(bool)+0xa0>
   1225c:	e3a00004 	mov	r0, #4
   12260:	ebfffd98 	bl	118c8 <operator new(unsigned int)>
   12264:	e1a05000 	mov	r5, r0
   12268:	e5941004 	ldr	r1, [r4, #4]
   1226c:	eb00007e 	bl	1246c <CPageTable::CPageTable(unsigned int)>
   12270:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   12274:	e1a00004 	mov	r0, r4
   12278:	eb000040 	bl	12380 <CMemorySystem::EnableMMU()>
   1227c:	eaffffeb 	b	12230 <CMemorySystem::CMemorySystem(bool)+0xd0>
   12280:	e59f1014 	ldr	r1, [pc, #20]	; 1229c <CMemorySystem::CMemorySystem(bool)+0x13c>
   12284:	e3a0204e 	mov	r2, #78	; 0x4e
   12288:	e281000c 	add	r0, r1, #12
   1228c:	ebffdba9 	bl	9138 <assertion_failed>
   12290:	0001812c 	.word	0x0001812c
   12294:	00019b9c 	.word	0x00019b9c
   12298:	00010005 	.word	0x00010005
   1229c:	00018134 	.word	0x00018134

000122a0 <CMemorySystem::~CMemorySystem()>:
   122a0:	e59f3044 	ldr	r3, [pc, #68]	; 122ec <CMemorySystem::~CMemorySystem()+0x4c>
   122a4:	e92d4010 	push	{r4, lr}
   122a8:	e5932000 	ldr	r2, [r3]
   122ac:	e1a04000 	mov	r4, r0
   122b0:	e1500002 	cmp	r0, r2
   122b4:	0a000005 	beq	122d0 <CMemorySystem::~CMemorySystem()+0x30>
   122b8:	e28400c8 	add	r0, r4, #200	; 0xc8
   122bc:	eb0009ab 	bl	14970 <CPageAllocator::~CPageAllocator()>
   122c0:	e284000c 	add	r0, r4, #12
   122c4:	ebfffdac 	bl	1197c <CHeapAllocator::~CHeapAllocator()>
   122c8:	e1a00004 	mov	r0, r4
   122cc:	e8bd8010 	pop	{r4, pc}
   122d0:	e3a01000 	mov	r1, #0
   122d4:	e5d02000 	ldrb	r2, [r0]
   122d8:	e5831000 	str	r1, [r3]
   122dc:	e1520001 	cmp	r2, r1
   122e0:	0afffff4 	beq	122b8 <CMemorySystem::~CMemorySystem()+0x18>
   122e4:	eb000055 	bl	12440 <CMemorySystem::Destructor() [clone .part.0]>
   122e8:	eafffff2 	b	122b8 <CMemorySystem::~CMemorySystem()+0x18>
   122ec:	00019b9c 	.word	0x00019b9c

000122f0 <CMemorySystem::Destructor()>:
   122f0:	e59f3020 	ldr	r3, [pc, #32]	; 12318 <CMemorySystem::Destructor()+0x28>
   122f4:	e5932000 	ldr	r2, [r3]
   122f8:	e1520000 	cmp	r2, r0
   122fc:	112fff1e 	bxne	lr
   12300:	e3a01000 	mov	r1, #0
   12304:	e5d22000 	ldrb	r2, [r2]
   12308:	e5831000 	str	r1, [r3]
   1230c:	e1520001 	cmp	r2, r1
   12310:	012fff1e 	bxeq	lr
   12314:	ea000049 	b	12440 <CMemorySystem::Destructor() [clone .part.0]>
   12318:	00019b9c 	.word	0x00019b9c

0001231c <CMemorySystem::GetMemSize() const>:
   1231c:	e59f3028 	ldr	r3, [pc, #40]	; 1234c <CMemorySystem::GetMemSize() const+0x30>
   12320:	e5933000 	ldr	r3, [r3]
   12324:	e3530000 	cmp	r3, #0
   12328:	0a000002 	beq	12338 <CMemorySystem::GetMemSize() const+0x1c>
   1232c:	e9930009 	ldmib	r3, {r0, r3}
   12330:	e0800003 	add	r0, r0, r3
   12334:	e12fff1e 	bx	lr
   12338:	e59f1010 	ldr	r1, [pc, #16]	; 12350 <CMemorySystem::GetMemSize() const+0x34>
   1233c:	e92d4010 	push	{r4, lr}
   12340:	e3a020a0 	mov	r2, #160	; 0xa0
   12344:	e2810028 	add	r0, r1, #40	; 0x28
   12348:	ebffdb7a 	bl	9138 <assertion_failed>
   1234c:	00019b9c 	.word	0x00019b9c
   12350:	00018134 	.word	0x00018134

00012354 <CMemorySystem::Get()>:
   12354:	e59f301c 	ldr	r3, [pc, #28]	; 12378 <CMemorySystem::Get()+0x24>
   12358:	e5930000 	ldr	r0, [r3]
   1235c:	e3500000 	cmp	r0, #0
   12360:	112fff1e 	bxne	lr
   12364:	e59f1010 	ldr	r1, [pc, #16]	; 1237c <CMemorySystem::Get()+0x28>
   12368:	e92d4010 	push	{r4, lr}
   1236c:	e3a020a6 	mov	r2, #166	; 0xa6
   12370:	e2810028 	add	r0, r1, #40	; 0x28
   12374:	ebffdb6f 	bl	9138 <assertion_failed>
   12378:	00019b9c 	.word	0x00019b9c
   1237c:	00018134 	.word	0x00018134

00012380 <CMemorySystem::EnableMMU()>:
   12380:	e5d03000 	ldrb	r3, [r0]
   12384:	e92d4010 	push	{r4, lr}
   12388:	e3530000 	cmp	r3, #0
   1238c:	0a00001a 	beq	123fc <CMemorySystem::EnableMMU()+0x7c>
   12390:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   12394:	e3833040 	orr	r3, r3, #64	; 0x40
   12398:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   1239c:	ee104f70 	mrc	15, 0, r4, cr0, cr0, {3}
   123a0:	e2144001 	ands	r4, r4, #1
   123a4:	1a000018 	bne	1240c <CMemorySystem::EnableMMU()+0x8c>
   123a8:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   123ac:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   123b0:	e3500000 	cmp	r0, #0
   123b4:	0a000018 	beq	1241c <CMemorySystem::EnableMMU()+0x9c>
   123b8:	eb000051 	bl	12504 <CPageTable::GetBaseAddress() const>
   123bc:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   123c0:	e3a03001 	mov	r3, #1
   123c4:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   123c8:	ee074f16 	mcr	15, 0, r4, cr7, cr6, {0}
   123cc:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   123d0:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   123d4:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   123d8:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   123dc:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   123e0:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   123e4:	ee112f10 	mrc	15, 0, r2, cr1, cr0, {0}
   123e8:	e59f303c 	ldr	r3, [pc, #60]	; 1242c <CMemorySystem::EnableMMU()+0xac>
   123ec:	e3c22002 	bic	r2, r2, #2
   123f0:	e1823003 	orr	r3, r2, r3
   123f4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   123f8:	e8bd8010 	pop	{r4, pc}
   123fc:	e59f102c 	ldr	r1, [pc, #44]	; 12430 <CMemorySystem::EnableMMU()+0xb0>
   12400:	e3a020ac 	mov	r2, #172	; 0xac
   12404:	e2810038 	add	r0, r1, #56	; 0x38
   12408:	ebffdb4a 	bl	9138 <assertion_failed>
   1240c:	e59f101c 	ldr	r1, [pc, #28]	; 12430 <CMemorySystem::EnableMMU()+0xb0>
   12410:	e3a020ba 	mov	r2, #186	; 0xba
   12414:	e2810048 	add	r0, r1, #72	; 0x48
   12418:	ebffdb46 	bl	9138 <assertion_failed>
   1241c:	e59f100c 	ldr	r1, [pc, #12]	; 12430 <CMemorySystem::EnableMMU()+0xb0>
   12420:	e3a020c0 	mov	r2, #192	; 0xc0
   12424:	e2810074 	add	r0, r1, #116	; 0x74
   12428:	ebffdb42 	bl	9138 <assertion_failed>
   1242c:	00c01805 	.word	0x00c01805
   12430:	00018134 	.word	0x00018134

00012434 <CMemorySystem::GetCoherentPage(unsigned int)>:
   12434:	e1a00600 	lsl	r0, r0, #12
   12438:	e2800501 	add	r0, r0, #4194304	; 0x400000
   1243c:	e12fff1e 	bx	lr

00012440 <CMemorySystem::Destructor() [clone .part.0]>:
   12440:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   12444:	e3c33005 	bic	r3, r3, #5
   12448:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   1244c:	e3a03000 	mov	r3, #0
   12450:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   12454:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12458:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   1245c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12460:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   12464:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12468:	e12fff1e 	bx	lr

0001246c <CPageTable::CPageTable(unsigned int)>:
   1246c:	e3a0c709 	mov	ip, #2359296	; 0x240000
   12470:	e3a03000 	mov	r3, #0
   12474:	e1a0200c 	mov	r2, ip
   12478:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1247c:	e59fe064 	ldr	lr, [pc, #100]	; 124e8 <CPageTable::CPageTable(unsigned int)+0x7c>
   12480:	e59f7064 	ldr	r7, [pc, #100]	; 124ec <CPageTable::CPageTable(unsigned int)+0x80>
   12484:	e59f6064 	ldr	r6, [pc, #100]	; 124f0 <CPageTable::CPageTable(unsigned int)+0x84>
   12488:	e59f8064 	ldr	r8, [pc, #100]	; 124f4 <CPageTable::CPageTable(unsigned int)+0x88>
   1248c:	e59f5064 	ldr	r5, [pc, #100]	; 124f8 <CPageTable::CPageTable(unsigned int)+0x8c>
   12490:	e59f4064 	ldr	r4, [pc, #100]	; 124fc <CPageTable::CPageTable(unsigned int)+0x90>
   12494:	e580c000 	str	ip, [r0]
   12498:	e15e0003 	cmp	lr, r3
   1249c:	8183c004 	orrhi	ip, r3, r4
   124a0:	8a000008 	bhi	124c8 <CPageTable::CPageTable(unsigned int)+0x5c>
   124a4:	e3530501 	cmp	r3, #4194304	; 0x400000
   124a8:	01a0c007 	moveq	ip, r7
   124ac:	0a000005 	beq	124c8 <CPageTable::CPageTable(unsigned int)+0x5c>
   124b0:	e1510003 	cmp	r1, r3
   124b4:	8183c005 	orrhi	ip, r3, r5
   124b8:	8a000002 	bhi	124c8 <CPageTable::CPageTable(unsigned int)+0x5c>
   124bc:	e1560902 	cmp	r6, r2, lsl #18
   124c0:	31a0c003 	movcc	ip, r3
   124c4:	2183c008 	orrcs	ip, r3, r8
   124c8:	e482c004 	str	ip, [r2], #4
   124cc:	e3520991 	cmp	r2, #2375680	; 0x244000
   124d0:	e2833601 	add	r3, r3, #1048576	; 0x100000
   124d4:	1affffef 	bne	12498 <CPageTable::CPageTable(unsigned int)+0x2c>
   124d8:	e3a03000 	mov	r3, #0
   124dc:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   124e0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   124e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   124e8:	00015364 	.word	0x00015364
   124ec:	00410412 	.word	0x00410412
   124f0:	20fffffe 	.word	0x20fffffe
   124f4:	00010416 	.word	0x00010416
   124f8:	0000041e 	.word	0x0000041e
   124fc:	0000040e 	.word	0x0000040e

00012500 <CPageTable::~CPageTable()>:
   12500:	e12fff1e 	bx	lr

00012504 <CPageTable::GetBaseAddress() const>:
   12504:	e5900000 	ldr	r0, [r0]
   12508:	e3800001 	orr	r0, r0, #1
   1250c:	e12fff1e 	bx	lr

00012510 <CurrentExecutionLevel>:
   12510:	e10f0000 	mrs	r0, CPSR
   12514:	e3100040 	tst	r0, #64	; 0x40
   12518:	01a003a0 	lsreq	r0, r0, #7
   1251c:	02000001 	andeq	r0, r0, #1
   12520:	13a00002 	movne	r0, #2
   12524:	e12fff1e 	bx	lr

00012528 <EnterCritical>:
   12528:	e2403001 	sub	r3, r0, #1
   1252c:	e3530001 	cmp	r3, #1
   12530:	e92d4010 	push	{r4, lr}
   12534:	8a000012 	bhi	12584 <EnterCritical+0x5c>
   12538:	e10f1000 	mrs	r1, CPSR
   1253c:	e3500002 	cmp	r0, #2
   12540:	1a000013 	bne	12594 <EnterCritical+0x6c>
   12544:	f10c00c0 	cpsid	if
   12548:	e59f306c 	ldr	r3, [pc, #108]	; 125bc <EnterCritical+0x94>
   1254c:	e5932000 	ldr	r2, [r3]
   12550:	e3520013 	cmp	r2, #19
   12554:	8a000014 	bhi	125ac <EnterCritical+0x84>
   12558:	e5932000 	ldr	r2, [r3]
   1255c:	e3500001 	cmp	r0, #1
   12560:	e2820001 	add	r0, r2, #1
   12564:	e0832102 	add	r2, r3, r2, lsl #2
   12568:	e5830000 	str	r0, [r3]
   1256c:	e5821004 	str	r1, [r2, #4]
   12570:	1a000000 	bne	12578 <EnterCritical+0x50>
   12574:	f1080040 	cpsie	f
   12578:	e3a03000 	mov	r3, #0
   1257c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12580:	e8bd8010 	pop	{r4, pc}
   12584:	e3a02064 	mov	r2, #100	; 0x64
   12588:	e59f1030 	ldr	r1, [pc, #48]	; 125c0 <EnterCritical+0x98>
   1258c:	e59f0030 	ldr	r0, [pc, #48]	; 125c4 <EnterCritical+0x9c>
   12590:	ebffdae8 	bl	9138 <assertion_failed>
   12594:	e3110040 	tst	r1, #64	; 0x40
   12598:	0affffe9 	beq	12544 <EnterCritical+0x1c>
   1259c:	e3a0206a 	mov	r2, #106	; 0x6a
   125a0:	e59f1018 	ldr	r1, [pc, #24]	; 125c0 <EnterCritical+0x98>
   125a4:	e59f001c 	ldr	r0, [pc, #28]	; 125c8 <EnterCritical+0xa0>
   125a8:	ebffdae2 	bl	9138 <assertion_failed>
   125ac:	e3a0206e 	mov	r2, #110	; 0x6e
   125b0:	e59f1008 	ldr	r1, [pc, #8]	; 125c0 <EnterCritical+0x98>
   125b4:	e59f0010 	ldr	r0, [pc, #16]	; 125cc <EnterCritical+0xa4>
   125b8:	ebffdade 	bl	9138 <assertion_failed>
   125bc:	00019ba0 	.word	0x00019ba0
   125c0:	000181bc 	.word	0x000181bc
   125c4:	000181cc 	.word	0x000181cc
   125c8:	00018204 	.word	0x00018204
   125cc:	00018234 	.word	0x00018234

000125d0 <LeaveCritical>:
   125d0:	e3a03000 	mov	r3, #0
   125d4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   125d8:	f10c0040 	cpsid	f
   125dc:	e59f3038 	ldr	r3, [pc, #56]	; 1261c <LeaveCritical+0x4c>
   125e0:	e5932000 	ldr	r2, [r3]
   125e4:	e3520000 	cmp	r2, #0
   125e8:	0a000006 	beq	12608 <LeaveCritical+0x38>
   125ec:	e5932000 	ldr	r2, [r3]
   125f0:	e2422001 	sub	r2, r2, #1
   125f4:	e5832000 	str	r2, [r3]
   125f8:	e0833102 	add	r3, r3, r2, lsl #2
   125fc:	e5933004 	ldr	r3, [r3, #4]
   12600:	e121f003 	msr	CPSR_c, r3
   12604:	e12fff1e 	bx	lr
   12608:	e92d4010 	push	{r4, lr}
   1260c:	e3a0207f 	mov	r2, #127	; 0x7f
   12610:	e59f1008 	ldr	r1, [pc, #8]	; 12620 <LeaveCritical+0x50>
   12614:	e59f0008 	ldr	r0, [pc, #8]	; 12624 <LeaveCritical+0x54>
   12618:	ebffdac6 	bl	9138 <assertion_failed>
   1261c:	00019ba0 	.word	0x00019ba0
   12620:	000181bc 	.word	0x000181bc
   12624:	0001825c 	.word	0x0001825c

00012628 <CleanAndInvalidateDataCacheRange>:
   12628:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   1262c:	e3510020 	cmp	r1, #32
   12630:	9a000008 	bls	12658 <CleanAndInvalidateDataCacheRange+0x30>
   12634:	e2413021 	sub	r3, r1, #33	; 0x21
   12638:	e3c3301f 	bic	r3, r3, #31
   1263c:	e2800020 	add	r0, r0, #32
   12640:	e0833000 	add	r3, r3, r0
   12644:	ea000000 	b	1264c <CleanAndInvalidateDataCacheRange+0x24>
   12648:	e2800020 	add	r0, r0, #32
   1264c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   12650:	e1500003 	cmp	r0, r3
   12654:	1afffffb 	bne	12648 <CleanAndInvalidateDataCacheRange+0x20>
   12658:	e3a03000 	mov	r3, #0
   1265c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12660:	e12fff1e 	bx	lr

00012664 <SyncDataAndInstructionCache>:
   12664:	e3a03000 	mov	r3, #0
   12668:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   1266c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12670:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   12674:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   12678:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1267c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   12680:	e12fff1e 	bx	lr

00012684 <CInterruptSystem::CInterruptSystem()>:
   12684:	e1a0c000 	mov	ip, r0
   12688:	e3a02000 	mov	r2, #0
   1268c:	e2403004 	sub	r3, r0, #4
   12690:	e2801f47 	add	r1, r0, #284	; 0x11c
   12694:	e5a32004 	str	r2, [r3, #4]!
   12698:	e1530001 	cmp	r3, r1
   1269c:	e5832120 	str	r2, [r3, #288]	; 0x120
   126a0:	1afffffb 	bne	12694 <CInterruptSystem::CInterruptSystem()+0x10>
   126a4:	e59f3008 	ldr	r3, [pc, #8]	; 126b4 <CInterruptSystem::CInterruptSystem()+0x30>
   126a8:	e1a0000c 	mov	r0, ip
   126ac:	e583c000 	str	ip, [r3]
   126b0:	e12fff1e 	bx	lr
   126b4:	00019bf4 	.word	0x00019bf4

000126b8 <CInterruptSystem::~CInterruptSystem()>:
   126b8:	f10c0080 	cpsid	i
   126bc:	e3a03000 	mov	r3, #0
   126c0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   126c4:	e3e01000 	mvn	r1, #0
   126c8:	e59f201c 	ldr	r2, [pc, #28]	; 126ec <CInterruptSystem::~CInterruptSystem()+0x34>
   126cc:	e582320c 	str	r3, [r2, #524]	; 0x20c
   126d0:	e582121c 	str	r1, [r2, #540]	; 0x21c
   126d4:	e5821220 	str	r1, [r2, #544]	; 0x220
   126d8:	e5821224 	str	r1, [r2, #548]	; 0x224
   126dc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   126e0:	e59f2008 	ldr	r2, [pc, #8]	; 126f0 <CInterruptSystem::~CInterruptSystem()+0x38>
   126e4:	e5823000 	str	r3, [r2]
   126e8:	e12fff1e 	bx	lr
   126ec:	2000b000 	.word	0x2000b000
   126f0:	00019bf4 	.word	0x00019bf4

000126f4 <CInterruptSystem::Initialize()>:
   126f4:	e92d4010 	push	{r4, lr}
   126f8:	e3a04000 	mov	r4, #0
   126fc:	e59f204c 	ldr	r2, [pc, #76]	; 12750 <CInterruptSystem::Initialize()+0x5c>
   12700:	e59f304c 	ldr	r3, [pc, #76]	; 12754 <CInterruptSystem::Initialize()+0x60>
   12704:	e1a02142 	asr	r2, r2, #2
   12708:	e1a03143 	asr	r3, r3, #2
   1270c:	e2422002 	sub	r2, r2, #2
   12710:	e2433002 	sub	r3, r3, #2
   12714:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   12718:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   1271c:	e1c421f8 	strd	r2, [r4, #24]
   12720:	ebffffcf 	bl	12664 <SyncDataAndInstructionCache>
   12724:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   12728:	e3e02000 	mvn	r2, #0
   1272c:	e59f3024 	ldr	r3, [pc, #36]	; 12758 <CInterruptSystem::Initialize()+0x64>
   12730:	e583420c 	str	r4, [r3, #524]	; 0x20c
   12734:	e583221c 	str	r2, [r3, #540]	; 0x21c
   12738:	e5832220 	str	r2, [r3, #544]	; 0x220
   1273c:	e5832224 	str	r2, [r3, #548]	; 0x224
   12740:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   12744:	f1080080 	cpsie	i
   12748:	e3a00001 	mov	r0, #1
   1274c:	e8bd8010 	pop	{r4, pc}
   12750:	000120cc 	.word	0x000120cc
   12754:	000120e0 	.word	0x000120e0
   12758:	2000b000 	.word	0x2000b000

0001275c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   1275c:	e3510047 	cmp	r1, #71	; 0x47
   12760:	e92d4010 	push	{r4, lr}
   12764:	8a00001e 	bhi	127e4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   12768:	e3520000 	cmp	r2, #0
   1276c:	0a000020 	beq	127f4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   12770:	e59f009c 	ldr	r0, [pc, #156]	; 12814 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   12774:	e5d0e001 	ldrb	lr, [r0, #1]
   12778:	e5d0c000 	ldrb	ip, [r0]
   1277c:	e5d04002 	ldrb	r4, [r0, #2]
   12780:	e18cc40e 	orr	ip, ip, lr, lsl #8
   12784:	e5d0e003 	ldrb	lr, [r0, #3]
   12788:	e18cc804 	orr	ip, ip, r4, lsl #16
   1278c:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   12790:	1a00001b 	bne	12804 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   12794:	e1a04422 	lsr	r4, r2, #8
   12798:	e1a0e822 	lsr	lr, r2, #16
   1279c:	e5c02000 	strb	r2, [r0]
   127a0:	e5c03004 	strb	r3, [r0, #4]
   127a4:	e1a02c22 	lsr	r2, r2, #24
   127a8:	e5c04001 	strb	r4, [r0, #1]
   127ac:	e5c0e002 	strb	lr, [r0, #2]
   127b0:	e1a04423 	lsr	r4, r3, #8
   127b4:	e1a0e823 	lsr	lr, r3, #16
   127b8:	e1a03c23 	lsr	r3, r3, #24
   127bc:	e5c02003 	strb	r2, [r0, #3]
   127c0:	e5c04005 	strb	r4, [r0, #5]
   127c4:	e5c0e006 	strb	lr, [r0, #6]
   127c8:	e5c03007 	strb	r3, [r0, #7]
   127cc:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   127d0:	e59f3040 	ldr	r3, [pc, #64]	; 12818 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
   127d4:	e3811080 	orr	r1, r1, #128	; 0x80
   127d8:	e583120c 	str	r1, [r3, #524]	; 0x20c
   127dc:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   127e0:	e8bd8010 	pop	{r4, pc}
   127e4:	e3a0208f 	mov	r2, #143	; 0x8f
   127e8:	e59f102c 	ldr	r1, [pc, #44]	; 1281c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   127ec:	e59f002c 	ldr	r0, [pc, #44]	; 12820 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   127f0:	ebffda50 	bl	9138 <assertion_failed>
   127f4:	e3a02090 	mov	r2, #144	; 0x90
   127f8:	e59f101c 	ldr	r1, [pc, #28]	; 1281c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   127fc:	e59f0020 	ldr	r0, [pc, #32]	; 12824 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   12800:	ebffda4c 	bl	9138 <assertion_failed>
   12804:	e3a02091 	mov	r2, #145	; 0x91
   12808:	e59f100c 	ldr	r1, [pc, #12]	; 1281c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   1280c:	e59f0014 	ldr	r0, [pc, #20]	; 12828 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   12810:	ebffda48 	bl	9138 <assertion_failed>
   12814:	00019b30 	.word	0x00019b30
   12818:	2000b000 	.word	0x2000b000
   1281c:	00018274 	.word	0x00018274
   12820:	00018284 	.word	0x00018284
   12824:	000182b8 	.word	0x000182b8
   12828:	00018298 	.word	0x00018298

0001282c <CInterruptSystem::DisconnectFIQ()>:
   1282c:	e59f3068 	ldr	r3, [pc, #104]	; 1289c <CInterruptSystem::DisconnectFIQ()+0x70>
   12830:	e5d31001 	ldrb	r1, [r3, #1]
   12834:	e5d32000 	ldrb	r2, [r3]
   12838:	e5d30002 	ldrb	r0, [r3, #2]
   1283c:	e1822401 	orr	r2, r2, r1, lsl #8
   12840:	e5d31003 	ldrb	r1, [r3, #3]
   12844:	e1822800 	orr	r2, r2, r0, lsl #16
   12848:	e1922c01 	orrs	r2, r2, r1, lsl #24
   1284c:	0a00000d 	beq	12888 <CInterruptSystem::DisconnectFIQ()+0x5c>
   12850:	e3a02000 	mov	r2, #0
   12854:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   12858:	e59f1040 	ldr	r1, [pc, #64]	; 128a0 <CInterruptSystem::DisconnectFIQ()+0x74>
   1285c:	e581220c 	str	r2, [r1, #524]	; 0x20c
   12860:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   12864:	e5c32000 	strb	r2, [r3]
   12868:	e5c32001 	strb	r2, [r3, #1]
   1286c:	e5c32002 	strb	r2, [r3, #2]
   12870:	e5c32003 	strb	r2, [r3, #3]
   12874:	e5c32004 	strb	r2, [r3, #4]
   12878:	e5c32005 	strb	r2, [r3, #5]
   1287c:	e5c32006 	strb	r2, [r3, #6]
   12880:	e5c32007 	strb	r2, [r3, #7]
   12884:	e12fff1e 	bx	lr
   12888:	e92d4010 	push	{r4, lr}
   1288c:	e3a0209b 	mov	r2, #155	; 0x9b
   12890:	e59f100c 	ldr	r1, [pc, #12]	; 128a4 <CInterruptSystem::DisconnectFIQ()+0x78>
   12894:	e59f000c 	ldr	r0, [pc, #12]	; 128a8 <CInterruptSystem::DisconnectFIQ()+0x7c>
   12898:	ebffda26 	bl	9138 <assertion_failed>
   1289c:	00019b30 	.word	0x00019b30
   128a0:	2000b000 	.word	0x2000b000
   128a4:	00018274 	.word	0x00018274
   128a8:	000182b0 	.word	0x000182b0

000128ac <CInterruptSystem::EnableIRQ(unsigned int)>:
   128ac:	e3a03000 	mov	r3, #0
   128b0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   128b4:	e3500047 	cmp	r0, #71	; 0x47
   128b8:	8a00000e 	bhi	128f8 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   128bc:	e350001f 	cmp	r0, #31
   128c0:	8a000007 	bhi	128e4 <CInterruptSystem::EnableIRQ(unsigned int)+0x38>
   128c4:	e59f2040 	ldr	r2, [pc, #64]	; 1290c <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   128c8:	e3a03001 	mov	r3, #1
   128cc:	e200001f 	and	r0, r0, #31
   128d0:	e1a00013 	lsl	r0, r3, r0
   128d4:	e5820000 	str	r0, [r2]
   128d8:	e3a03000 	mov	r3, #0
   128dc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   128e0:	e12fff1e 	bx	lr
   128e4:	e59f3024 	ldr	r3, [pc, #36]	; 12910 <CInterruptSystem::EnableIRQ(unsigned int)+0x64>
   128e8:	e350003f 	cmp	r0, #63	; 0x3f
   128ec:	e59f2020 	ldr	r2, [pc, #32]	; 12914 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   128f0:	81a02003 	movhi	r2, r3
   128f4:	eafffff3 	b	128c8 <CInterruptSystem::EnableIRQ(unsigned int)+0x1c>
   128f8:	e92d4010 	push	{r4, lr}
   128fc:	e3a020a7 	mov	r2, #167	; 0xa7
   12900:	e59f1010 	ldr	r1, [pc, #16]	; 12918 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   12904:	e59f0010 	ldr	r0, [pc, #16]	; 1291c <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   12908:	ebffda0a 	bl	9138 <assertion_failed>
   1290c:	2000b210 	.word	0x2000b210
   12910:	2000b218 	.word	0x2000b218
   12914:	2000b214 	.word	0x2000b214
   12918:	00018274 	.word	0x00018274
   1291c:	000182c8 	.word	0x000182c8

00012920 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   12920:	e3510047 	cmp	r1, #71	; 0x47
   12924:	e92d4010 	push	{r4, lr}
   12928:	8a000008 	bhi	12950 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   1292c:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   12930:	e080e101 	add	lr, r0, r1, lsl #2
   12934:	e35c0000 	cmp	ip, #0
   12938:	1a000008 	bne	12960 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x40>
   1293c:	e7802101 	str	r2, [r0, r1, lsl #2]
   12940:	e58e3120 	str	r3, [lr, #288]	; 0x120
   12944:	e1a00001 	mov	r0, r1
   12948:	e8bd4010 	pop	{r4, lr}
   1294c:	eaffffd6 	b	128ac <CInterruptSystem::EnableIRQ(unsigned int)>
   12950:	e3a02076 	mov	r2, #118	; 0x76
   12954:	e59f1014 	ldr	r1, [pc, #20]	; 12970 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   12958:	e59f0014 	ldr	r0, [pc, #20]	; 12974 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   1295c:	ebffd9f5 	bl	9138 <assertion_failed>
   12960:	e3a02077 	mov	r2, #119	; 0x77
   12964:	e59f1004 	ldr	r1, [pc, #4]	; 12970 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   12968:	e59f0008 	ldr	r0, [pc, #8]	; 12978 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   1296c:	ebffd9f1 	bl	9138 <assertion_failed>
   12970:	00018274 	.word	0x00018274
   12974:	000182c8 	.word	0x000182c8
   12978:	000182dc 	.word	0x000182dc

0001297c <CInterruptSystem::DisableIRQ(unsigned int)>:
   1297c:	e3a03000 	mov	r3, #0
   12980:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12984:	e3500047 	cmp	r0, #71	; 0x47
   12988:	8a00000e 	bhi	129c8 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   1298c:	e350001f 	cmp	r0, #31
   12990:	8a000007 	bhi	129b4 <CInterruptSystem::DisableIRQ(unsigned int)+0x38>
   12994:	e59f2040 	ldr	r2, [pc, #64]	; 129dc <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   12998:	e3a03001 	mov	r3, #1
   1299c:	e200001f 	and	r0, r0, #31
   129a0:	e1a00013 	lsl	r0, r3, r0
   129a4:	e5820000 	str	r0, [r2]
   129a8:	e3a03000 	mov	r3, #0
   129ac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   129b0:	e12fff1e 	bx	lr
   129b4:	e59f3024 	ldr	r3, [pc, #36]	; 129e0 <CInterruptSystem::DisableIRQ(unsigned int)+0x64>
   129b8:	e350003f 	cmp	r0, #63	; 0x3f
   129bc:	e59f2020 	ldr	r2, [pc, #32]	; 129e4 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   129c0:	81a02003 	movhi	r2, r3
   129c4:	eafffff3 	b	12998 <CInterruptSystem::DisableIRQ(unsigned int)+0x1c>
   129c8:	e92d4010 	push	{r4, lr}
   129cc:	e3a020bf 	mov	r2, #191	; 0xbf
   129d0:	e59f1010 	ldr	r1, [pc, #16]	; 129e8 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   129d4:	e59f0010 	ldr	r0, [pc, #16]	; 129ec <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   129d8:	ebffd9d6 	bl	9138 <assertion_failed>
   129dc:	2000b21c 	.word	0x2000b21c
   129e0:	2000b224 	.word	0x2000b224
   129e4:	2000b220 	.word	0x2000b220
   129e8:	00018274 	.word	0x00018274
   129ec:	000182c8 	.word	0x000182c8

000129f0 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   129f0:	e3510047 	cmp	r1, #71	; 0x47
   129f4:	e92d4070 	push	{r4, r5, r6, lr}
   129f8:	8a00000b 	bhi	12a2c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   129fc:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   12a00:	e1a04001 	mov	r4, r1
   12a04:	e3530000 	cmp	r3, #0
   12a08:	e1a05000 	mov	r5, r0
   12a0c:	e0806101 	add	r6, r0, r1, lsl #2
   12a10:	0a000009 	beq	12a3c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   12a14:	e1a00001 	mov	r0, r1
   12a18:	ebffffd7 	bl	1297c <CInterruptSystem::DisableIRQ(unsigned int)>
   12a1c:	e3a03000 	mov	r3, #0
   12a20:	e7853104 	str	r3, [r5, r4, lsl #2]
   12a24:	e5863120 	str	r3, [r6, #288]	; 0x120
   12a28:	e8bd8070 	pop	{r4, r5, r6, pc}
   12a2c:	e3a02081 	mov	r2, #129	; 0x81
   12a30:	e59f1014 	ldr	r1, [pc, #20]	; 12a4c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   12a34:	e59f0014 	ldr	r0, [pc, #20]	; 12a50 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x60>
   12a38:	ebffd9be 	bl	9138 <assertion_failed>
   12a3c:	e3a02082 	mov	r2, #130	; 0x82
   12a40:	e59f1004 	ldr	r1, [pc, #4]	; 12a4c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   12a44:	e59f0008 	ldr	r0, [pc, #8]	; 12a54 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   12a48:	ebffd9ba 	bl	9138 <assertion_failed>
   12a4c:	00018274 	.word	0x00018274
   12a50:	000182c8 	.word	0x000182c8
   12a54:	000182f8 	.word	0x000182f8

00012a58 <CInterruptSystem::EnableFIQ(unsigned int)>:
   12a58:	e3a03000 	mov	r3, #0
   12a5c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12a60:	e3500047 	cmp	r0, #71	; 0x47
   12a64:	8a000004 	bhi	12a7c <CInterruptSystem::EnableFIQ(unsigned int)+0x24>
   12a68:	e59f2020 	ldr	r2, [pc, #32]	; 12a90 <CInterruptSystem::EnableFIQ(unsigned int)+0x38>
   12a6c:	e3800080 	orr	r0, r0, #128	; 0x80
   12a70:	e582020c 	str	r0, [r2, #524]	; 0x20c
   12a74:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12a78:	e12fff1e 	bx	lr
   12a7c:	e92d4010 	push	{r4, lr}
   12a80:	e3a020d7 	mov	r2, #215	; 0xd7
   12a84:	e59f1008 	ldr	r1, [pc, #8]	; 12a94 <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>
   12a88:	e59f0008 	ldr	r0, [pc, #8]	; 12a98 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   12a8c:	ebffd9a9 	bl	9138 <assertion_failed>
   12a90:	2000b000 	.word	0x2000b000
   12a94:	00018274 	.word	0x00018274
   12a98:	00018284 	.word	0x00018284

00012a9c <CInterruptSystem::DisableFIQ()>:
   12a9c:	e3a03000 	mov	r3, #0
   12aa0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   12aa4:	e59f2008 	ldr	r2, [pc, #8]	; 12ab4 <CInterruptSystem::DisableFIQ()+0x18>
   12aa8:	e582320c 	str	r3, [r2, #524]	; 0x20c
   12aac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   12ab0:	e12fff1e 	bx	lr
   12ab4:	2000b000 	.word	0x2000b000

00012ab8 <CInterruptSystem::Get()>:
   12ab8:	e59f301c 	ldr	r3, [pc, #28]	; 12adc <CInterruptSystem::Get()+0x24>
   12abc:	e5930000 	ldr	r0, [r3]
   12ac0:	e3500000 	cmp	r0, #0
   12ac4:	112fff1e 	bxne	lr
   12ac8:	e92d4010 	push	{r4, lr}
   12acc:	e3a020e9 	mov	r2, #233	; 0xe9
   12ad0:	e59f1008 	ldr	r1, [pc, #8]	; 12ae0 <CInterruptSystem::Get()+0x28>
   12ad4:	e59f0008 	ldr	r0, [pc, #8]	; 12ae4 <CInterruptSystem::Get()+0x2c>
   12ad8:	ebffd996 	bl	9138 <assertion_failed>
   12adc:	00019bf4 	.word	0x00019bf4
   12ae0:	00018274 	.word	0x00018274
   12ae4:	00017f74 	.word	0x00017f74

00012ae8 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   12ae8:	e3510047 	cmp	r1, #71	; 0x47
   12aec:	e92d4010 	push	{r4, lr}
   12af0:	8a00000b 	bhi	12b24 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   12af4:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   12af8:	e0800101 	add	r0, r0, r1, lsl #2
   12afc:	e3540000 	cmp	r4, #0
   12b00:	0a000003 	beq	12b14 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   12b04:	e5900120 	ldr	r0, [r0, #288]	; 0x120
   12b08:	e12fff34 	blx	r4
   12b0c:	e3a00001 	mov	r0, #1
   12b10:	e8bd8010 	pop	{r4, pc}
   12b14:	e1a00001 	mov	r0, r1
   12b18:	ebffff97 	bl	1297c <CInterruptSystem::DisableIRQ(unsigned int)>
   12b1c:	e1a00004 	mov	r0, r4
   12b20:	e8bd8010 	pop	{r4, pc}
   12b24:	e3a020ef 	mov	r2, #239	; 0xef
   12b28:	e59f1004 	ldr	r1, [pc, #4]	; 12b34 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
   12b2c:	e59f0004 	ldr	r0, [pc, #4]	; 12b38 <CInterruptSystem::CallIRQHandler(unsigned int)+0x50>
   12b30:	ebffd980 	bl	9138 <assertion_failed>
   12b34:	00018274 	.word	0x00018274
   12b38:	000182c8 	.word	0x000182c8

00012b3c <CInterruptSystem::InterruptHandler()>:
   12b3c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12b40:	e59f80a4 	ldr	r8, [pc, #164]	; 12bec <CInterruptSystem::InterruptHandler()+0xb0>
   12b44:	e24dd010 	sub	sp, sp, #16
   12b48:	e5983000 	ldr	r3, [r8]
   12b4c:	e3530000 	cmp	r3, #0
   12b50:	0a000021 	beq	12bdc <CInterruptSystem::InterruptHandler()+0xa0>
   12b54:	e3a06000 	mov	r6, #0
   12b58:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   12b5c:	e59f308c 	ldr	r3, [pc, #140]	; 12bf0 <CInterruptSystem::InterruptHandler()+0xb4>
   12b60:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   12b64:	e58d2004 	str	r2, [sp, #4]
   12b68:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   12b6c:	e58d2008 	str	r2, [sp, #8]
   12b70:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   12b74:	e6ef3073 	uxtb	r3, r3
   12b78:	e58d300c 	str	r3, [sp, #12]
   12b7c:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   12b80:	e28d7004 	add	r7, sp, #4
   12b84:	e4974004 	ldr	r4, [r7], #4
   12b88:	e3540000 	cmp	r4, #0
   12b8c:	1a000004 	bne	12ba4 <CInterruptSystem::InterruptHandler()+0x68>
   12b90:	e2866001 	add	r6, r6, #1
   12b94:	e3560003 	cmp	r6, #3
   12b98:	1afffff9 	bne	12b84 <CInterruptSystem::InterruptHandler()+0x48>
   12b9c:	e28dd010 	add	sp, sp, #16
   12ba0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12ba4:	e1a05286 	lsl	r5, r6, #5
   12ba8:	ea000002 	b	12bb8 <CInterruptSystem::InterruptHandler()+0x7c>
   12bac:	e1b040a4 	lsrs	r4, r4, #1
   12bb0:	e2855001 	add	r5, r5, #1
   12bb4:	0afffff5 	beq	12b90 <CInterruptSystem::InterruptHandler()+0x54>
   12bb8:	e3140001 	tst	r4, #1
   12bbc:	0afffffa 	beq	12bac <CInterruptSystem::InterruptHandler()+0x70>
   12bc0:	e1a01005 	mov	r1, r5
   12bc4:	e5980000 	ldr	r0, [r8]
   12bc8:	ebffffc6 	bl	12ae8 <CInterruptSystem::CallIRQHandler(unsigned int)>
   12bcc:	e3500000 	cmp	r0, #0
   12bd0:	0afffff5 	beq	12bac <CInterruptSystem::InterruptHandler()+0x70>
   12bd4:	e28dd010 	add	sp, sp, #16
   12bd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12bdc:	e59f2010 	ldr	r2, [pc, #16]	; 12bf4 <CInterruptSystem::InterruptHandler()+0xb8>
   12be0:	e59f1010 	ldr	r1, [pc, #16]	; 12bf8 <CInterruptSystem::InterruptHandler()+0xbc>
   12be4:	e59f0010 	ldr	r0, [pc, #16]	; 12bfc <CInterruptSystem::InterruptHandler()+0xc0>
   12be8:	ebffd952 	bl	9138 <assertion_failed>
   12bec:	00019bf4 	.word	0x00019bf4
   12bf0:	2000b000 	.word	0x2000b000
   12bf4:	00000102 	.word	0x00000102
   12bf8:	00018274 	.word	0x00018274
   12bfc:	00017f74 	.word	0x00017f74

00012c00 <InterruptHandler>:
   12c00:	e92d4010 	push	{r4, lr}
   12c04:	e3a04000 	mov	r4, #0
   12c08:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   12c0c:	ebffffca 	bl	12b3c <CInterruptSystem::InterruptHandler()>
   12c10:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   12c14:	e8bd8010 	pop	{r4, pc}

00012c18 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   12c18:	e3a01000 	mov	r1, #0
   12c1c:	e3a02001 	mov	r2, #1
   12c20:	e92d4030 	push	{r4, r5, lr}
   12c24:	e1a04000 	mov	r4, r0
   12c28:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12c2c:	e24dd014 	sub	sp, sp, #20
   12c30:	e5c32011 	strb	r2, [r3, #17]
   12c34:	e5c3100c 	strb	r1, [r3, #12]
   12c38:	e5c3100d 	strb	r1, [r3, #13]
   12c3c:	e5c3100e 	strb	r1, [r3, #14]
   12c40:	e5c3100f 	strb	r1, [r3, #15]
   12c44:	e5c31010 	strb	r1, [r3, #16]
   12c48:	e5c31012 	strb	r1, [r3, #18]
   12c4c:	e5c31013 	strb	r1, [r3, #19]
   12c50:	e28d0008 	add	r0, sp, #8
   12c54:	eb000138 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12c58:	e59f306c 	ldr	r3, [pc, #108]	; 12ccc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   12c5c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   12c60:	e28d0008 	add	r0, sp, #8
   12c64:	e58d3000 	str	r3, [sp]
   12c68:	e59f1060 	ldr	r1, [pc, #96]	; 12cd0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   12c6c:	e283300c 	add	r3, r3, #12
   12c70:	eb00013d 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12c74:	e2505000 	subs	r5, r0, #0
   12c78:	0a000008 	beq	12ca0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   12c7c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   12c80:	e5d2300c 	ldrb	r3, [r2, #12]
   12c84:	e5d2000d 	ldrb	r0, [r2, #13]
   12c88:	e5d2100e 	ldrb	r1, [r2, #14]
   12c8c:	e1833400 	orr	r3, r3, r0, lsl #8
   12c90:	e5d2200f 	ldrb	r2, [r2, #15]
   12c94:	e1833801 	orr	r3, r3, r1, lsl #16
   12c98:	e1933c02 	orrs	r3, r3, r2, lsl #24
   12c9c:	0a000005 	beq	12cb8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   12ca0:	e3a05000 	mov	r5, #0
   12ca4:	e28d0008 	add	r0, sp, #8
   12ca8:	eb00012a 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
   12cac:	e1a00005 	mov	r0, r5
   12cb0:	e28dd014 	add	sp, sp, #20
   12cb4:	e8bd8030 	pop	{r4, r5, pc}
   12cb8:	e28d0008 	add	r0, sp, #8
   12cbc:	eb000125 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
   12cc0:	e1a00005 	mov	r0, r5
   12cc4:	e28dd014 	add	sp, sp, #20
   12cc8:	e8bd8030 	pop	{r4, r5, pc}
   12ccc:	00000408 	.word	0x00000408
   12cd0:	0004800b 	.word	0x0004800b

00012cd4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   12cd4:	e92d4070 	push	{r4, r5, r6, lr}
   12cd8:	e1a04000 	mov	r4, r0
   12cdc:	e3a00000 	mov	r0, #0
   12ce0:	e24dd028 	sub	sp, sp, #40	; 0x28
   12ce4:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   12ce8:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
   12cec:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   12cf0:	e1550000 	cmp	r5, r0
   12cf4:	e8840006 	stm	r4, {r1, r2}
   12cf8:	e5843010 	str	r3, [r4, #16]
   12cfc:	e584e00c 	str	lr, [r4, #12]
   12d00:	e584c008 	str	ip, [r4, #8]
   12d04:	e5845014 	str	r5, [r4, #20]
   12d08:	e5840018 	str	r0, [r4, #24]
   12d0c:	e584001c 	str	r0, [r4, #28]
   12d10:	e5840020 	str	r0, [r4, #32]
   12d14:	e5840024 	str	r0, [r4, #36]	; 0x24
   12d18:	e5dd6044 	ldrb	r6, [sp, #68]	; 0x44
   12d1c:	1a000031 	bne	12de8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x114>
   12d20:	e1520000 	cmp	r2, r0
   12d24:	11510000 	cmpne	r1, r0
   12d28:	1a000018 	bne	12d90 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xbc>
   12d2c:	e1a01005 	mov	r1, r5
   12d30:	e28d000c 	add	r0, sp, #12
   12d34:	eb000100 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12d38:	e3a03014 	mov	r3, #20
   12d3c:	e58d5000 	str	r5, [sp]
   12d40:	e28d000c 	add	r0, sp, #12
   12d44:	e08d2003 	add	r2, sp, r3
   12d48:	e59f10d8 	ldr	r1, [pc, #216]	; 12e28 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x154>
   12d4c:	eb000106 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12d50:	e3500000 	cmp	r0, #0
   12d54:	0a000006 	beq	12d74 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xa0>
   12d58:	e1cd22d0 	ldrd	r2, [sp, #32]
   12d5c:	e2420d0a 	sub	r0, r2, #640	; 0x280
   12d60:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   12d64:	e3510e69 	cmp	r1, #1680	; 0x690
   12d68:	93500d36 	cmpls	r0, #3456	; 0xd80
   12d6c:	e1c420f0 	strd	r2, [r4]
   12d70:	9a000002 	bls	12d80 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xac>
   12d74:	e3a02d0a 	mov	r2, #640	; 0x280
   12d78:	e3a03e1e 	mov	r3, #480	; 0x1e0
   12d7c:	e1c420f0 	strd	r2, [r4]
   12d80:	e28d000c 	add	r0, sp, #12
   12d84:	eb0000f3 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
   12d88:	e594c008 	ldr	ip, [r4, #8]
   12d8c:	e5943010 	ldr	r3, [r4, #16]
   12d90:	e35c0000 	cmp	ip, #0
   12d94:	1a000016 	bne	12df4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x120>
   12d98:	e5942004 	ldr	r2, [r4, #4]
   12d9c:	e2866001 	add	r6, r6, #1
   12da0:	e0060296 	mul	r6, r6, r2
   12da4:	e5942000 	ldr	r2, [r4]
   12da8:	e3530008 	cmp	r3, #8
   12dac:	e584600c 	str	r6, [r4, #12]
   12db0:	e5842008 	str	r2, [r4, #8]
   12db4:	9a000013 	bls	12e08 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x134>
   12db8:	e3a02070 	mov	r2, #112	; 0x70
   12dbc:	e59f1068 	ldr	r1, [pc, #104]	; 12e2c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x158>
   12dc0:	e2840028 	add	r0, r4, #40	; 0x28
   12dc4:	ebfff9b2 	bl	11494 <memcpy>
   12dc8:	e1c400d4 	ldrd	r0, [r4, #4]
   12dcc:	e1c420dc 	ldrd	r2, [r4, #12]
   12dd0:	e594c000 	ldr	ip, [r4]
   12dd4:	e5840038 	str	r0, [r4, #56]	; 0x38
   12dd8:	e584c034 	str	ip, [r4, #52]	; 0x34
   12ddc:	e5841048 	str	r1, [r4, #72]	; 0x48
   12de0:	e584204c 	str	r2, [r4, #76]	; 0x4c
   12de4:	e584305c 	str	r3, [r4, #92]	; 0x5c
   12de8:	e1a00004 	mov	r0, r4
   12dec:	e28dd028 	add	sp, sp, #40	; 0x28
   12df0:	e8bd8070 	pop	{r4, r5, r6, pc}
   12df4:	e594200c 	ldr	r2, [r4, #12]
   12df8:	e3520000 	cmp	r2, #0
   12dfc:	0affffe5 	beq	12d98 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc4>
   12e00:	e3530008 	cmp	r3, #8
   12e04:	8affffeb 	bhi	12db8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xe4>
   12e08:	e59f0020 	ldr	r0, [pc, #32]	; 12e30 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x15c>
   12e0c:	ebfffab3 	bl	118e0 <operator new[](unsigned int)>
   12e10:	e3a02b01 	mov	r2, #1024	; 0x400
   12e14:	e5840024 	str	r0, [r4, #36]	; 0x24
   12e18:	e3a01000 	mov	r1, #0
   12e1c:	e2800014 	add	r0, r0, #20
   12e20:	ebfff984 	bl	11438 <memset>
   12e24:	eaffffe3 	b	12db8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xe4>
   12e28:	00040003 	.word	0x00040003
   12e2c:	00018314 	.word	0x00018314
   12e30:	00000414 	.word	0x00000414

00012e34 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   12e34:	e92d4010 	push	{r4, lr}
   12e38:	e1a04000 	mov	r4, r0
   12e3c:	e3a01014 	mov	r1, #20
   12e40:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   12e44:	ebfffaad 	bl	11900 <operator delete(void*, unsigned int)>
   12e48:	e1a00004 	mov	r0, r4
   12e4c:	e8bd8010 	pop	{r4, pc}

00012e50 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   12e50:	e5903010 	ldr	r3, [r0, #16]
   12e54:	e3530008 	cmp	r3, #8
   12e58:	812fff1e 	bxhi	lr
   12e5c:	e1a03982 	lsl	r3, r2, #19
   12e60:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   12e64:	e1a0c5a2 	lsr	ip, r2, #11
   12e68:	e1a02282 	lsl	r2, r2, #5
   12e6c:	e183c18c 	orr	ip, r3, ip, lsl #3
   12e70:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   12e74:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12e78:	e182200c 	orr	r2, r2, ip
   12e7c:	e38224ff 	orr	r2, r2, #-16777216	; 0xff000000
   12e80:	e2811004 	add	r1, r1, #4
   12e84:	e0831101 	add	r1, r3, r1, lsl #2
   12e88:	e1a0c422 	lsr	ip, r2, #8
   12e8c:	e1a00822 	lsr	r0, r2, #16
   12e90:	e1a03c22 	lsr	r3, r2, #24
   12e94:	e5c12004 	strb	r2, [r1, #4]
   12e98:	e5c1c005 	strb	ip, [r1, #5]
   12e9c:	e5c10006 	strb	r0, [r1, #6]
   12ea0:	e5c13007 	strb	r3, [r1, #7]
   12ea4:	e12fff1e 	bx	lr

00012ea8 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   12ea8:	e5903010 	ldr	r3, [r0, #16]
   12eac:	e3530008 	cmp	r3, #8
   12eb0:	812fff1e 	bxhi	lr
   12eb4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12eb8:	e2811004 	add	r1, r1, #4
   12ebc:	e0831101 	add	r1, r3, r1, lsl #2
   12ec0:	e1a0c422 	lsr	ip, r2, #8
   12ec4:	e1a00822 	lsr	r0, r2, #16
   12ec8:	e1a03c22 	lsr	r3, r2, #24
   12ecc:	e5c12004 	strb	r2, [r1, #4]
   12ed0:	e5c1c005 	strb	ip, [r1, #5]
   12ed4:	e5c10006 	strb	r0, [r1, #6]
   12ed8:	e5c13007 	strb	r3, [r1, #7]
   12edc:	e12fff1e 	bx	lr

00012ee0 <CBcmFrameBuffer::Initialize()>:
   12ee0:	e92d4030 	push	{r4, r5, lr}
   12ee4:	e5901014 	ldr	r1, [r0, #20]
   12ee8:	e24dd00c 	sub	sp, sp, #12
   12eec:	e3510000 	cmp	r1, #0
   12ef0:	13a05000 	movne	r5, #0
   12ef4:	0a000002 	beq	12f04 <CBcmFrameBuffer::Initialize()+0x24>
   12ef8:	e1a00005 	mov	r0, r5
   12efc:	e28dd00c 	add	sp, sp, #12
   12f00:	e8bd8030 	pop	{r4, r5, pc}
   12f04:	e1a04000 	mov	r4, r0
   12f08:	e1a0000d 	mov	r0, sp
   12f0c:	eb00008a 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12f10:	e1a0000d 	mov	r0, sp
   12f14:	e3a02070 	mov	r2, #112	; 0x70
   12f18:	e2841028 	add	r1, r4, #40	; 0x28
   12f1c:	eb0000cf 	bl	13260 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   12f20:	e2505000 	subs	r5, r0, #0
   12f24:	0a00001f 	beq	12fa8 <CBcmFrameBuffer::Initialize()+0xc8>
   12f28:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   12f2c:	e3530000 	cmp	r3, #0
   12f30:	0a00001b 	beq	12fa4 <CBcmFrameBuffer::Initialize()+0xc4>
   12f34:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   12f38:	e3530000 	cmp	r3, #0
   12f3c:	0a000018 	beq	12fa4 <CBcmFrameBuffer::Initialize()+0xc4>
   12f40:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   12f44:	e3530000 	cmp	r3, #0
   12f48:	0a000015 	beq	12fa4 <CBcmFrameBuffer::Initialize()+0xc4>
   12f4c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   12f50:	e3530000 	cmp	r3, #0
   12f54:	0a000012 	beq	12fa4 <CBcmFrameBuffer::Initialize()+0xc4>
   12f58:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   12f5c:	e3530000 	cmp	r3, #0
   12f60:	0a00000f 	beq	12fa4 <CBcmFrameBuffer::Initialize()+0xc4>
   12f64:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   12f68:	e3530000 	cmp	r3, #0
   12f6c:	0a00000c 	beq	12fa4 <CBcmFrameBuffer::Initialize()+0xc4>
   12f70:	e5942010 	ldr	r2, [r4, #16]
   12f74:	e5941084 	ldr	r1, [r4, #132]	; 0x84
   12f78:	e3520008 	cmp	r2, #8
   12f7c:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   12f80:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   12f84:	e5843018 	str	r3, [r4, #24]
   12f88:	e584101c 	str	r1, [r4, #28]
   12f8c:	e5842020 	str	r2, [r4, #32]
   12f90:	8a000004 	bhi	12fa8 <CBcmFrameBuffer::Initialize()+0xc8>
   12f94:	e1a00004 	mov	r0, r4
   12f98:	ebffff1e 	bl	12c18 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   12f9c:	e1a05000 	mov	r5, r0
   12fa0:	ea000000 	b	12fa8 <CBcmFrameBuffer::Initialize()+0xc8>
   12fa4:	e1a05003 	mov	r5, r3
   12fa8:	e1a0000d 	mov	r0, sp
   12fac:	eb000069 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
   12fb0:	e1a00005 	mov	r0, r5
   12fb4:	e28dd00c 	add	sp, sp, #12
   12fb8:	e8bd8030 	pop	{r4, r5, pc}

00012fbc <CBcmFrameBuffer::GetWidth() const>:
   12fbc:	e5900000 	ldr	r0, [r0]
   12fc0:	e12fff1e 	bx	lr

00012fc4 <CBcmFrameBuffer::GetHeight() const>:
   12fc4:	e5900004 	ldr	r0, [r0, #4]
   12fc8:	e12fff1e 	bx	lr

00012fcc <CBcmFrameBuffer::GetVirtWidth() const>:
   12fcc:	e5900008 	ldr	r0, [r0, #8]
   12fd0:	e12fff1e 	bx	lr

00012fd4 <CBcmFrameBuffer::GetVirtHeight() const>:
   12fd4:	e590000c 	ldr	r0, [r0, #12]
   12fd8:	e12fff1e 	bx	lr

00012fdc <CBcmFrameBuffer::GetPitch() const>:
   12fdc:	e5900020 	ldr	r0, [r0, #32]
   12fe0:	e12fff1e 	bx	lr

00012fe4 <CBcmFrameBuffer::GetDepth() const>:
   12fe4:	e5900010 	ldr	r0, [r0, #16]
   12fe8:	e12fff1e 	bx	lr

00012fec <CBcmFrameBuffer::GetBuffer() const>:
   12fec:	e5900018 	ldr	r0, [r0, #24]
   12ff0:	e12fff1e 	bx	lr

00012ff4 <CBcmFrameBuffer::GetSize() const>:
   12ff4:	e590001c 	ldr	r0, [r0, #28]
   12ff8:	e12fff1e 	bx	lr

00012ffc <CBcmFrameBuffer::UpdatePalette()>:
   12ffc:	e5903010 	ldr	r3, [r0, #16]
   13000:	e3530008 	cmp	r3, #8
   13004:	9a000001 	bls	13010 <CBcmFrameBuffer::UpdatePalette()+0x14>
   13008:	e3a00001 	mov	r0, #1
   1300c:	e12fff1e 	bx	lr
   13010:	eaffff00 	b	12c18 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00013014 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   13014:	e92d4070 	push	{r4, r5, r6, lr}
   13018:	e24dd028 	sub	sp, sp, #40	; 0x28
   1301c:	e1a05001 	mov	r5, r1
   13020:	e28d000c 	add	r0, sp, #12
   13024:	e3a01000 	mov	r1, #0
   13028:	e1a06002 	mov	r6, r2
   1302c:	eb000042 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   13030:	e3a03008 	mov	r3, #8
   13034:	e58d3000 	str	r3, [sp]
   13038:	e3a03014 	mov	r3, #20
   1303c:	e28d000c 	add	r0, sp, #12
   13040:	e08d2003 	add	r2, sp, r3
   13044:	e59f1040 	ldr	r1, [pc, #64]	; 1308c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>
   13048:	e58d5020 	str	r5, [sp, #32]
   1304c:	e58d6024 	str	r6, [sp, #36]	; 0x24
   13050:	eb000045 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   13054:	e2504000 	subs	r4, r0, #0
   13058:	0a000006 	beq	13078 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   1305c:	e59d3020 	ldr	r3, [sp, #32]
   13060:	e1530005 	cmp	r3, r5
   13064:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   13068:	13a04000 	movne	r4, #0
   1306c:	00444006 	subeq	r4, r4, r6
   13070:	016f4f14 	clzeq	r4, r4
   13074:	01a042a4 	lsreq	r4, r4, #5
   13078:	e28d000c 	add	r0, sp, #12
   1307c:	eb000035 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
   13080:	e1a00004 	mov	r0, r4
   13084:	e28dd028 	add	sp, sp, #40	; 0x28
   13088:	e8bd8070 	pop	{r4, r5, r6, pc}
   1308c:	00048009 	.word	0x00048009

00013090 <CBcmFrameBuffer::WaitForVerticalSync()>:
   13090:	e92d4010 	push	{r4, lr}
   13094:	e24dd020 	sub	sp, sp, #32
   13098:	e28d0008 	add	r0, sp, #8
   1309c:	e3a01000 	mov	r1, #0
   130a0:	eb000025 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   130a4:	e3a03000 	mov	r3, #0
   130a8:	e58d3000 	str	r3, [sp]
   130ac:	e3a03010 	mov	r3, #16
   130b0:	e59f1020 	ldr	r1, [pc, #32]	; 130d8 <CBcmFrameBuffer::WaitForVerticalSync()+0x48>
   130b4:	e08d2003 	add	r2, sp, r3
   130b8:	e28d0008 	add	r0, sp, #8
   130bc:	eb00002a 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   130c0:	e1a04000 	mov	r4, r0
   130c4:	e28d0008 	add	r0, sp, #8
   130c8:	eb000022 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
   130cc:	e1a00004 	mov	r0, r4
   130d0:	e28dd020 	add	sp, sp, #32
   130d4:	e8bd8010 	pop	{r4, pc}
   130d8:	0004800e 	.word	0x0004800e

000130dc <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   130dc:	e92d4010 	push	{r4, lr}
   130e0:	e24dd020 	sub	sp, sp, #32
   130e4:	e1a04001 	mov	r4, r1
   130e8:	e28d0008 	add	r0, sp, #8
   130ec:	e3a01000 	mov	r1, #0
   130f0:	eb000011 	bl	1313c <CBcmPropertyTags::CBcmPropertyTags(bool)>
   130f4:	e3a03004 	mov	r3, #4
   130f8:	e58d3000 	str	r3, [sp]
   130fc:	e3a03010 	mov	r3, #16
   13100:	e59f1024 	ldr	r1, [pc, #36]	; 1312c <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x50>
   13104:	e08d2003 	add	r2, sp, r3
   13108:	e28d0008 	add	r0, sp, #8
   1310c:	e58d401c 	str	r4, [sp, #28]
   13110:	eb000015 	bl	1316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   13114:	e1a04000 	mov	r4, r0
   13118:	e28d0008 	add	r0, sp, #8
   1311c:	eb00000d 	bl	13158 <CBcmPropertyTags::~CBcmPropertyTags()>
   13120:	e1a00004 	mov	r0, r4
   13124:	e28dd020 	add	sp, sp, #32
   13128:	e8bd8010 	pop	{r4, pc}
   1312c:	0004800f 	.word	0x0004800f

00013130 <CBcmFrameBuffer::SetDisplay()>:
   13130:	e12fff1e 	bx	lr

00013134 <CBcmFrameBuffer::GetNumDisplays()>:
   13134:	e3a00001 	mov	r0, #1
   13138:	e12fff1e 	bx	lr

0001313c <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   1313c:	e92d4010 	push	{r4, lr}
   13140:	e1a04000 	mov	r4, r0
   13144:	e1a02001 	mov	r2, r1
   13148:	e3a01008 	mov	r1, #8
   1314c:	eb00066b 	bl	14b00 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   13150:	e1a00004 	mov	r0, r4
   13154:	e8bd8010 	pop	{r4, pc}

00013158 <CBcmPropertyTags::~CBcmPropertyTags()>:
   13158:	e92d4010 	push	{r4, lr}
   1315c:	e1a04000 	mov	r4, r0
   13160:	eb000669 	bl	14b0c <CBcmMailBox::~CBcmMailBox()>
   13164:	e1a00004 	mov	r0, r4
   13168:	e8bd8010 	pop	{r4, pc}

0001316c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   1316c:	e92d4070 	push	{r4, r5, r6, lr}
   13170:	e2524000 	subs	r4, r2, #0
   13174:	0a000030 	beq	1323c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   13178:	e353000f 	cmp	r3, #15
   1317c:	9a000032 	bls	1324c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   13180:	e59d2010 	ldr	r2, [sp, #16]
   13184:	e243e00c 	sub	lr, r3, #12
   13188:	e3c2c102 	bic	ip, r2, #-2147483648	; 0x80000000
   1318c:	e1a02003 	mov	r2, r3
   13190:	e1a0382e 	lsr	r3, lr, #16
   13194:	e1a0542e 	lsr	r5, lr, #8
   13198:	e5c4e004 	strb	lr, [r4, #4]
   1319c:	e5c43006 	strb	r3, [r4, #6]
   131a0:	e1a0ec2e 	lsr	lr, lr, #24
   131a4:	e1a0382c 	lsr	r3, ip, #16
   131a8:	e5c41000 	strb	r1, [r4]
   131ac:	e5c45005 	strb	r5, [r4, #5]
   131b0:	e5c4e007 	strb	lr, [r4, #7]
   131b4:	e1a0542c 	lsr	r5, ip, #8
   131b8:	e1a0e421 	lsr	lr, r1, #8
   131bc:	e5c4c008 	strb	ip, [r4, #8]
   131c0:	e5c4300a 	strb	r3, [r4, #10]
   131c4:	e1a0cc2c 	lsr	ip, ip, #24
   131c8:	e1a03821 	lsr	r3, r1, #16
   131cc:	e1a01c21 	lsr	r1, r1, #24
   131d0:	e5c41003 	strb	r1, [r4, #3]
   131d4:	e5c45009 	strb	r5, [r4, #9]
   131d8:	e5c4c00b 	strb	ip, [r4, #11]
   131dc:	e5c4e001 	strb	lr, [r4, #1]
   131e0:	e5c43002 	strb	r3, [r4, #2]
   131e4:	e1a01004 	mov	r1, r4
   131e8:	eb00001c 	bl	13260 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   131ec:	e3500000 	cmp	r0, #0
   131f0:	08bd8070 	popeq	{r4, r5, r6, pc}
   131f4:	e5d42009 	ldrb	r2, [r4, #9]
   131f8:	e5d43008 	ldrb	r3, [r4, #8]
   131fc:	e5d4100a 	ldrb	r1, [r4, #10]
   13200:	e1833402 	orr	r3, r3, r2, lsl #8
   13204:	e5d4200b 	ldrb	r2, [r4, #11]
   13208:	e1833801 	orr	r3, r3, r1, lsl #16
   1320c:	e1833c02 	orr	r3, r3, r2, lsl #24
   13210:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   13214:	e2930000 	adds	r0, r3, #0
   13218:	e1a0c423 	lsr	ip, r3, #8
   1321c:	e1a01823 	lsr	r1, r3, #16
   13220:	e1a02c23 	lsr	r2, r3, #24
   13224:	13a00001 	movne	r0, #1
   13228:	e5c43008 	strb	r3, [r4, #8]
   1322c:	e5c4c009 	strb	ip, [r4, #9]
   13230:	e5c4100a 	strb	r1, [r4, #10]
   13234:	e5c4200b 	strb	r2, [r4, #11]
   13238:	e8bd8070 	pop	{r4, r5, r6, pc}
   1323c:	e59f1018 	ldr	r1, [pc, #24]	; 1325c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   13240:	e3a02033 	mov	r2, #51	; 0x33
   13244:	e2810014 	add	r0, r1, #20
   13248:	ebffd7ba 	bl	9138 <assertion_failed>
   1324c:	e59f1008 	ldr	r1, [pc, #8]	; 1325c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   13250:	e3a02034 	mov	r2, #52	; 0x34
   13254:	e2810020 	add	r0, r1, #32
   13258:	ebffd7b6 	bl	9138 <assertion_failed>
   1325c:	00018384 	.word	0x00018384

00013260 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   13260:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13264:	e2519000 	subs	r9, r1, #0
   13268:	0a000034 	beq	13340 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   1326c:	e352000f 	cmp	r2, #15
   13270:	e1a07002 	mov	r7, r2
   13274:	9a000035 	bls	13350 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   13278:	e282600c 	add	r6, r2, #12
   1327c:	e2165003 	ands	r5, r6, #3
   13280:	1a000036 	bne	13360 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x100>
   13284:	e1a0a000 	mov	sl, r0
   13288:	e1a00005 	mov	r0, r5
   1328c:	ebfffc68 	bl	12434 <CMemorySystem::GetCoherentPage(unsigned int)>
   13290:	e1a01426 	lsr	r1, r6, #8
   13294:	e1a02826 	lsr	r2, r6, #16
   13298:	e1a03c26 	lsr	r3, r6, #24
   1329c:	e2808008 	add	r8, r0, #8
   132a0:	e5c06000 	strb	r6, [r0]
   132a4:	e5c05004 	strb	r5, [r0, #4]
   132a8:	e5c05005 	strb	r5, [r0, #5]
   132ac:	e5c05006 	strb	r5, [r0, #6]
   132b0:	e5c05007 	strb	r5, [r0, #7]
   132b4:	e5c01001 	strb	r1, [r0, #1]
   132b8:	e5c02002 	strb	r2, [r0, #2]
   132bc:	e5c03003 	strb	r3, [r0, #3]
   132c0:	e1a04000 	mov	r4, r0
   132c4:	e1a02007 	mov	r2, r7
   132c8:	e1a00008 	mov	r0, r8
   132cc:	e1a01009 	mov	r1, r9
   132d0:	ebfff86f 	bl	11494 <memcpy>
   132d4:	e7885007 	str	r5, [r8, r7]
   132d8:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   132dc:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
   132e0:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
   132e4:	e1a0000a 	mov	r0, sl
   132e8:	e1a01006 	mov	r1, r6
   132ec:	eb000632 	bl	14bbc <CBcmMailBox::WriteRead(unsigned int)>
   132f0:	e1500006 	cmp	r0, r6
   132f4:	0a000001 	beq	13300 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   132f8:	e3a00000 	mov	r0, #0
   132fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13300:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   13304:	e5d42005 	ldrb	r2, [r4, #5]
   13308:	e5d43004 	ldrb	r3, [r4, #4]
   1330c:	e5d41006 	ldrb	r1, [r4, #6]
   13310:	e1833402 	orr	r3, r3, r2, lsl #8
   13314:	e5d42007 	ldrb	r2, [r4, #7]
   13318:	e1833801 	orr	r3, r3, r1, lsl #16
   1331c:	e1833c02 	orr	r3, r3, r2, lsl #24
   13320:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   13324:	1afffff3 	bne	132f8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>
   13328:	e1a02007 	mov	r2, r7
   1332c:	e1a01008 	mov	r1, r8
   13330:	e1a00009 	mov	r0, r9
   13334:	ebfff856 	bl	11494 <memcpy>
   13338:	e3a00001 	mov	r0, #1
   1333c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13340:	e59f1028 	ldr	r1, [pc, #40]	; 13370 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   13344:	e3a0204b 	mov	r2, #75	; 0x4b
   13348:	e2810048 	add	r0, r1, #72	; 0x48
   1334c:	ebffd779 	bl	9138 <assertion_failed>
   13350:	e59f1018 	ldr	r1, [pc, #24]	; 13370 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   13354:	e3a0204c 	mov	r2, #76	; 0x4c
   13358:	e2810054 	add	r0, r1, #84	; 0x54
   1335c:	ebffd775 	bl	9138 <assertion_failed>
   13360:	e59f1008 	ldr	r1, [pc, #8]	; 13370 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   13364:	e3a0204e 	mov	r2, #78	; 0x4e
   13368:	e2810080 	add	r0, r1, #128	; 0x80
   1336c:	ebffd771 	bl	9138 <assertion_failed>
   13370:	00018384 	.word	0x00018384

00013374 <CCharGenerator::CCharGenerator()>:
   13374:	e3a03008 	mov	r3, #8
   13378:	e5803000 	str	r3, [r0]
   1337c:	e12fff1e 	bx	lr

00013380 <CCharGenerator::~CCharGenerator()>:
   13380:	e12fff1e 	bx	lr

00013384 <CCharGenerator::GetCharWidth() const>:
   13384:	e5900000 	ldr	r0, [r0]
   13388:	e12fff1e 	bx	lr

0001338c <CCharGenerator::GetCharHeight() const>:
   1338c:	e3a00013 	mov	r0, #19
   13390:	e12fff1e 	bx	lr

00013394 <CCharGenerator::GetUnderline() const>:
   13394:	e3a00010 	mov	r0, #16
   13398:	e12fff1e 	bx	lr

0001339c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   1339c:	e6ef1071 	uxtb	r1, r1
   133a0:	e2411021 	sub	r1, r1, #33	; 0x21
   133a4:	e35100de 	cmp	r1, #222	; 0xde
   133a8:	8a00000c 	bhi	133e0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x44>
   133ac:	e5900000 	ldr	r0, [r0]
   133b0:	e1500002 	cmp	r0, r2
   133b4:	9a00000b 	bls	133e8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x4c>
   133b8:	e353000f 	cmp	r3, #15
   133bc:	8a000007 	bhi	133e0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x44>
   133c0:	e3a0c080 	mov	ip, #128	; 0x80
   133c4:	e59f0030 	ldr	r0, [pc, #48]	; 133fc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x60>
   133c8:	e0801201 	add	r1, r0, r1, lsl #4
   133cc:	e7d13003 	ldrb	r3, [r1, r3]
   133d0:	e013325c 	ands	r3, r3, ip, asr r2
   133d4:	13a00001 	movne	r0, #1
   133d8:	03a00000 	moveq	r0, #0
   133dc:	e12fff1e 	bx	lr
   133e0:	e3a00000 	mov	r0, #0
   133e4:	e12fff1e 	bx	lr
   133e8:	e92d4010 	push	{r4, lr}
   133ec:	e3a0204e 	mov	r2, #78	; 0x4e
   133f0:	e59f1008 	ldr	r1, [pc, #8]	; 13400 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x64>
   133f4:	e59f0008 	ldr	r0, [pc, #8]	; 13404 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x68>
   133f8:	ebffd74e 	bl	9138 <assertion_failed>
   133fc:	0001841c 	.word	0x0001841c
   13400:	0001920c 	.word	0x0001920c
   13404:	00019220 	.word	0x00019220

00013408 <CDevice::~CDevice()>:
   13408:	e5903004 	ldr	r3, [r0, #4]
   1340c:	e59f2020 	ldr	r2, [pc, #32]	; 13434 <CDevice::~CDevice()+0x2c>
   13410:	e3530000 	cmp	r3, #0
   13414:	e92d4010 	push	{r4, lr}
   13418:	e1a04000 	mov	r4, r0
   1341c:	e5802000 	str	r2, [r0]
   13420:	0a000001 	beq	1342c <CDevice::~CDevice()+0x24>
   13424:	e5901008 	ldr	r1, [r0, #8]
   13428:	e12fff33 	blx	r3
   1342c:	e1a00004 	mov	r0, r4
   13430:	e8bd8010 	pop	{r4, pc}
   13434:	00019240 	.word	0x00019240

00013438 <CDevice::Read(void*, unsigned int)>:
   13438:	e3e00000 	mvn	r0, #0
   1343c:	e12fff1e 	bx	lr

00013440 <CDevice::Seek(unsigned long long)>:
   13440:	e3e00000 	mvn	r0, #0
   13444:	e3e01000 	mvn	r1, #0
   13448:	e12fff1e 	bx	lr

0001344c <CDevice::RemoveDevice()>:
   1344c:	e3a00000 	mov	r0, #0
   13450:	e12fff1e 	bx	lr

00013454 <CDevice::~CDevice()>:
   13454:	e5903004 	ldr	r3, [r0, #4]
   13458:	e59f202c 	ldr	r2, [pc, #44]	; 1348c <CDevice::~CDevice()+0x38>
   1345c:	e3530000 	cmp	r3, #0
   13460:	e92d4010 	push	{r4, lr}
   13464:	e1a04000 	mov	r4, r0
   13468:	e5802000 	str	r2, [r0]
   1346c:	0a000001 	beq	13478 <CDevice::~CDevice()+0x24>
   13470:	e5901008 	ldr	r1, [r0, #8]
   13474:	e12fff33 	blx	r3
   13478:	e1a00004 	mov	r0, r4
   1347c:	e3a0100c 	mov	r1, #12
   13480:	ebfff91e 	bl	11900 <operator delete(void*, unsigned int)>
   13484:	e1a00004 	mov	r0, r4
   13488:	e8bd8010 	pop	{r4, pc}
   1348c:	00019240 	.word	0x00019240

00013490 <CDevice::CDevice()>:
   13490:	e3a01000 	mov	r1, #0
   13494:	e59f2008 	ldr	r2, [pc, #8]	; 134a4 <CDevice::CDevice()+0x14>
   13498:	e5801004 	str	r1, [r0, #4]
   1349c:	e5802000 	str	r2, [r0]
   134a0:	e12fff1e 	bx	lr
   134a4:	00019240 	.word	0x00019240

000134a8 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   134a8:	e9800006 	stmib	r0, {r1, r2}
   134ac:	e12fff1e 	bx	lr

000134b0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   134b0:	e92d4070 	push	{r4, r5, r6, lr}
   134b4:	e1a05001 	mov	r5, r1
   134b8:	e1a04000 	mov	r4, r0
   134bc:	e1a06002 	mov	r6, r2
   134c0:	ebffe249 	bl	bdec <CMachineInfo::Get()>
   134c4:	e1a01005 	mov	r1, r5
   134c8:	ebffe1f2 	bl	bc98 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   134cc:	e3a05000 	mov	r5, #0
   134d0:	e5840000 	str	r0, [r4]
   134d4:	e584600c 	str	r6, [r4, #12]
   134d8:	e5845004 	str	r5, [r4, #4]
   134dc:	e5845008 	str	r5, [r4, #8]
   134e0:	e5c45010 	strb	r5, [r4, #16]
   134e4:	e5845014 	str	r5, [r4, #20]
   134e8:	e5845018 	str	r5, [r4, #24]
   134ec:	e5c4501c 	strb	r5, [r4, #28]
   134f0:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   134f4:	e5943000 	ldr	r3, [r4]
   134f8:	e3530080 	cmp	r3, #128	; 0x80
   134fc:	0a000022 	beq	1358c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xdc>
   13500:	e353000b 	cmp	r3, #11
   13504:	8a000024 	bhi	1359c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xec>
   13508:	e1a01005 	mov	r1, r5
   1350c:	e3a0003f 	mov	r0, #63	; 0x3f
   13510:	ebfff8e7 	bl	118b4 <operator new[](unsigned int, int)>
   13514:	e3a0c001 	mov	ip, #1
   13518:	e280301f 	add	r3, r0, #31
   1351c:	e3c3301f 	bic	r3, r3, #31
   13520:	e59f2084 	ldr	r2, [pc, #132]	; 135ac <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xfc>
   13524:	e9840009 	stmib	r4, {r0, r3}
   13528:	e5835018 	str	r5, [r3, #24]
   1352c:	e583501c 	str	r5, [r3, #28]
   13530:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   13534:	e5941000 	ldr	r1, [r4]
   13538:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   1353c:	e183311c 	orr	r3, r3, ip, lsl r1
   13540:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   13544:	ebfff559 	bl	10ab0 <CTimer::SimpleusDelay(unsigned int)>
   13548:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   1354c:	e5943000 	ldr	r3, [r4]
   13550:	e2833602 	add	r3, r3, #2097152	; 0x200000
   13554:	e2833070 	add	r3, r3, #112	; 0x70
   13558:	e1a03403 	lsl	r3, r3, #8
   1355c:	e5832000 	str	r2, [r3]
   13560:	e5942000 	ldr	r2, [r4]
   13564:	e2822602 	add	r2, r2, #2097152	; 0x200000
   13568:	e2822070 	add	r2, r2, #112	; 0x70
   1356c:	e1a02402 	lsl	r2, r2, #8
   13570:	e5923000 	ldr	r3, [r2]
   13574:	e3530000 	cmp	r3, #0
   13578:	bafffffc 	blt	13570 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xc0>
   1357c:	e3a03000 	mov	r3, #0
   13580:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   13584:	e1a00004 	mov	r0, r4
   13588:	e8bd8070 	pop	{r4, r5, r6, pc}
   1358c:	e59f101c 	ldr	r1, [pc, #28]	; 135b0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x100>
   13590:	e3a02039 	mov	r2, #57	; 0x39
   13594:	e2810010 	add	r0, r1, #16
   13598:	ebffd6e6 	bl	9138 <assertion_failed>
   1359c:	e59f100c 	ldr	r1, [pc, #12]	; 135b0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x100>
   135a0:	e3a0203a 	mov	r2, #58	; 0x3a
   135a4:	e2810030 	add	r0, r1, #48	; 0x30
   135a8:	ebffd6e2 	bl	9138 <assertion_failed>
   135ac:	20007000 	.word	0x20007000
   135b0:	00019258 	.word	0x00019258

000135b4 <CDMAChannel::~CDMAChannel()>:
   135b4:	e92d4010 	push	{r4, lr}
   135b8:	e3a03000 	mov	r3, #0
   135bc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   135c0:	e5903000 	ldr	r3, [r0]
   135c4:	e353000b 	cmp	r3, #11
   135c8:	8a00002c 	bhi	13680 <CDMAChannel::~CDMAChannel()+0xcc>
   135cc:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   135d0:	e2833602 	add	r3, r3, #2097152	; 0x200000
   135d4:	e2833070 	add	r3, r3, #112	; 0x70
   135d8:	e1a03403 	lsl	r3, r3, #8
   135dc:	e5832000 	str	r2, [r3]
   135e0:	e1a04000 	mov	r4, r0
   135e4:	e5900000 	ldr	r0, [r0]
   135e8:	e2802602 	add	r2, r0, #2097152	; 0x200000
   135ec:	e2822070 	add	r2, r2, #112	; 0x70
   135f0:	e1a02402 	lsl	r2, r2, #8
   135f4:	e5923000 	ldr	r3, [r2]
   135f8:	e3530000 	cmp	r3, #0
   135fc:	bafffffc 	blt	135f4 <CDMAChannel::~CDMAChannel()+0x40>
   13600:	e3a0c001 	mov	ip, #1
   13604:	e59f1094 	ldr	r1, [pc, #148]	; 136a0 <CDMAChannel::~CDMAChannel()+0xec>
   13608:	e3a02000 	mov	r2, #0
   1360c:	e5913ff0 	ldr	r3, [r1, #4080]	; 0xff0
   13610:	e1c3301c 	bic	r3, r3, ip, lsl r0
   13614:	e5813ff0 	str	r3, [r1, #4080]	; 0xff0
   13618:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   1361c:	e594000c 	ldr	r0, [r4, #12]
   13620:	e5842014 	str	r2, [r4, #20]
   13624:	e1500002 	cmp	r0, r2
   13628:	0a000009 	beq	13654 <CDMAChannel::~CDMAChannel()+0xa0>
   1362c:	e5d43010 	ldrb	r3, [r4, #16]
   13630:	e1530002 	cmp	r3, r2
   13634:	0a000004 	beq	1364c <CDMAChannel::~CDMAChannel()+0x98>
   13638:	e5941000 	ldr	r1, [r4]
   1363c:	e351000c 	cmp	r1, #12
   13640:	8a000012 	bhi	13690 <CDMAChannel::~CDMAChannel()+0xdc>
   13644:	e2811010 	add	r1, r1, #16
   13648:	ebfffce8 	bl	129f0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   1364c:	e3a03000 	mov	r3, #0
   13650:	e584300c 	str	r3, [r4, #12]
   13654:	ebffe1e4 	bl	bdec <CMachineInfo::Get()>
   13658:	e5941000 	ldr	r1, [r4]
   1365c:	ebffe1be 	bl	bd5c <CMachineInfo::FreeDMAChannel(unsigned int)>
   13660:	e3a03000 	mov	r3, #0
   13664:	e5940004 	ldr	r0, [r4, #4]
   13668:	e5843008 	str	r3, [r4, #8]
   1366c:	e1500003 	cmp	r0, r3
   13670:	0a000000 	beq	13678 <CDMAChannel::~CDMAChannel()+0xc4>
   13674:	ebfff8a0 	bl	118fc <operator delete[](void*)>
   13678:	e1a00004 	mov	r0, r4
   1367c:	e8bd8010 	pop	{r4, pc}
   13680:	e59f101c 	ldr	r1, [pc, #28]	; 136a4 <CDMAChannel::~CDMAChannel()+0xf0>
   13684:	e3a02062 	mov	r2, #98	; 0x62
   13688:	e2810030 	add	r0, r1, #48	; 0x30
   1368c:	ebffd6a9 	bl	9138 <assertion_failed>
   13690:	e59f100c 	ldr	r1, [pc, #12]	; 136a4 <CDMAChannel::~CDMAChannel()+0xf0>
   13694:	e3a02074 	mov	r2, #116	; 0x74
   13698:	e281004c 	add	r0, r1, #76	; 0x4c
   1369c:	ebffd6a5 	bl	9138 <assertion_failed>
   136a0:	20007000 	.word	0x20007000
   136a4:	00019258 	.word	0x00019258

000136a8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   136a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   136ac:	e2514000 	subs	r4, r1, #0
   136b0:	e24dd00c 	sub	sp, sp, #12
   136b4:	e59dc020 	ldr	ip, [sp, #32]
   136b8:	e5dd7024 	ldrb	r7, [sp, #36]	; 0x24
   136bc:	0a000052 	beq	1380c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x164>
   136c0:	e3520000 	cmp	r2, #0
   136c4:	0a000054 	beq	1381c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x174>
   136c8:	e3530000 	cmp	r3, #0
   136cc:	0a000056 	beq	1382c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x184>
   136d0:	e35c000f 	cmp	ip, #15
   136d4:	8a000058 	bhi	1383c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x194>
   136d8:	e5901008 	ldr	r1, [r0, #8]
   136dc:	e3510000 	cmp	r1, #0
   136e0:	0a000059 	beq	1384c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1a4>
   136e4:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   136e8:	8a00005b 	bhi	1385c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1b4>
   136ec:	e590e000 	ldr	lr, [r0]
   136f0:	e28ee602 	add	lr, lr, #2097152	; 0x200000
   136f4:	e28ee070 	add	lr, lr, #112	; 0x70
   136f8:	e1a0e40e 	lsl	lr, lr, #8
   136fc:	e59ee020 	ldr	lr, [lr, #32]
   13700:	e1a0ee2e 	lsr	lr, lr, #28
   13704:	e22ee001 	eor	lr, lr, #1
   13708:	e3530801 	cmp	r3, #65536	; 0x10000
   1370c:	338ee001 	orrcc	lr, lr, #1
   13710:	e31e0001 	tst	lr, #1
   13714:	0a000054 	beq	1386c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c4>
   13718:	e3a0e000 	mov	lr, #0
   1371c:	e1a0c60c 	lsl	ip, ip, #12
   13720:	e38cce33 	orr	ip, ip, #816	; 0x330
   13724:	e1a0542c 	lsr	r5, ip, #8
   13728:	e3c26103 	bic	r6, r2, #-1073741824	; 0xc0000000
   1372c:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
   13730:	e5c1c000 	strb	ip, [r1]
   13734:	e5c15001 	strb	r5, [r1, #1]
   13738:	e1a0582c 	lsr	r5, ip, #16
   1373c:	e1a0cc2c 	lsr	ip, ip, #24
   13740:	e5c15002 	strb	r5, [r1, #2]
   13744:	e5c1c003 	strb	ip, [r1, #3]
   13748:	e3c45103 	bic	r5, r4, #-1073741824	; 0xc0000000
   1374c:	e1a0c426 	lsr	ip, r6, #8
   13750:	e3855101 	orr	r5, r5, #1073741824	; 0x40000000
   13754:	e5c1c005 	strb	ip, [r1, #5]
   13758:	e1a0c826 	lsr	ip, r6, #16
   1375c:	e5c1c006 	strb	ip, [r1, #6]
   13760:	e1a0c425 	lsr	ip, r5, #8
   13764:	e5c16004 	strb	r6, [r1, #4]
   13768:	e5c15008 	strb	r5, [r1, #8]
   1376c:	e1a06c26 	lsr	r6, r6, #24
   13770:	e5c1c009 	strb	ip, [r1, #9]
   13774:	e1a0c825 	lsr	ip, r5, #16
   13778:	e1a05c25 	lsr	r5, r5, #24
   1377c:	e157000e 	cmp	r7, lr
   13780:	e5c16007 	strb	r6, [r1, #7]
   13784:	e5c1c00a 	strb	ip, [r1, #10]
   13788:	e1a06423 	lsr	r6, r3, #8
   1378c:	e5c1500b 	strb	r5, [r1, #11]
   13790:	e1a0cc23 	lsr	ip, r3, #24
   13794:	e1a05823 	lsr	r5, r3, #16
   13798:	e5c1e010 	strb	lr, [r1, #16]
   1379c:	e5c1e011 	strb	lr, [r1, #17]
   137a0:	e5c1e012 	strb	lr, [r1, #18]
   137a4:	e5c1e013 	strb	lr, [r1, #19]
   137a8:	e5c1e014 	strb	lr, [r1, #20]
   137ac:	e5c1e015 	strb	lr, [r1, #21]
   137b0:	e5c1e016 	strb	lr, [r1, #22]
   137b4:	e5c1e017 	strb	lr, [r1, #23]
   137b8:	e5c1300c 	strb	r3, [r1, #12]
   137bc:	e5c1600d 	strb	r6, [r1, #13]
   137c0:	e1a0e005 	mov	lr, r5
   137c4:	e5c1500e 	strb	r5, [r1, #14]
   137c8:	e5c1c00f 	strb	ip, [r1, #15]
   137cc:	1a000002 	bne	137dc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x134>
   137d0:	e5807020 	str	r7, [r0, #32]
   137d4:	e28dd00c 	add	sp, sp, #12
   137d8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   137dc:	e5804020 	str	r4, [r0, #32]
   137e0:	e5803024 	str	r3, [r0, #36]	; 0x24
   137e4:	e1a01003 	mov	r1, r3
   137e8:	e1a00002 	mov	r0, r2
   137ec:	e58d3004 	str	r3, [sp, #4]
   137f0:	ebfffb8c 	bl	12628 <CleanAndInvalidateDataCacheRange>
   137f4:	e59d3004 	ldr	r3, [sp, #4]
   137f8:	e1a00004 	mov	r0, r4
   137fc:	e1a01003 	mov	r1, r3
   13800:	e28dd00c 	add	sp, sp, #12
   13804:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13808:	eafffb86 	b	12628 <CleanAndInvalidateDataCacheRange>
   1380c:	e59f1068 	ldr	r1, [pc, #104]	; 1387c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   13810:	e3a0208f 	mov	r2, #143	; 0x8f
   13814:	e2810060 	add	r0, r1, #96	; 0x60
   13818:	ebffd646 	bl	9138 <assertion_failed>
   1381c:	e59f1058 	ldr	r1, [pc, #88]	; 1387c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   13820:	e3a02090 	mov	r2, #144	; 0x90
   13824:	e2810074 	add	r0, r1, #116	; 0x74
   13828:	ebffd642 	bl	9138 <assertion_failed>
   1382c:	e59f1048 	ldr	r1, [pc, #72]	; 1387c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   13830:	e3a02091 	mov	r2, #145	; 0x91
   13834:	e2810084 	add	r0, r1, #132	; 0x84
   13838:	ebffd63e 	bl	9138 <assertion_failed>
   1383c:	e59f1038 	ldr	r1, [pc, #56]	; 1387c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   13840:	e3a02092 	mov	r2, #146	; 0x92
   13844:	e2810090 	add	r0, r1, #144	; 0x90
   13848:	ebffd63a 	bl	9138 <assertion_failed>
   1384c:	e59f1028 	ldr	r1, [pc, #40]	; 1387c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   13850:	e3a02094 	mov	r2, #148	; 0x94
   13854:	e28100a4 	add	r0, r1, #164	; 0xa4
   13858:	ebffd636 	bl	9138 <assertion_failed>
   1385c:	e59f1018 	ldr	r1, [pc, #24]	; 1387c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   13860:	e3a02095 	mov	r2, #149	; 0x95
   13864:	e28100bc 	add	r0, r1, #188	; 0xbc
   13868:	ebffd632 	bl	9138 <assertion_failed>
   1386c:	e59f1008 	ldr	r1, [pc, #8]	; 1387c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   13870:	e3a02097 	mov	r2, #151	; 0x97
   13874:	e28100d4 	add	r0, r1, #212	; 0xd4
   13878:	ebffd62e 	bl	9138 <assertion_failed>
   1387c:	00019258 	.word	0x00019258

00013880 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   13880:	e92d4070 	push	{r4, r5, r6, lr}
   13884:	e251c000 	subs	ip, r1, #0
   13888:	e5dde010 	ldrb	lr, [sp, #16]
   1388c:	0a000043 	beq	139a0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x120>
   13890:	e3530000 	cmp	r3, #0
   13894:	0a000045 	beq	139b0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x130>
   13898:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   1389c:	8a000047 	bhi	139c0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x140>
   138a0:	e5901000 	ldr	r1, [r0]
   138a4:	e2811602 	add	r1, r1, #2097152	; 0x200000
   138a8:	e2811070 	add	r1, r1, #112	; 0x70
   138ac:	e1a01401 	lsl	r1, r1, #8
   138b0:	e5911020 	ldr	r1, [r1, #32]
   138b4:	e1a01e21 	lsr	r1, r1, #28
   138b8:	e2211001 	eor	r1, r1, #1
   138bc:	e3530801 	cmp	r3, #65536	; 0x10000
   138c0:	33811001 	orrcc	r1, r1, #1
   138c4:	e3110001 	tst	r1, #1
   138c8:	0a000048 	beq	139f0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x170>
   138cc:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
   138d0:	0a00003e 	beq	139d0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x150>
   138d4:	e5901008 	ldr	r1, [r0, #8]
   138d8:	e282247e 	add	r2, r2, #2113929216	; 0x7e000000
   138dc:	e3510000 	cmp	r1, #0
   138e0:	0a00003e 	beq	139e0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x160>
   138e4:	e3a05000 	mov	r5, #0
   138e8:	e59f4110 	ldr	r4, [pc, #272]	; 13a00 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x180>
   138ec:	e5c12004 	strb	r2, [r1, #4]
   138f0:	e184480e 	orr	r4, r4, lr, lsl #16
   138f4:	e1a06424 	lsr	r6, r4, #8
   138f8:	e3cce103 	bic	lr, ip, #-1073741824	; 0xc0000000
   138fc:	e38ee101 	orr	lr, lr, #1073741824	; 0x40000000
   13900:	e5c14000 	strb	r4, [r1]
   13904:	e5c16001 	strb	r6, [r1, #1]
   13908:	e1a06824 	lsr	r6, r4, #16
   1390c:	e1a04c24 	lsr	r4, r4, #24
   13910:	e5c14003 	strb	r4, [r1, #3]
   13914:	e1a0442e 	lsr	r4, lr, #8
   13918:	e5c1e008 	strb	lr, [r1, #8]
   1391c:	e5c14009 	strb	r4, [r1, #9]
   13920:	e1a0482e 	lsr	r4, lr, #16
   13924:	e1a0ec2e 	lsr	lr, lr, #24
   13928:	e5c1400a 	strb	r4, [r1, #10]
   1392c:	e5c1e00b 	strb	lr, [r1, #11]
   13930:	e1a04422 	lsr	r4, r2, #8
   13934:	e1a0e822 	lsr	lr, r2, #16
   13938:	e5c15010 	strb	r5, [r1, #16]
   1393c:	e5c15011 	strb	r5, [r1, #17]
   13940:	e5c15012 	strb	r5, [r1, #18]
   13944:	e5c15013 	strb	r5, [r1, #19]
   13948:	e5c15014 	strb	r5, [r1, #20]
   1394c:	e5c15015 	strb	r5, [r1, #21]
   13950:	e5c15016 	strb	r5, [r1, #22]
   13954:	e5c15017 	strb	r5, [r1, #23]
   13958:	e5c14005 	strb	r4, [r1, #5]
   1395c:	e5c1e006 	strb	lr, [r1, #6]
   13960:	e1a05423 	lsr	r5, r3, #8
   13964:	e1a04823 	lsr	r4, r3, #16
   13968:	e1a0ec23 	lsr	lr, r3, #24
   1396c:	e1a02c22 	lsr	r2, r2, #24
   13970:	e5c16002 	strb	r6, [r1, #2]
   13974:	e5c1500d 	strb	r5, [r1, #13]
   13978:	e5c1400e 	strb	r4, [r1, #14]
   1397c:	e5c1e00f 	strb	lr, [r1, #15]
   13980:	e5c1300c 	strb	r3, [r1, #12]
   13984:	e5c12007 	strb	r2, [r1, #7]
   13988:	e8bd4070 	pop	{r4, r5, r6, lr}
   1398c:	e580c020 	str	ip, [r0, #32]
   13990:	e5803024 	str	r3, [r0, #36]	; 0x24
   13994:	e1a01003 	mov	r1, r3
   13998:	e1a0000c 	mov	r0, ip
   1399c:	eafffb21 	b	12628 <CleanAndInvalidateDataCacheRange>
   139a0:	e59f105c 	ldr	r1, [pc, #92]	; 13a04 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   139a4:	e3a020bd 	mov	r2, #189	; 0xbd
   139a8:	e2810060 	add	r0, r1, #96	; 0x60
   139ac:	ebffd5e1 	bl	9138 <assertion_failed>
   139b0:	e59f104c 	ldr	r1, [pc, #76]	; 13a04 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   139b4:	e3a020be 	mov	r2, #190	; 0xbe
   139b8:	e2810084 	add	r0, r1, #132	; 0x84
   139bc:	ebffd5dd 	bl	9138 <assertion_failed>
   139c0:	e59f103c 	ldr	r1, [pc, #60]	; 13a04 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   139c4:	e3a020bf 	mov	r2, #191	; 0xbf
   139c8:	e28100bc 	add	r0, r1, #188	; 0xbc
   139cc:	ebffd5d9 	bl	9138 <assertion_failed>
   139d0:	e59f102c 	ldr	r1, [pc, #44]	; 13a04 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   139d4:	e3a020c4 	mov	r2, #196	; 0xc4
   139d8:	e2810f4b 	add	r0, r1, #300	; 0x12c
   139dc:	ebffd5d5 	bl	9138 <assertion_failed>
   139e0:	e59f101c 	ldr	r1, [pc, #28]	; 13a04 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   139e4:	e3a020c7 	mov	r2, #199	; 0xc7
   139e8:	e28100a4 	add	r0, r1, #164	; 0xa4
   139ec:	ebffd5d1 	bl	9138 <assertion_failed>
   139f0:	e59f100c 	ldr	r1, [pc, #12]	; 13a04 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   139f4:	e3a020c1 	mov	r2, #193	; 0xc1
   139f8:	e28100d4 	add	r0, r1, #212	; 0xd4
   139fc:	ebffd5cd 	bl	9138 <assertion_failed>
   13a00:	00000438 	.word	0x00000438
   13a04:	00019258 	.word	0x00019258

00013a08 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   13a08:	e92d4070 	push	{r4, r5, r6, lr}
   13a0c:	e3520000 	cmp	r2, #0
   13a10:	e1a05000 	mov	r5, r0
   13a14:	e5dd0010 	ldrb	r0, [sp, #16]
   13a18:	0a000042 	beq	13b28 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x120>
   13a1c:	e3530000 	cmp	r3, #0
   13a20:	0a000044 	beq	13b38 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x130>
   13a24:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   13a28:	8a000046 	bhi	13b48 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x140>
   13a2c:	e595c000 	ldr	ip, [r5]
   13a30:	e28cc602 	add	ip, ip, #2097152	; 0x200000
   13a34:	e28cc070 	add	ip, ip, #112	; 0x70
   13a38:	e1a0c40c 	lsl	ip, ip, #8
   13a3c:	e59cc020 	ldr	ip, [ip, #32]
   13a40:	e1a0ce2c 	lsr	ip, ip, #28
   13a44:	e22cc001 	eor	ip, ip, #1
   13a48:	e3530801 	cmp	r3, #65536	; 0x10000
   13a4c:	338cc001 	orrcc	ip, ip, #1
   13a50:	e31c0001 	tst	ip, #1
   13a54:	0a000047 	beq	13b78 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x170>
   13a58:	e3d114ff 	bics	r1, r1, #-16777216	; 0xff000000
   13a5c:	0a00003d 	beq	13b58 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x150>
   13a60:	e595c008 	ldr	ip, [r5, #8]
   13a64:	e281e47e 	add	lr, r1, #2113929216	; 0x7e000000
   13a68:	e35c0000 	cmp	ip, #0
   13a6c:	0a00003d 	beq	13b68 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x160>
   13a70:	e3a04000 	mov	r4, #0
   13a74:	e1a00800 	lsl	r0, r0, #16
   13a78:	e3800fd2 	orr	r0, r0, #840	; 0x348
   13a7c:	e1a06420 	lsr	r6, r0, #8
   13a80:	e3c21103 	bic	r1, r2, #-1073741824	; 0xc0000000
   13a84:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
   13a88:	e5cc0000 	strb	r0, [ip]
   13a8c:	e5cc6001 	strb	r6, [ip, #1]
   13a90:	e1a06820 	lsr	r6, r0, #16
   13a94:	e1a00c20 	lsr	r0, r0, #24
   13a98:	e5cc6002 	strb	r6, [ip, #2]
   13a9c:	e5cc0003 	strb	r0, [ip, #3]
   13aa0:	e1a06421 	lsr	r6, r1, #8
   13aa4:	e1a00002 	mov	r0, r2
   13aa8:	e1a02821 	lsr	r2, r1, #16
   13aac:	e5cc1004 	strb	r1, [ip, #4]
   13ab0:	e5cc6005 	strb	r6, [ip, #5]
   13ab4:	e1a01c21 	lsr	r1, r1, #24
   13ab8:	e1a0642e 	lsr	r6, lr, #8
   13abc:	e5cc2006 	strb	r2, [ip, #6]
   13ac0:	e1a0282e 	lsr	r2, lr, #16
   13ac4:	e5cce008 	strb	lr, [ip, #8]
   13ac8:	e5cc1007 	strb	r1, [ip, #7]
   13acc:	e1a0ec2e 	lsr	lr, lr, #24
   13ad0:	e5cc6009 	strb	r6, [ip, #9]
   13ad4:	e5cc200a 	strb	r2, [ip, #10]
   13ad8:	e1a06423 	lsr	r6, r3, #8
   13adc:	e1a01823 	lsr	r1, r3, #16
   13ae0:	e1a02c23 	lsr	r2, r3, #24
   13ae4:	e5cc4010 	strb	r4, [ip, #16]
   13ae8:	e5cc4011 	strb	r4, [ip, #17]
   13aec:	e5cc4012 	strb	r4, [ip, #18]
   13af0:	e5cc4013 	strb	r4, [ip, #19]
   13af4:	e5cc4014 	strb	r4, [ip, #20]
   13af8:	e5cc4015 	strb	r4, [ip, #21]
   13afc:	e5cc4016 	strb	r4, [ip, #22]
   13b00:	e5cc4017 	strb	r4, [ip, #23]
   13b04:	e5cce00b 	strb	lr, [ip, #11]
   13b08:	e5cc600d 	strb	r6, [ip, #13]
   13b0c:	e5cc100e 	strb	r1, [ip, #14]
   13b10:	e5cc300c 	strb	r3, [ip, #12]
   13b14:	e5cc200f 	strb	r2, [ip, #15]
   13b18:	e1a01003 	mov	r1, r3
   13b1c:	e5854020 	str	r4, [r5, #32]
   13b20:	e8bd4070 	pop	{r4, r5, r6, lr}
   13b24:	eafffabf 	b	12628 <CleanAndInvalidateDataCacheRange>
   13b28:	e59f1058 	ldr	r1, [pc, #88]	; 13b88 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   13b2c:	e3a020e5 	mov	r2, #229	; 0xe5
   13b30:	e2810074 	add	r0, r1, #116	; 0x74
   13b34:	ebffd57f 	bl	9138 <assertion_failed>
   13b38:	e59f1048 	ldr	r1, [pc, #72]	; 13b88 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   13b3c:	e3a020e6 	mov	r2, #230	; 0xe6
   13b40:	e2810084 	add	r0, r1, #132	; 0x84
   13b44:	ebffd57b 	bl	9138 <assertion_failed>
   13b48:	e59f1038 	ldr	r1, [pc, #56]	; 13b88 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   13b4c:	e3a020e7 	mov	r2, #231	; 0xe7
   13b50:	e28100bc 	add	r0, r1, #188	; 0xbc
   13b54:	ebffd577 	bl	9138 <assertion_failed>
   13b58:	e59f1028 	ldr	r1, [pc, #40]	; 13b88 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   13b5c:	e3a020ec 	mov	r2, #236	; 0xec
   13b60:	e2810f4b 	add	r0, r1, #300	; 0x12c
   13b64:	ebffd573 	bl	9138 <assertion_failed>
   13b68:	e59f1018 	ldr	r1, [pc, #24]	; 13b88 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   13b6c:	e3a020ef 	mov	r2, #239	; 0xef
   13b70:	e28100a4 	add	r0, r1, #164	; 0xa4
   13b74:	ebffd56f 	bl	9138 <assertion_failed>
   13b78:	e59f1008 	ldr	r1, [pc, #8]	; 13b88 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   13b7c:	e3a020e9 	mov	r2, #233	; 0xe9
   13b80:	e28100d4 	add	r0, r1, #212	; 0xd4
   13b84:	ebffd56b 	bl	9138 <assertion_failed>
   13b88:	00019258 	.word	0x00019258

00013b8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   13b8c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b90:	e3510000 	cmp	r1, #0
   13b94:	e1a05000 	mov	r5, r0
   13b98:	e59d6020 	ldr	r6, [sp, #32]
   13b9c:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   13ba0:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   13ba4:	0a000052 	beq	13cf4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x168>
   13ba8:	e3520000 	cmp	r2, #0
   13bac:	0a000054 	beq	13d04 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x178>
   13bb0:	e3530000 	cmp	r3, #0
   13bb4:	0a000056 	beq	13d14 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x188>
   13bb8:	e59fc1c4 	ldr	ip, [pc, #452]	; 13d84 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f8>
   13bbc:	e153000c 	cmp	r3, ip
   13bc0:	8a000057 	bhi	13d24 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x198>
   13bc4:	e3560000 	cmp	r6, #0
   13bc8:	0a000059 	beq	13d34 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
   13bcc:	e3560901 	cmp	r6, #16384	; 0x4000
   13bd0:	2a00005b 	bcs	13d44 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b8>
   13bd4:	e154000c 	cmp	r4, ip
   13bd8:	8a000041 	bhi	13ce4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
   13bdc:	e350000f 	cmp	r0, #15
   13be0:	8a00005b 	bhi	13d54 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c8>
   13be4:	e595c000 	ldr	ip, [r5]
   13be8:	e28cc602 	add	ip, ip, #2097152	; 0x200000
   13bec:	e28cc070 	add	ip, ip, #112	; 0x70
   13bf0:	e1a0c40c 	lsl	ip, ip, #8
   13bf4:	e59cc020 	ldr	ip, [ip, #32]
   13bf8:	e31c0201 	tst	ip, #268435456	; 0x10000000
   13bfc:	1a000058 	bne	13d64 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1d8>
   13c00:	e595c008 	ldr	ip, [r5, #8]
   13c04:	e35c0000 	cmp	ip, #0
   13c08:	0a000059 	beq	13d74 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e8>
   13c0c:	e3a07000 	mov	r7, #0
   13c10:	e3c11103 	bic	r1, r1, #-1073741824	; 0xc0000000
   13c14:	e381e101 	orr	lr, r1, #1073741824	; 0x40000000
   13c18:	e59f1168 	ldr	r1, [pc, #360]	; 13d88 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1fc>
   13c1c:	e1a0942e 	lsr	r9, lr, #8
   13c20:	e1811600 	orr	r1, r1, r0, lsl #12
   13c24:	e1a0082e 	lsr	r0, lr, #16
   13c28:	e5cce008 	strb	lr, [ip, #8]
   13c2c:	e5cc9009 	strb	r9, [ip, #9]
   13c30:	e5cc000a 	strb	r0, [ip, #10]
   13c34:	e1a0ec2e 	lsr	lr, lr, #24
   13c38:	e1a00421 	lsr	r0, r1, #8
   13c3c:	e3c29103 	bic	r9, r2, #-1073741824	; 0xc0000000
   13c40:	e3899101 	orr	r9, r9, #1073741824	; 0x40000000
   13c44:	e5cce00b 	strb	lr, [ip, #11]
   13c48:	e5cc1000 	strb	r1, [ip]
   13c4c:	e5cc0001 	strb	r0, [ip, #1]
   13c50:	e246e001 	sub	lr, r6, #1
   13c54:	e1a00821 	lsr	r0, r1, #16
   13c58:	e1a01c21 	lsr	r1, r1, #24
   13c5c:	e183e80e 	orr	lr, r3, lr, lsl #16
   13c60:	e5cc0002 	strb	r0, [ip, #2]
   13c64:	e5cc1003 	strb	r1, [ip, #3]
   13c68:	e1a00002 	mov	r0, r2
   13c6c:	e1a01429 	lsr	r1, r9, #8
   13c70:	e1a02c29 	lsr	r2, r9, #24
   13c74:	e1a04804 	lsl	r4, r4, #16
   13c78:	e5cc1005 	strb	r1, [ip, #5]
   13c7c:	e5cc2007 	strb	r2, [ip, #7]
   13c80:	e1a01829 	lsr	r1, r9, #16
   13c84:	e1a0282e 	lsr	r2, lr, #16
   13c88:	e5cc9004 	strb	r9, [ip, #4]
   13c8c:	e5cc1006 	strb	r1, [ip, #6]
   13c90:	e1a0942e 	lsr	r9, lr, #8
   13c94:	e5cce00c 	strb	lr, [ip, #12]
   13c98:	e5cc200e 	strb	r2, [ip, #14]
   13c9c:	e0010396 	mul	r1, r6, r3
   13ca0:	e1a02824 	lsr	r2, r4, #16
   13ca4:	e1a03c2e 	lsr	r3, lr, #24
   13ca8:	e6efe074 	uxtb	lr, r4
   13cac:	e1a04c24 	lsr	r4, r4, #24
   13cb0:	e5cc900d 	strb	r9, [ip, #13]
   13cb4:	e5cc300f 	strb	r3, [ip, #15]
   13cb8:	e5cce010 	strb	lr, [ip, #16]
   13cbc:	e5cc2012 	strb	r2, [ip, #18]
   13cc0:	e5cc4013 	strb	r4, [ip, #19]
   13cc4:	e5cc7014 	strb	r7, [ip, #20]
   13cc8:	e5cc7015 	strb	r7, [ip, #21]
   13ccc:	e5cc7016 	strb	r7, [ip, #22]
   13cd0:	e5cc7017 	strb	r7, [ip, #23]
   13cd4:	e5cc7011 	strb	r7, [ip, #17]
   13cd8:	e5857020 	str	r7, [r5, #32]
   13cdc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ce0:	eafffa50 	b	12628 <CleanAndInvalidateDataCacheRange>
   13ce4:	e59f10a0 	ldr	r1, [pc, #160]	; 13d8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   13ce8:	e59f20a0 	ldr	r2, [pc, #160]	; 13d90 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x204>
   13cec:	e2810e19 	add	r0, r1, #400	; 0x190
   13cf0:	ebffd510 	bl	9138 <assertion_failed>
   13cf4:	e59f1090 	ldr	r1, [pc, #144]	; 13d8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   13cf8:	e59f2094 	ldr	r2, [pc, #148]	; 13d94 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x208>
   13cfc:	e2810060 	add	r0, r1, #96	; 0x60
   13d00:	ebffd50c 	bl	9138 <assertion_failed>
   13d04:	e59f1080 	ldr	r1, [pc, #128]	; 13d8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   13d08:	e3a02e11 	mov	r2, #272	; 0x110
   13d0c:	e2810074 	add	r0, r1, #116	; 0x74
   13d10:	ebffd508 	bl	9138 <assertion_failed>
   13d14:	e59f1070 	ldr	r1, [pc, #112]	; 13d8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   13d18:	e59f2078 	ldr	r2, [pc, #120]	; 13d98 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x20c>
   13d1c:	e2810f4f 	add	r0, r1, #316	; 0x13c
   13d20:	ebffd504 	bl	9138 <assertion_failed>
   13d24:	e59f1060 	ldr	r1, [pc, #96]	; 13d8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   13d28:	e59f206c 	ldr	r2, [pc, #108]	; 13d9c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
   13d2c:	e2810e15 	add	r0, r1, #336	; 0x150
   13d30:	ebffd500 	bl	9138 <assertion_failed>
   13d34:	e59f1050 	ldr	r1, [pc, #80]	; 13d8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   13d38:	e59f2060 	ldr	r2, [pc, #96]	; 13da0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x214>
   13d3c:	e2810f5a 	add	r0, r1, #360	; 0x168
   13d40:	ebffd4fc 	bl	9138 <assertion_failed>
   13d44:	e59f1040 	ldr	r1, [pc, #64]	; 13d8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   13d48:	e3a02f45 	mov	r2, #276	; 0x114
   13d4c:	e2810f5e 	add	r0, r1, #376	; 0x178
   13d50:	ebffd4f8 	bl	9138 <assertion_failed>
   13d54:	e59f1030 	ldr	r1, [pc, #48]	; 13d8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   13d58:	e59f2044 	ldr	r2, [pc, #68]	; 13da4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x218>
   13d5c:	e2810090 	add	r0, r1, #144	; 0x90
   13d60:	ebffd4f4 	bl	9138 <assertion_failed>
   13d64:	e59f1020 	ldr	r1, [pc, #32]	; 13d8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   13d68:	e3a02f46 	mov	r2, #280	; 0x118
   13d6c:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   13d70:	ebffd4f0 	bl	9138 <assertion_failed>
   13d74:	e59f1010 	ldr	r1, [pc, #16]	; 13d8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   13d78:	e59f2028 	ldr	r2, [pc, #40]	; 13da8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x21c>
   13d7c:	e28100a4 	add	r0, r1, #164	; 0xa4
   13d80:	ebffd4ec 	bl	9138 <assertion_failed>
   13d84:	0000ffff 	.word	0x0000ffff
   13d88:	00000332 	.word	0x00000332
   13d8c:	00019258 	.word	0x00019258
   13d90:	00000115 	.word	0x00000115
   13d94:	0000010f 	.word	0x0000010f
   13d98:	00000111 	.word	0x00000111
   13d9c:	00000112 	.word	0x00000112
   13da0:	00000113 	.word	0x00000113
   13da4:	00000116 	.word	0x00000116
   13da8:	0000011a 	.word	0x0000011a

00013dac <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   13dac:	e5903000 	ldr	r3, [r0]
   13db0:	e92d4070 	push	{r4, r5, r6, lr}
   13db4:	e353000c 	cmp	r3, #12
   13db8:	8a000014 	bhi	13e10 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x64>
   13dbc:	e1a04000 	mov	r4, r0
   13dc0:	e590000c 	ldr	r0, [r0, #12]
   13dc4:	e3500000 	cmp	r0, #0
   13dc8:	0a000014 	beq	13e20 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x74>
   13dcc:	e1a06002 	mov	r6, r2
   13dd0:	e5d42010 	ldrb	r2, [r4, #16]
   13dd4:	e1a05001 	mov	r5, r1
   13dd8:	e3520000 	cmp	r2, #0
   13ddc:	0a000004 	beq	13df4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   13de0:	e3550000 	cmp	r5, #0
   13de4:	e5845014 	str	r5, [r4, #20]
   13de8:	0a000010 	beq	13e30 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x84>
   13dec:	e5846018 	str	r6, [r4, #24]
   13df0:	e8bd8070 	pop	{r4, r5, r6, pc}
   13df4:	e2831010 	add	r1, r3, #16
   13df8:	e59f2040 	ldr	r2, [pc, #64]	; 13e40 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x94>
   13dfc:	e1a03004 	mov	r3, r4
   13e00:	ebfffac6 	bl	12920 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   13e04:	e3a03001 	mov	r3, #1
   13e08:	e5c43010 	strb	r3, [r4, #16]
   13e0c:	eafffff3 	b	13de0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   13e10:	e59f102c 	ldr	r1, [pc, #44]	; 13e44 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   13e14:	e59f202c 	ldr	r2, [pc, #44]	; 13e48 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x9c>
   13e18:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   13e1c:	ebffd4c5 	bl	9138 <assertion_failed>
   13e20:	e59f101c 	ldr	r1, [pc, #28]	; 13e44 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   13e24:	e59f2020 	ldr	r2, [pc, #32]	; 13e4c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xa0>
   13e28:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   13e2c:	ebffd4c1 	bl	9138 <assertion_failed>
   13e30:	e59f100c 	ldr	r1, [pc, #12]	; 13e44 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   13e34:	e3a02f51 	mov	r2, #324	; 0x144
   13e38:	e2810f85 	add	r0, r1, #532	; 0x214
   13e3c:	ebffd4bd 	bl	9138 <assertion_failed>
   13e40:	000141cc 	.word	0x000141cc
   13e44:	00019258 	.word	0x00019258
   13e48:	00000139 	.word	0x00000139
   13e4c:	0000013a 	.word	0x0000013a

00013e50 <CDMAChannel::Start()>:
   13e50:	e5903000 	ldr	r3, [r0]
   13e54:	e92d4070 	push	{r4, r5, r6, lr}
   13e58:	e353000b 	cmp	r3, #11
   13e5c:	8a00003b 	bhi	13f50 <CDMAChannel::Start()+0x100>
   13e60:	e5902008 	ldr	r2, [r0, #8]
   13e64:	e1a04000 	mov	r4, r0
   13e68:	e3520000 	cmp	r2, #0
   13e6c:	0a00003b 	beq	13f60 <CDMAChannel::Start()+0x110>
   13e70:	e5903014 	ldr	r3, [r0, #20]
   13e74:	e3530000 	cmp	r3, #0
   13e78:	0a000014 	beq	13ed0 <CDMAChannel::Start()+0x80>
   13e7c:	e590300c 	ldr	r3, [r0, #12]
   13e80:	e3530000 	cmp	r3, #0
   13e84:	0a000041 	beq	13f90 <CDMAChannel::Start()+0x140>
   13e88:	e5d03010 	ldrb	r3, [r0, #16]
   13e8c:	e3530000 	cmp	r3, #0
   13e90:	0a00002a 	beq	13f40 <CDMAChannel::Start()+0xf0>
   13e94:	e5d21001 	ldrb	r1, [r2, #1]
   13e98:	e5d23000 	ldrb	r3, [r2]
   13e9c:	e5d20002 	ldrb	r0, [r2, #2]
   13ea0:	e1833401 	orr	r3, r3, r1, lsl #8
   13ea4:	e5d21003 	ldrb	r1, [r2, #3]
   13ea8:	e1833800 	orr	r3, r3, r0, lsl #16
   13eac:	e1833c01 	orr	r3, r3, r1, lsl #24
   13eb0:	e3833001 	orr	r3, r3, #1
   13eb4:	e1a0c423 	lsr	ip, r3, #8
   13eb8:	e1a00823 	lsr	r0, r3, #16
   13ebc:	e1a01c23 	lsr	r1, r3, #24
   13ec0:	e5c23000 	strb	r3, [r2]
   13ec4:	e5c2c001 	strb	ip, [r2, #1]
   13ec8:	e5c20002 	strb	r0, [r2, #2]
   13ecc:	e5c21003 	strb	r1, [r2, #3]
   13ed0:	e3a03000 	mov	r3, #0
   13ed4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   13ed8:	e5945000 	ldr	r5, [r4]
   13edc:	e2853602 	add	r3, r5, #2097152	; 0x200000
   13ee0:	e2833070 	add	r3, r3, #112	; 0x70
   13ee4:	e1a03403 	lsl	r3, r3, #8
   13ee8:	e5932000 	ldr	r2, [r3]
   13eec:	e3120004 	tst	r2, #4
   13ef0:	1a00001e 	bne	13f70 <CDMAChannel::Start()+0x120>
   13ef4:	e3a01001 	mov	r1, #1
   13ef8:	e59f20a0 	ldr	r2, [pc, #160]	; 13fa0 <CDMAChannel::Start()+0x150>
   13efc:	e5922fe0 	ldr	r2, [r2, #4064]	; 0xfe0
   13f00:	e0125511 	ands	r5, r2, r1, lsl r5
   13f04:	1a00001d 	bne	13f80 <CDMAChannel::Start()+0x130>
   13f08:	e5940008 	ldr	r0, [r4, #8]
   13f0c:	e3a01020 	mov	r1, #32
   13f10:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
   13f14:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
   13f18:	e5832004 	str	r2, [r3, #4]
   13f1c:	ebfff9c1 	bl	12628 <CleanAndInvalidateDataCacheRange>
   13f20:	e5943000 	ldr	r3, [r4]
   13f24:	e59f2078 	ldr	r2, [pc, #120]	; 13fa4 <CDMAChannel::Start()+0x154>
   13f28:	e2833602 	add	r3, r3, #2097152	; 0x200000
   13f2c:	e2833070 	add	r3, r3, #112	; 0x70
   13f30:	e1a03403 	lsl	r3, r3, #8
   13f34:	e5832000 	str	r2, [r3]
   13f38:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   13f3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13f40:	e59f1060 	ldr	r1, [pc, #96]	; 13fa8 <CDMAChannel::Start()+0x158>
   13f44:	e59f2060 	ldr	r2, [pc, #96]	; 13fac <CDMAChannel::Start()+0x15c>
   13f48:	e2810e23 	add	r0, r1, #560	; 0x230
   13f4c:	ebffd479 	bl	9138 <assertion_failed>
   13f50:	e59f1050 	ldr	r1, [pc, #80]	; 13fa8 <CDMAChannel::Start()+0x158>
   13f54:	e3a02f55 	mov	r2, #340	; 0x154
   13f58:	e2810030 	add	r0, r1, #48	; 0x30
   13f5c:	ebffd475 	bl	9138 <assertion_failed>
   13f60:	e59f1040 	ldr	r1, [pc, #64]	; 13fa8 <CDMAChannel::Start()+0x158>
   13f64:	e59f2044 	ldr	r2, [pc, #68]	; 13fb0 <CDMAChannel::Start()+0x160>
   13f68:	e28100a4 	add	r0, r1, #164	; 0xa4
   13f6c:	ebffd471 	bl	9138 <assertion_failed>
   13f70:	e59f1030 	ldr	r1, [pc, #48]	; 13fa8 <CDMAChannel::Start()+0x158>
   13f74:	e3a02e16 	mov	r2, #352	; 0x160
   13f78:	e2810d09 	add	r0, r1, #576	; 0x240
   13f7c:	ebffd46d 	bl	9138 <assertion_failed>
   13f80:	e59f1020 	ldr	r1, [pc, #32]	; 13fa8 <CDMAChannel::Start()+0x158>
   13f84:	e59f2028 	ldr	r2, [pc, #40]	; 13fb4 <CDMAChannel::Start()+0x164>
   13f88:	e2810f9d 	add	r0, r1, #628	; 0x274
   13f8c:	ebffd469 	bl	9138 <assertion_failed>
   13f90:	e59f1010 	ldr	r1, [pc, #16]	; 13fa8 <CDMAChannel::Start()+0x158>
   13f94:	e59f201c 	ldr	r2, [pc, #28]	; 13fb8 <CDMAChannel::Start()+0x168>
   13f98:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   13f9c:	ebffd465 	bl	9138 <assertion_failed>
   13fa0:	20007000 	.word	0x20007000
   13fa4:	10f10001 	.word	0x10f10001
   13fa8:	00019258 	.word	0x00019258
   13fac:	0000015a 	.word	0x0000015a
   13fb0:	00000155 	.word	0x00000155
   13fb4:	00000161 	.word	0x00000161
   13fb8:	00000159 	.word	0x00000159

00013fbc <CDMAChannel::Wait()>:
   13fbc:	e5903000 	ldr	r3, [r0]
   13fc0:	e92d4010 	push	{r4, lr}
   13fc4:	e353000b 	cmp	r3, #11
   13fc8:	8a000019 	bhi	14034 <CDMAChannel::Wait()+0x78>
   13fcc:	e5903014 	ldr	r3, [r0, #20]
   13fd0:	e1a04000 	mov	r4, r0
   13fd4:	e3530000 	cmp	r3, #0
   13fd8:	1a000019 	bne	14044 <CDMAChannel::Wait()+0x88>
   13fdc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   13fe0:	e5902000 	ldr	r2, [r0]
   13fe4:	e2822602 	add	r2, r2, #2097152	; 0x200000
   13fe8:	e2822070 	add	r2, r2, #112	; 0x70
   13fec:	e1a02402 	lsl	r2, r2, #8
   13ff0:	e5923000 	ldr	r3, [r2]
   13ff4:	e3130001 	tst	r3, #1
   13ff8:	1afffffc 	bne	13ff0 <CDMAChannel::Wait()+0x34>
   13ffc:	e1a03423 	lsr	r3, r3, #8
   14000:	e5940020 	ldr	r0, [r4, #32]
   14004:	e2233001 	eor	r3, r3, #1
   14008:	e2033001 	and	r3, r3, #1
   1400c:	e3500000 	cmp	r0, #0
   14010:	e5c4301c 	strb	r3, [r4, #28]
   14014:	1a000003 	bne	14028 <CDMAChannel::Wait()+0x6c>
   14018:	e3a03000 	mov	r3, #0
   1401c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   14020:	e5d4001c 	ldrb	r0, [r4, #28]
   14024:	e8bd8010 	pop	{r4, pc}
   14028:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   1402c:	ebfff97d 	bl	12628 <CleanAndInvalidateDataCacheRange>
   14030:	eafffff8 	b	14018 <CDMAChannel::Wait()+0x5c>
   14034:	e59f1018 	ldr	r1, [pc, #24]	; 14054 <CDMAChannel::Wait()+0x98>
   14038:	e3a02f5e 	mov	r2, #376	; 0x178
   1403c:	e2810030 	add	r0, r1, #48	; 0x30
   14040:	ebffd43c 	bl	9138 <assertion_failed>
   14044:	e59f1008 	ldr	r1, [pc, #8]	; 14054 <CDMAChannel::Wait()+0x98>
   14048:	e59f2008 	ldr	r2, [pc, #8]	; 14058 <CDMAChannel::Wait()+0x9c>
   1404c:	e2810faa 	add	r0, r1, #680	; 0x2a8
   14050:	ebffd438 	bl	9138 <assertion_failed>
   14054:	00019258 	.word	0x00019258
   14058:	00000179 	.word	0x00000179

0001405c <CDMAChannel::GetStatus()>:
   1405c:	e5903000 	ldr	r3, [r0]
   14060:	e92d4010 	push	{r4, lr}
   14064:	e353000b 	cmp	r3, #11
   14068:	8a000007 	bhi	1408c <CDMAChannel::GetStatus()+0x30>
   1406c:	e2833602 	add	r3, r3, #2097152	; 0x200000
   14070:	e2833070 	add	r3, r3, #112	; 0x70
   14074:	e1a03403 	lsl	r3, r3, #8
   14078:	e5933000 	ldr	r3, [r3]
   1407c:	e3130001 	tst	r3, #1
   14080:	1a000005 	bne	1409c <CDMAChannel::GetStatus()+0x40>
   14084:	e5d0001c 	ldrb	r0, [r0, #28]
   14088:	e8bd8010 	pop	{r4, pc}
   1408c:	e59f1018 	ldr	r1, [pc, #24]	; 140ac <CDMAChannel::GetStatus()+0x50>
   14090:	e3a02f66 	mov	r2, #408	; 0x198
   14094:	e2810030 	add	r0, r1, #48	; 0x30
   14098:	ebffd426 	bl	9138 <assertion_failed>
   1409c:	e59f1008 	ldr	r1, [pc, #8]	; 140ac <CDMAChannel::GetStatus()+0x50>
   140a0:	e59f2008 	ldr	r2, [pc, #8]	; 140b0 <CDMAChannel::GetStatus()+0x54>
   140a4:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   140a8:	ebffd422 	bl	9138 <assertion_failed>
   140ac:	00019258 	.word	0x00019258
   140b0:	00000199 	.word	0x00000199

000140b4 <CDMAChannel::InterruptHandler()>:
   140b4:	e92d4010 	push	{r4, lr}
   140b8:	e1a04000 	mov	r4, r0
   140bc:	e5900020 	ldr	r0, [r0, #32]
   140c0:	e3500000 	cmp	r0, #0
   140c4:	1a000022 	bne	14154 <CDMAChannel::InterruptHandler()+0xa0>
   140c8:	e3a03000 	mov	r3, #0
   140cc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   140d0:	e5942000 	ldr	r2, [r4]
   140d4:	e352000b 	cmp	r2, #11
   140d8:	8a000020 	bhi	14160 <CDMAChannel::InterruptHandler()+0xac>
   140dc:	e3a03001 	mov	r3, #1
   140e0:	e59f10c8 	ldr	r1, [pc, #200]	; 141b0 <CDMAChannel::InterruptHandler()+0xfc>
   140e4:	e1a03213 	lsl	r3, r3, r2
   140e8:	e5912fe0 	ldr	r2, [r1, #4064]	; 0xfe0
   140ec:	e1130002 	tst	r3, r2
   140f0:	0a00001e 	beq	14170 <CDMAChannel::InterruptHandler()+0xbc>
   140f4:	e5813fe0 	str	r3, [r1, #4064]	; 0xfe0
   140f8:	e5943000 	ldr	r3, [r4]
   140fc:	e2833602 	add	r3, r3, #2097152	; 0x200000
   14100:	e2833070 	add	r3, r3, #112	; 0x70
   14104:	e1a03403 	lsl	r3, r3, #8
   14108:	e5931000 	ldr	r1, [r3]
   1410c:	e3110004 	tst	r1, #4
   14110:	0a00001a 	beq	14180 <CDMAChannel::InterruptHandler()+0xcc>
   14114:	e2112001 	ands	r2, r1, #1
   14118:	1a00001c 	bne	14190 <CDMAChannel::InterruptHandler()+0xdc>
   1411c:	e3a00004 	mov	r0, #4
   14120:	e5830000 	str	r0, [r3]
   14124:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   14128:	e1a01421 	lsr	r1, r1, #8
   1412c:	e5943014 	ldr	r3, [r4, #20]
   14130:	e2211001 	eor	r1, r1, #1
   14134:	e2011001 	and	r1, r1, #1
   14138:	e3530000 	cmp	r3, #0
   1413c:	e5c4101c 	strb	r1, [r4, #28]
   14140:	0a000016 	beq	141a0 <CDMAChannel::InterruptHandler()+0xec>
   14144:	e5942018 	ldr	r2, [r4, #24]
   14148:	e5940000 	ldr	r0, [r4]
   1414c:	e8bd4010 	pop	{r4, lr}
   14150:	e12fff13 	bx	r3
   14154:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   14158:	ebfff932 	bl	12628 <CleanAndInvalidateDataCacheRange>
   1415c:	eaffffd9 	b	140c8 <CDMAChannel::InterruptHandler()+0x14>
   14160:	e59f104c 	ldr	r1, [pc, #76]	; 141b4 <CDMAChannel::InterruptHandler()+0x100>
   14164:	e59f204c 	ldr	r2, [pc, #76]	; 141b8 <CDMAChannel::InterruptHandler()+0x104>
   14168:	e2810030 	add	r0, r1, #48	; 0x30
   1416c:	ebffd3f1 	bl	9138 <assertion_failed>
   14170:	e59f103c 	ldr	r1, [pc, #60]	; 141b4 <CDMAChannel::InterruptHandler()+0x100>
   14174:	e59f2040 	ldr	r2, [pc, #64]	; 141bc <CDMAChannel::InterruptHandler()+0x108>
   14178:	e2810fbe 	add	r0, r1, #760	; 0x2f8
   1417c:	ebffd3ed 	bl	9138 <assertion_failed>
   14180:	e59f102c 	ldr	r1, [pc, #44]	; 141b4 <CDMAChannel::InterruptHandler()+0x100>
   14184:	e59f2034 	ldr	r2, [pc, #52]	; 141c0 <CDMAChannel::InterruptHandler()+0x10c>
   14188:	e2810e31 	add	r0, r1, #784	; 0x310
   1418c:	ebffd3e9 	bl	9138 <assertion_failed>
   14190:	e59f101c 	ldr	r1, [pc, #28]	; 141b4 <CDMAChannel::InterruptHandler()+0x100>
   14194:	e59f2028 	ldr	r2, [pc, #40]	; 141c4 <CDMAChannel::InterruptHandler()+0x110>
   14198:	e2810e32 	add	r0, r1, #800	; 0x320
   1419c:	ebffd3e5 	bl	9138 <assertion_failed>
   141a0:	e59f100c 	ldr	r1, [pc, #12]	; 141b4 <CDMAChannel::InterruptHandler()+0x100>
   141a4:	e59f201c 	ldr	r2, [pc, #28]	; 141c8 <CDMAChannel::InterruptHandler()+0x114>
   141a8:	e2810f85 	add	r0, r1, #532	; 0x214
   141ac:	ebffd3e1 	bl	9138 <assertion_failed>
   141b0:	20007000 	.word	0x20007000
   141b4:	00019258 	.word	0x00019258
   141b8:	000001a7 	.word	0x000001a7
   141bc:	000001ad 	.word	0x000001ad
   141c0:	000001b1 	.word	0x000001b1
   141c4:	000001b2 	.word	0x000001b2
   141c8:	000001b9 	.word	0x000001b9

000141cc <CDMAChannel::InterruptStub(void*)>:
   141cc:	e3500000 	cmp	r0, #0
   141d0:	0a000000 	beq	141d8 <CDMAChannel::InterruptStub(void*)+0xc>
   141d4:	eaffffb6 	b	140b4 <CDMAChannel::InterruptHandler()>
   141d8:	e59f100c 	ldr	r1, [pc, #12]	; 141ec <CDMAChannel::InterruptStub(void*)+0x20>
   141dc:	e92d4010 	push	{r4, lr}
   141e0:	e3a02d07 	mov	r2, #448	; 0x1c0
   141e4:	e2810fcd 	add	r0, r1, #820	; 0x334
   141e8:	ebffd3d2 	bl	9138 <assertion_failed>
   141ec:	00019258 	.word	0x00019258

000141f0 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   141f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   141f4:	e3a0e000 	mov	lr, #0
   141f8:	e1a03000 	mov	r3, r0
   141fc:	e1a0c00e 	mov	ip, lr
   14200:	e5801000 	str	r1, [r0]
   14204:	e28020dc 	add	r2, r0, #220	; 0xdc
   14208:	e5e3e004 	strb	lr, [r3, #4]!
   1420c:	e5a3c004 	str	ip, [r3, #4]!
   14210:	e1530002 	cmp	r3, r2
   14214:	1afffffc 	bne	1420c <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   14218:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001421c <CGPIOManager::~CGPIOManager()>:
   1421c:	e92d4010 	push	{r4, lr}
   14220:	e2803004 	add	r3, r0, #4
   14224:	e1a04000 	mov	r4, r0
   14228:	e28010dc 	add	r1, r0, #220	; 0xdc
   1422c:	ea000001 	b	14238 <CGPIOManager::~CGPIOManager()+0x1c>
   14230:	e1530001 	cmp	r3, r1
   14234:	0a000006 	beq	14254 <CGPIOManager::~CGPIOManager()+0x38>
   14238:	e5b32004 	ldr	r2, [r3, #4]!
   1423c:	e3520000 	cmp	r2, #0
   14240:	0afffffa 	beq	14230 <CGPIOManager::~CGPIOManager()+0x14>
   14244:	e3a0202c 	mov	r2, #44	; 0x2c
   14248:	e59f103c 	ldr	r1, [pc, #60]	; 1428c <CGPIOManager::~CGPIOManager()+0x70>
   1424c:	e59f003c 	ldr	r0, [pc, #60]	; 14290 <CGPIOManager::~CGPIOManager()+0x74>
   14250:	ebffd3b8 	bl	9138 <assertion_failed>
   14254:	e5d43004 	ldrb	r3, [r4, #4]
   14258:	e3530000 	cmp	r3, #0
   1425c:	0a000004 	beq	14274 <CGPIOManager::~CGPIOManager()+0x58>
   14260:	e5940000 	ldr	r0, [r4]
   14264:	e3500000 	cmp	r0, #0
   14268:	0a000003 	beq	1427c <CGPIOManager::~CGPIOManager()+0x60>
   1426c:	e3a01034 	mov	r1, #52	; 0x34
   14270:	ebfff9de 	bl	129f0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   14274:	e1a00004 	mov	r0, r4
   14278:	e8bd8010 	pop	{r4, pc}
   1427c:	e3a02032 	mov	r2, #50	; 0x32
   14280:	e59f1004 	ldr	r1, [pc, #4]	; 1428c <CGPIOManager::~CGPIOManager()+0x70>
   14284:	e59f0008 	ldr	r0, [pc, #8]	; 14294 <CGPIOManager::~CGPIOManager()+0x78>
   14288:	ebffd3aa 	bl	9138 <assertion_failed>
   1428c:	00019598 	.word	0x00019598
   14290:	000195a8 	.word	0x000195a8
   14294:	000195bc 	.word	0x000195bc

00014298 <CGPIOManager::Initialize()>:
   14298:	e5d03004 	ldrb	r3, [r0, #4]
   1429c:	e92d4010 	push	{r4, lr}
   142a0:	e3530000 	cmp	r3, #0
   142a4:	1a00000a 	bne	142d4 <CGPIOManager::Initialize()+0x3c>
   142a8:	e1a04000 	mov	r4, r0
   142ac:	e5900000 	ldr	r0, [r0]
   142b0:	e3500000 	cmp	r0, #0
   142b4:	0a00000a 	beq	142e4 <CGPIOManager::Initialize()+0x4c>
   142b8:	e1a03004 	mov	r3, r4
   142bc:	e59f2030 	ldr	r2, [pc, #48]	; 142f4 <CGPIOManager::Initialize()+0x5c>
   142c0:	e3a01034 	mov	r1, #52	; 0x34
   142c4:	ebfff995 	bl	12920 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   142c8:	e3a00001 	mov	r0, #1
   142cc:	e5c40004 	strb	r0, [r4, #4]
   142d0:	e8bd8010 	pop	{r4, pc}
   142d4:	e3a0203b 	mov	r2, #59	; 0x3b
   142d8:	e59f1018 	ldr	r1, [pc, #24]	; 142f8 <CGPIOManager::Initialize()+0x60>
   142dc:	e59f0018 	ldr	r0, [pc, #24]	; 142fc <CGPIOManager::Initialize()+0x64>
   142e0:	ebffd394 	bl	9138 <assertion_failed>
   142e4:	e3a0203c 	mov	r2, #60	; 0x3c
   142e8:	e59f1008 	ldr	r1, [pc, #8]	; 142f8 <CGPIOManager::Initialize()+0x60>
   142ec:	e59f000c 	ldr	r0, [pc, #12]	; 14300 <CGPIOManager::Initialize()+0x68>
   142f0:	ebffd390 	bl	9138 <assertion_failed>
   142f4:	000144f4 	.word	0x000144f4
   142f8:	00019598 	.word	0x00019598
   142fc:	000195d0 	.word	0x000195d0
   14300:	000195bc 	.word	0x000195bc

00014304 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   14304:	e5d03004 	ldrb	r3, [r0, #4]
   14308:	e92d4010 	push	{r4, lr}
   1430c:	e3530000 	cmp	r3, #0
   14310:	0a00000a 	beq	14340 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   14314:	e3510000 	cmp	r1, #0
   14318:	0a00000c 	beq	14350 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   1431c:	e5913004 	ldr	r3, [r1, #4]
   14320:	e3530035 	cmp	r3, #53	; 0x35
   14324:	8a00000d 	bhi	14360 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   14328:	e0800103 	add	r0, r0, r3, lsl #2
   1432c:	e5903008 	ldr	r3, [r0, #8]
   14330:	e3530000 	cmp	r3, #0
   14334:	1a00000d 	bne	14370 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   14338:	e5801008 	str	r1, [r0, #8]
   1433c:	e8bd8010 	pop	{r4, pc}
   14340:	e3a02045 	mov	r2, #69	; 0x45
   14344:	e59f1034 	ldr	r1, [pc, #52]	; 14380 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   14348:	e59f0034 	ldr	r0, [pc, #52]	; 14384 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   1434c:	ebffd379 	bl	9138 <assertion_failed>
   14350:	e3a02047 	mov	r2, #71	; 0x47
   14354:	e59f1024 	ldr	r1, [pc, #36]	; 14380 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   14358:	e59f0028 	ldr	r0, [pc, #40]	; 14388 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   1435c:	ebffd375 	bl	9138 <assertion_failed>
   14360:	e3a02049 	mov	r2, #73	; 0x49
   14364:	e59f1014 	ldr	r1, [pc, #20]	; 14380 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   14368:	e59f001c 	ldr	r0, [pc, #28]	; 1438c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   1436c:	ebffd371 	bl	9138 <assertion_failed>
   14370:	e3a0204b 	mov	r2, #75	; 0x4b
   14374:	e59f1004 	ldr	r1, [pc, #4]	; 14380 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   14378:	e59f0010 	ldr	r0, [pc, #16]	; 14390 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>
   1437c:	ebffd36d 	bl	9138 <assertion_failed>
   14380:	00019598 	.word	0x00019598
   14384:	000195e4 	.word	0x000195e4
   14388:	000195f4 	.word	0x000195f4
   1438c:	00019600 	.word	0x00019600
   14390:	000195a8 	.word	0x000195a8

00014394 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   14394:	e5d03004 	ldrb	r3, [r0, #4]
   14398:	e92d4010 	push	{r4, lr}
   1439c:	e3530000 	cmp	r3, #0
   143a0:	0a00000b 	beq	143d4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   143a4:	e3510000 	cmp	r1, #0
   143a8:	0a00000d 	beq	143e4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   143ac:	e5913004 	ldr	r3, [r1, #4]
   143b0:	e3530035 	cmp	r3, #53	; 0x35
   143b4:	8a00000e 	bhi	143f4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   143b8:	e0800103 	add	r0, r0, r3, lsl #2
   143bc:	e5903008 	ldr	r3, [r0, #8]
   143c0:	e3530000 	cmp	r3, #0
   143c4:	0a00000e 	beq	14404 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   143c8:	e3a03000 	mov	r3, #0
   143cc:	e5803008 	str	r3, [r0, #8]
   143d0:	e8bd8010 	pop	{r4, pc}
   143d4:	e3a02052 	mov	r2, #82	; 0x52
   143d8:	e59f1034 	ldr	r1, [pc, #52]	; 14414 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   143dc:	e59f0034 	ldr	r0, [pc, #52]	; 14418 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>
   143e0:	ebffd354 	bl	9138 <assertion_failed>
   143e4:	e3a02054 	mov	r2, #84	; 0x54
   143e8:	e59f1024 	ldr	r1, [pc, #36]	; 14414 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   143ec:	e59f0028 	ldr	r0, [pc, #40]	; 1441c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   143f0:	ebffd350 	bl	9138 <assertion_failed>
   143f4:	e3a02056 	mov	r2, #86	; 0x56
   143f8:	e59f1014 	ldr	r1, [pc, #20]	; 14414 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   143fc:	e59f001c 	ldr	r0, [pc, #28]	; 14420 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   14400:	ebffd34c 	bl	9138 <assertion_failed>
   14404:	e3a02058 	mov	r2, #88	; 0x58
   14408:	e59f1004 	ldr	r1, [pc, #4]	; 14414 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   1440c:	e59f0010 	ldr	r0, [pc, #16]	; 14424 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   14410:	ebffd348 	bl	9138 <assertion_failed>
   14414:	00019598 	.word	0x00019598
   14418:	000195e4 	.word	0x000195e4
   1441c:	000195f4 	.word	0x000195f4
   14420:	00019600 	.word	0x00019600
   14424:	00019614 	.word	0x00019614

00014428 <CGPIOManager::InterruptHandler()>:
   14428:	e5d03004 	ldrb	r3, [r0, #4]
   1442c:	e92d4070 	push	{r4, r5, r6, lr}
   14430:	e3530000 	cmp	r3, #0
   14434:	0a000025 	beq	144d0 <CGPIOManager::InterruptHandler()+0xa8>
   14438:	e3a04000 	mov	r4, #0
   1443c:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   14440:	e59f2098 	ldr	r2, [pc, #152]	; 144e0 <CGPIOManager::InterruptHandler()+0xb8>
   14444:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   14448:	ea000005 	b	14464 <CGPIOManager::InterruptHandler()+0x3c>
   1444c:	e2844001 	add	r4, r4, #1
   14450:	e314001f 	tst	r4, #31
   14454:	11a030a3 	lsrne	r3, r3, #1
   14458:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   1445c:	e3540036 	cmp	r4, #54	; 0x36
   14460:	0a00000d 	beq	1449c <CGPIOManager::InterruptHandler()+0x74>
   14464:	e3130001 	tst	r3, #1
   14468:	0afffff7 	beq	1444c <CGPIOManager::InterruptHandler()+0x24>
   1446c:	e2843002 	add	r3, r4, #2
   14470:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   14474:	e3550000 	cmp	r5, #0
   14478:	0a00000a 	beq	144a8 <CGPIOManager::InterruptHandler()+0x80>
   1447c:	e1a00005 	mov	r0, r5
   14480:	ebffd7f9 	bl	a46c <CGPIOPin::InterruptHandler()>
   14484:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   14488:	e3530000 	cmp	r3, #0
   1448c:	1595100c 	ldrne	r1, [r5, #12]
   14490:	15952008 	ldrne	r2, [r5, #8]
   14494:	159f3048 	ldrne	r3, [pc, #72]	; 144e4 <CGPIOManager::InterruptHandler()+0xbc>
   14498:	17821003 	strne	r1, [r2, r3]
   1449c:	e3a03000 	mov	r3, #0
   144a0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   144a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   144a8:	e1a00004 	mov	r0, r4
   144ac:	ebffd80e 	bl	a4ec <CGPIOPin::DisableAllInterrupts(unsigned int)>
   144b0:	e3a02001 	mov	r2, #1
   144b4:	e59f302c 	ldr	r3, [pc, #44]	; 144e8 <CGPIOManager::InterruptHandler()+0xc0>
   144b8:	e204101f 	and	r1, r4, #31
   144bc:	e08332a4 	add	r3, r3, r4, lsr #5
   144c0:	e1a03103 	lsl	r3, r3, #2
   144c4:	e1a02112 	lsl	r2, r2, r1
   144c8:	e5832000 	str	r2, [r3]
   144cc:	eafffff2 	b	1449c <CGPIOManager::InterruptHandler()+0x74>
   144d0:	e3a0205e 	mov	r2, #94	; 0x5e
   144d4:	e59f1010 	ldr	r1, [pc, #16]	; 144ec <CGPIOManager::InterruptHandler()+0xc4>
   144d8:	e59f0010 	ldr	r0, [pc, #16]	; 144f0 <CGPIOManager::InterruptHandler()+0xc8>
   144dc:	ebffd315 	bl	9138 <assertion_failed>
   144e0:	20200000 	.word	0x20200000
   144e4:	20200040 	.word	0x20200040
   144e8:	08080010 	.word	0x08080010
   144ec:	00019598 	.word	0x00019598
   144f0:	000195e4 	.word	0x000195e4

000144f4 <CGPIOManager::InterruptStub(void*)>:
   144f4:	e3500000 	cmp	r0, #0
   144f8:	0a000000 	beq	14500 <CGPIOManager::InterruptStub(void*)+0xc>
   144fc:	eaffffc9 	b	14428 <CGPIOManager::InterruptHandler()>
   14500:	e92d4010 	push	{r4, lr}
   14504:	e3a0208e 	mov	r2, #142	; 0x8e
   14508:	e59f1004 	ldr	r1, [pc, #4]	; 14514 <CGPIOManager::InterruptStub(void*)+0x20>
   1450c:	e59f0004 	ldr	r0, [pc, #4]	; 14518 <CGPIOManager::InterruptStub(void*)+0x24>
   14510:	ebffd308 	bl	9138 <assertion_failed>
   14514:	00019598 	.word	0x00019598
   14518:	00019628 	.word	0x00019628

0001451c <CPtrList::CPtrList()>:
   1451c:	e3a02000 	mov	r2, #0
   14520:	e5802000 	str	r2, [r0]
   14524:	e12fff1e 	bx	lr

00014528 <CPtrList::~CPtrList()>:
   14528:	e5903000 	ldr	r3, [r0]
   1452c:	e3530000 	cmp	r3, #0
   14530:	012fff1e 	bxeq	lr
   14534:	e92d4010 	push	{r4, lr}
   14538:	e3a0202a 	mov	r2, #42	; 0x2a
   1453c:	e59f1004 	ldr	r1, [pc, #4]	; 14548 <CPtrList::~CPtrList()+0x20>
   14540:	e59f0004 	ldr	r0, [pc, #4]	; 1454c <CPtrList::~CPtrList()+0x24>
   14544:	ebffd2fb 	bl	9138 <assertion_failed>
   14548:	00019634 	.word	0x00019634
   1454c:	00019640 	.word	0x00019640

00014550 <CPtrList::GetFirst()>:
   14550:	e5900000 	ldr	r0, [r0]
   14554:	e12fff1e 	bx	lr

00014558 <CPtrList::GetNext(TPtrListElement*)>:
   14558:	e3510000 	cmp	r1, #0
   1455c:	e92d4010 	push	{r4, lr}
   14560:	0a000005 	beq	1457c <CPtrList::GetNext(TPtrListElement*)+0x24>
   14564:	e59f3030 	ldr	r3, [pc, #48]	; 1459c <CPtrList::GetNext(TPtrListElement*)+0x44>
   14568:	e5912000 	ldr	r2, [r1]
   1456c:	e1520003 	cmp	r2, r3
   14570:	1a000005 	bne	1458c <CPtrList::GetNext(TPtrListElement*)+0x34>
   14574:	e5910008 	ldr	r0, [r1, #8]
   14578:	e8bd8010 	pop	{r4, pc}
   1457c:	e3a02034 	mov	r2, #52	; 0x34
   14580:	e59f1018 	ldr	r1, [pc, #24]	; 145a0 <CPtrList::GetNext(TPtrListElement*)+0x48>
   14584:	e59f0018 	ldr	r0, [pc, #24]	; 145a4 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   14588:	ebffd2ea 	bl	9138 <assertion_failed>
   1458c:	e3a02035 	mov	r2, #53	; 0x35
   14590:	e59f1008 	ldr	r1, [pc, #8]	; 145a0 <CPtrList::GetNext(TPtrListElement*)+0x48>
   14594:	e59f000c 	ldr	r0, [pc, #12]	; 145a8 <CPtrList::GetNext(TPtrListElement*)+0x50>
   14598:	ebffd2e6 	bl	9138 <assertion_failed>
   1459c:	504c4d43 	.word	0x504c4d43
   145a0:	00019634 	.word	0x00019634
   145a4:	00019650 	.word	0x00019650
   145a8:	00019660 	.word	0x00019660

000145ac <CPtrList::GetPtr(TPtrListElement*)>:
   145ac:	e3510000 	cmp	r1, #0
   145b0:	e92d4010 	push	{r4, lr}
   145b4:	0a000005 	beq	145d0 <CPtrList::GetPtr(TPtrListElement*)+0x24>
   145b8:	e59f3030 	ldr	r3, [pc, #48]	; 145f0 <CPtrList::GetPtr(TPtrListElement*)+0x44>
   145bc:	e5912000 	ldr	r2, [r1]
   145c0:	e1520003 	cmp	r2, r3
   145c4:	1a000005 	bne	145e0 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   145c8:	e591000c 	ldr	r0, [r1, #12]
   145cc:	e8bd8010 	pop	{r4, pc}
   145d0:	e3a0203c 	mov	r2, #60	; 0x3c
   145d4:	e59f1018 	ldr	r1, [pc, #24]	; 145f4 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   145d8:	e59f0018 	ldr	r0, [pc, #24]	; 145f8 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   145dc:	ebffd2d5 	bl	9138 <assertion_failed>
   145e0:	e3a0203d 	mov	r2, #61	; 0x3d
   145e4:	e59f1008 	ldr	r1, [pc, #8]	; 145f4 <CPtrList::GetPtr(TPtrListElement*)+0x48>
   145e8:	e59f000c 	ldr	r0, [pc, #12]	; 145fc <CPtrList::GetPtr(TPtrListElement*)+0x50>
   145ec:	ebffd2d1 	bl	9138 <assertion_failed>
   145f0:	504c4d43 	.word	0x504c4d43
   145f4:	00019634 	.word	0x00019634
   145f8:	00019650 	.word	0x00019650
   145fc:	00019660 	.word	0x00019660

00014600 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   14600:	e92d4070 	push	{r4, r5, r6, lr}
   14604:	e1a05000 	mov	r5, r0
   14608:	e3a00010 	mov	r0, #16
   1460c:	e1a04001 	mov	r4, r1
   14610:	e1a06002 	mov	r6, r2
   14614:	ebfff4ab 	bl	118c8 <operator new(unsigned int)>
   14618:	e5953000 	ldr	r3, [r5]
   1461c:	e59f10ac 	ldr	r1, [pc, #172]	; 146d0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   14620:	e3530000 	cmp	r3, #0
   14624:	e580600c 	str	r6, [r0, #12]
   14628:	e5801000 	str	r1, [r0]
   1462c:	0a000017 	beq	14690 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   14630:	e3540000 	cmp	r4, #0
   14634:	0a000019 	beq	146a0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   14638:	e5942000 	ldr	r2, [r4]
   1463c:	e1520001 	cmp	r2, r1
   14640:	1a00001a 	bne	146b0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb0>
   14644:	e1530004 	cmp	r3, r4
   14648:	0a00000a 	beq	14678 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   1464c:	e5943004 	ldr	r3, [r4, #4]
   14650:	e5804008 	str	r4, [r0, #8]
   14654:	e3530000 	cmp	r3, #0
   14658:	e5803004 	str	r3, [r0, #4]
   1465c:	0a000003 	beq	14670 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   14660:	e5931000 	ldr	r1, [r3]
   14664:	e1510002 	cmp	r1, r2
   14668:	05830008 	streq	r0, [r3, #8]
   1466c:	1a000013 	bne	146c0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   14670:	e5840004 	str	r0, [r4, #4]
   14674:	e8bd8070 	pop	{r4, r5, r6, pc}
   14678:	e3a02000 	mov	r2, #0
   1467c:	e5830004 	str	r0, [r3, #4]
   14680:	e5803008 	str	r3, [r0, #8]
   14684:	e5850000 	str	r0, [r5]
   14688:	e5802004 	str	r2, [r0, #4]
   1468c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14690:	e3a0204c 	mov	r2, #76	; 0x4c
   14694:	e59f1038 	ldr	r1, [pc, #56]	; 146d4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   14698:	e59f0038 	ldr	r0, [pc, #56]	; 146d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   1469c:	ebffd2a5 	bl	9138 <assertion_failed>
   146a0:	e3a0204d 	mov	r2, #77	; 0x4d
   146a4:	e59f1028 	ldr	r1, [pc, #40]	; 146d4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   146a8:	e59f002c 	ldr	r0, [pc, #44]	; 146dc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   146ac:	ebffd2a1 	bl	9138 <assertion_failed>
   146b0:	e3a0204e 	mov	r2, #78	; 0x4e
   146b4:	e59f1018 	ldr	r1, [pc, #24]	; 146d4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   146b8:	e59f0020 	ldr	r0, [pc, #32]	; 146e0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   146bc:	ebffd29d 	bl	9138 <assertion_failed>
   146c0:	e3a02060 	mov	r2, #96	; 0x60
   146c4:	e59f1008 	ldr	r1, [pc, #8]	; 146d4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   146c8:	e59f0014 	ldr	r0, [pc, #20]	; 146e4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe4>
   146cc:	ebffd299 	bl	9138 <assertion_failed>
   146d0:	504c4d43 	.word	0x504c4d43
   146d4:	00019634 	.word	0x00019634
   146d8:	00019684 	.word	0x00019684
   146dc:	00019694 	.word	0x00019694
   146e0:	000196a0 	.word	0x000196a0
   146e4:	000196c4 	.word	0x000196c4

000146e8 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   146e8:	e92d4070 	push	{r4, r5, r6, lr}
   146ec:	e1a04001 	mov	r4, r1
   146f0:	e1a05000 	mov	r5, r0
   146f4:	e3a00010 	mov	r0, #16
   146f8:	e1a06002 	mov	r6, r2
   146fc:	ebfff471 	bl	118c8 <operator new(unsigned int)>
   14700:	e59f30ac 	ldr	r3, [pc, #172]	; 147b4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   14704:	e3540000 	cmp	r4, #0
   14708:	e580600c 	str	r6, [r0, #12]
   1470c:	e5803000 	str	r3, [r0]
   14710:	0a000010 	beq	14758 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   14714:	e5952000 	ldr	r2, [r5]
   14718:	e3520000 	cmp	r2, #0
   1471c:	0a000014 	beq	14774 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x8c>
   14720:	e5942000 	ldr	r2, [r4]
   14724:	e1520003 	cmp	r2, r3
   14728:	1a000015 	bne	14784 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   1472c:	e5943008 	ldr	r3, [r4, #8]
   14730:	e5804004 	str	r4, [r0, #4]
   14734:	e3530000 	cmp	r3, #0
   14738:	e5803008 	str	r3, [r0, #8]
   1473c:	0a000003 	beq	14750 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   14740:	e5931000 	ldr	r1, [r3]
   14744:	e1510002 	cmp	r1, r2
   14748:	05830004 	streq	r0, [r3, #4]
   1474c:	1a000010 	bne	14794 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>
   14750:	e5840008 	str	r0, [r4, #8]
   14754:	e8bd8070 	pop	{r4, r5, r6, pc}
   14758:	e5953000 	ldr	r3, [r5]
   1475c:	e3530000 	cmp	r3, #0
   14760:	1a00000f 	bne	147a4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   14764:	e5803004 	str	r3, [r0, #4]
   14768:	e5803008 	str	r3, [r0, #8]
   1476c:	e5850000 	str	r0, [r5]
   14770:	e8bd8070 	pop	{r4, r5, r6, pc}
   14774:	e3a0207d 	mov	r2, #125	; 0x7d
   14778:	e59f1038 	ldr	r1, [pc, #56]	; 147b8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   1477c:	e59f0038 	ldr	r0, [pc, #56]	; 147bc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   14780:	ebffd26c 	bl	9138 <assertion_failed>
   14784:	e3a0207e 	mov	r2, #126	; 0x7e
   14788:	e59f1028 	ldr	r1, [pc, #40]	; 147b8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   1478c:	e59f002c 	ldr	r0, [pc, #44]	; 147c0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   14790:	ebffd268 	bl	9138 <assertion_failed>
   14794:	e3a02085 	mov	r2, #133	; 0x85
   14798:	e59f1018 	ldr	r1, [pc, #24]	; 147b8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   1479c:	e59f0020 	ldr	r0, [pc, #32]	; 147c4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   147a0:	ebffd264 	bl	9138 <assertion_failed>
   147a4:	e3a02074 	mov	r2, #116	; 0x74
   147a8:	e59f1008 	ldr	r1, [pc, #8]	; 147b8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   147ac:	e59f0014 	ldr	r0, [pc, #20]	; 147c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   147b0:	ebffd260 	bl	9138 <assertion_failed>
   147b4:	504c4d43 	.word	0x504c4d43
   147b8:	00019634 	.word	0x00019634
   147bc:	00019684 	.word	0x00019684
   147c0:	000196ec 	.word	0x000196ec
   147c4:	00019710 	.word	0x00019710
   147c8:	00019640 	.word	0x00019640

000147cc <CPtrList::Remove(TPtrListElement*)>:
   147cc:	e3510000 	cmp	r1, #0
   147d0:	e92d4010 	push	{r4, lr}
   147d4:	0a00002b 	beq	14888 <CPtrList::Remove(TPtrListElement*)+0xbc>
   147d8:	e59f20e8 	ldr	r2, [pc, #232]	; 148c8 <CPtrList::Remove(TPtrListElement*)+0xfc>
   147dc:	e5913000 	ldr	r3, [r1]
   147e0:	e1530002 	cmp	r3, r2
   147e4:	1a00002b 	bne	14898 <CPtrList::Remove(TPtrListElement*)+0xcc>
   147e8:	e5902000 	ldr	r2, [r0]
   147ec:	e1520001 	cmp	r2, r1
   147f0:	0a000013 	beq	14844 <CPtrList::Remove(TPtrListElement*)+0x78>
   147f4:	e5912004 	ldr	r2, [r1, #4]
   147f8:	e3520000 	cmp	r2, #0
   147fc:	0a000029 	beq	148a8 <CPtrList::Remove(TPtrListElement*)+0xdc>
   14800:	e5920000 	ldr	r0, [r2]
   14804:	e1500003 	cmp	r0, r3
   14808:	1a00001a 	bne	14878 <CPtrList::Remove(TPtrListElement*)+0xac>
   1480c:	e5913008 	ldr	r3, [r1, #8]
   14810:	e3530000 	cmp	r3, #0
   14814:	e5823008 	str	r3, [r2, #8]
   14818:	0a000003 	beq	1482c <CPtrList::Remove(TPtrListElement*)+0x60>
   1481c:	e593c000 	ldr	ip, [r3]
   14820:	e15c0000 	cmp	ip, r0
   14824:	05832004 	streq	r2, [r3, #4]
   14828:	1a000022 	bne	148b8 <CPtrList::Remove(TPtrListElement*)+0xec>
   1482c:	e8bd4010 	pop	{r4, lr}
   14830:	e3a03000 	mov	r3, #0
   14834:	e1a00001 	mov	r0, r1
   14838:	e5813000 	str	r3, [r1]
   1483c:	e3a01010 	mov	r1, #16
   14840:	eafff42e 	b	11900 <operator delete(void*, unsigned int)>
   14844:	e5922008 	ldr	r2, [r2, #8]
   14848:	e3520000 	cmp	r2, #0
   1484c:	e5802000 	str	r2, [r0]
   14850:	0afffff5 	beq	1482c <CPtrList::Remove(TPtrListElement*)+0x60>
   14854:	e5920000 	ldr	r0, [r2]
   14858:	e1500003 	cmp	r0, r3
   1485c:	03a03000 	moveq	r3, #0
   14860:	05823004 	streq	r3, [r2, #4]
   14864:	0afffff0 	beq	1482c <CPtrList::Remove(TPtrListElement*)+0x60>
   14868:	e3a02098 	mov	r2, #152	; 0x98
   1486c:	e59f1058 	ldr	r1, [pc, #88]	; 148cc <CPtrList::Remove(TPtrListElement*)+0x100>
   14870:	e59f0058 	ldr	r0, [pc, #88]	; 148d0 <CPtrList::Remove(TPtrListElement*)+0x104>
   14874:	ebffd22f 	bl	9138 <assertion_failed>
   14878:	e3a0209f 	mov	r2, #159	; 0x9f
   1487c:	e59f1048 	ldr	r1, [pc, #72]	; 148cc <CPtrList::Remove(TPtrListElement*)+0x100>
   14880:	e59f004c 	ldr	r0, [pc, #76]	; 148d4 <CPtrList::Remove(TPtrListElement*)+0x108>
   14884:	ebffd22b 	bl	9138 <assertion_failed>
   14888:	e3a0208f 	mov	r2, #143	; 0x8f
   1488c:	e59f1038 	ldr	r1, [pc, #56]	; 148cc <CPtrList::Remove(TPtrListElement*)+0x100>
   14890:	e59f0040 	ldr	r0, [pc, #64]	; 148d8 <CPtrList::Remove(TPtrListElement*)+0x10c>
   14894:	ebffd227 	bl	9138 <assertion_failed>
   14898:	e3a02090 	mov	r2, #144	; 0x90
   1489c:	e59f1028 	ldr	r1, [pc, #40]	; 148cc <CPtrList::Remove(TPtrListElement*)+0x100>
   148a0:	e59f0034 	ldr	r0, [pc, #52]	; 148dc <CPtrList::Remove(TPtrListElement*)+0x110>
   148a4:	ebffd223 	bl	9138 <assertion_failed>
   148a8:	e3a0209e 	mov	r2, #158	; 0x9e
   148ac:	e59f1018 	ldr	r1, [pc, #24]	; 148cc <CPtrList::Remove(TPtrListElement*)+0x100>
   148b0:	e59f0028 	ldr	r0, [pc, #40]	; 148e0 <CPtrList::Remove(TPtrListElement*)+0x114>
   148b4:	ebffd21f 	bl	9138 <assertion_failed>
   148b8:	e3a020a4 	mov	r2, #164	; 0xa4
   148bc:	e59f1008 	ldr	r1, [pc, #8]	; 148cc <CPtrList::Remove(TPtrListElement*)+0x100>
   148c0:	e59f0008 	ldr	r0, [pc, #8]	; 148d0 <CPtrList::Remove(TPtrListElement*)+0x104>
   148c4:	ebffd21b 	bl	9138 <assertion_failed>
   148c8:	504c4d43 	.word	0x504c4d43
   148cc:	00019634 	.word	0x00019634
   148d0:	0001973c 	.word	0x0001973c
   148d4:	00019780 	.word	0x00019780
   148d8:	00019650 	.word	0x00019650
   148dc:	00019660 	.word	0x00019660
   148e0:	00019768 	.word	0x00019768

000148e4 <CPtrList::Find(void*)>:
   148e4:	e5900000 	ldr	r0, [r0]
   148e8:	e3500000 	cmp	r0, #0
   148ec:	012fff1e 	bxeq	lr
   148f0:	e59f3050 	ldr	r3, [pc, #80]	; 14948 <CPtrList::Find(void*)+0x64>
   148f4:	e5902000 	ldr	r2, [r0]
   148f8:	e1520003 	cmp	r2, r3
   148fc:	1a00000c 	bne	14934 <CPtrList::Find(void*)+0x50>
   14900:	e590300c 	ldr	r3, [r0, #12]
   14904:	e1510003 	cmp	r1, r3
   14908:	1a000003 	bne	1491c <CPtrList::Find(void*)+0x38>
   1490c:	e12fff1e 	bx	lr
   14910:	e590300c 	ldr	r3, [r0, #12]
   14914:	e1530001 	cmp	r3, r1
   14918:	012fff1e 	bxeq	lr
   1491c:	e5900008 	ldr	r0, [r0, #8]
   14920:	e3500000 	cmp	r0, #0
   14924:	012fff1e 	bxeq	lr
   14928:	e5903000 	ldr	r3, [r0]
   1492c:	e1530002 	cmp	r3, r2
   14930:	0afffff6 	beq	14910 <CPtrList::Find(void*)+0x2c>
   14934:	e92d4010 	push	{r4, lr}
   14938:	e3a020b3 	mov	r2, #179	; 0xb3
   1493c:	e59f1008 	ldr	r1, [pc, #8]	; 1494c <CPtrList::Find(void*)+0x68>
   14940:	e59f0008 	ldr	r0, [pc, #8]	; 14950 <CPtrList::Find(void*)+0x6c>
   14944:	ebffd1fb 	bl	9138 <assertion_failed>
   14948:	504c4d43 	.word	0x504c4d43
   1494c:	00019634 	.word	0x00019634
   14950:	00019660 	.word	0x00019660

00014954 <CPageAllocator::CPageAllocator()>:
   14954:	e3a02000 	mov	r2, #0
   14958:	e3a01001 	mov	r1, #1
   1495c:	e5802000 	str	r2, [r0]
   14960:	e580100c 	str	r1, [r0, #12]
   14964:	e5802004 	str	r2, [r0, #4]
   14968:	e5802008 	str	r2, [r0, #8]
   1496c:	e12fff1e 	bx	lr

00014970 <CPageAllocator::~CPageAllocator()>:
   14970:	e12fff1e 	bx	lr

00014974 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   14974:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14978:	e28db000 	add	fp, sp, #0
   1497c:	e24dd014 	sub	sp, sp, #20
   14980:	e50b0008 	str	r0, [fp, #-8]
   14984:	e50b100c 	str	r1, [fp, #-12]
   14988:	e50b2010 	str	r2, [fp, #-16]
   1498c:	e51b300c 	ldr	r3, [fp, #-12]
   14990:	e2833eff 	add	r3, r3, #4080	; 0xff0
   14994:	e283300f 	add	r3, r3, #15
   14998:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   1499c:	e3c3300f 	bic	r3, r3, #15
   149a0:	e1a02003 	mov	r2, r3
   149a4:	e51b3008 	ldr	r3, [fp, #-8]
   149a8:	e5832000 	str	r2, [r3]
   149ac:	e51b200c 	ldr	r2, [fp, #-12]
   149b0:	e51b3010 	ldr	r3, [fp, #-16]
   149b4:	e0823003 	add	r3, r2, r3
   149b8:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   149bc:	e3c3300f 	bic	r3, r3, #15
   149c0:	e1a02003 	mov	r2, r3
   149c4:	e51b3008 	ldr	r3, [fp, #-8]
   149c8:	e5832004 	str	r2, [r3, #4]
   149cc:	e320f000 	nop	{0}
   149d0:	e28bd000 	add	sp, fp, #0
   149d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   149d8:	e12fff1e 	bx	lr

000149dc <CPageAllocator::GetFreeSpace() const>:
   149dc:	e8900005 	ldm	r0, {r0, r2}
   149e0:	e0420000 	sub	r0, r2, r0
   149e4:	e12fff1e 	bx	lr

000149e8 <CPageAllocator::Allocate()>:
   149e8:	e5903000 	ldr	r3, [r0]
   149ec:	e92d4070 	push	{r4, r5, r6, lr}
   149f0:	e3530000 	cmp	r3, #0
   149f4:	0a000023 	beq	14a88 <CPageAllocator::Allocate()+0xa0>
   149f8:	e1a04000 	mov	r4, r0
   149fc:	e590000c 	ldr	r0, [r0, #12]
   14a00:	e3500000 	cmp	r0, #0
   14a04:	1a00000f 	bne	14a48 <CPageAllocator::Allocate()+0x60>
   14a08:	e5945008 	ldr	r5, [r4, #8]
   14a0c:	e3550000 	cmp	r5, #0
   14a10:	0a000010 	beq	14a58 <CPageAllocator::Allocate()+0x70>
   14a14:	e59f308c 	ldr	r3, [pc, #140]	; 14aa8 <CPageAllocator::Allocate()+0xc0>
   14a18:	e5952000 	ldr	r2, [r5]
   14a1c:	e1520003 	cmp	r2, r3
   14a20:	1a00001c 	bne	14a98 <CPageAllocator::Allocate()+0xb0>
   14a24:	e3a03000 	mov	r3, #0
   14a28:	e5952004 	ldr	r2, [r5, #4]
   14a2c:	e5842008 	str	r2, [r4, #8]
   14a30:	e5853000 	str	r3, [r5]
   14a34:	e594300c 	ldr	r3, [r4, #12]
   14a38:	e3530000 	cmp	r3, #0
   14a3c:	1a00000e 	bne	14a7c <CPageAllocator::Allocate()+0x94>
   14a40:	e1a00005 	mov	r0, r5
   14a44:	e8bd8070 	pop	{r4, r5, r6, pc}
   14a48:	ebfff6b6 	bl	12528 <EnterCritical>
   14a4c:	e5945008 	ldr	r5, [r4, #8]
   14a50:	e3550000 	cmp	r5, #0
   14a54:	1affffee 	bne	14a14 <CPageAllocator::Allocate()+0x2c>
   14a58:	e5942000 	ldr	r2, [r4]
   14a5c:	e5941004 	ldr	r1, [r4, #4]
   14a60:	e2823a01 	add	r3, r2, #4096	; 0x1000
   14a64:	e1530001 	cmp	r3, r1
   14a68:	e5843000 	str	r3, [r4]
   14a6c:	e594300c 	ldr	r3, [r4, #12]
   14a70:	91a05002 	movls	r5, r2
   14a74:	e3530000 	cmp	r3, #0
   14a78:	0afffff0 	beq	14a40 <CPageAllocator::Allocate()+0x58>
   14a7c:	ebfff6d3 	bl	125d0 <LeaveCritical>
   14a80:	e1a00005 	mov	r0, r5
   14a84:	e8bd8070 	pop	{r4, r5, r6, pc}
   14a88:	e59f101c 	ldr	r1, [pc, #28]	; 14aac <CPageAllocator::Allocate()+0xc4>
   14a8c:	e3a02036 	mov	r2, #54	; 0x36
   14a90:	e2810014 	add	r0, r1, #20
   14a94:	ebffd1a7 	bl	9138 <assertion_failed>
   14a98:	e59f100c 	ldr	r1, [pc, #12]	; 14aac <CPageAllocator::Allocate()+0xc4>
   14a9c:	e3a02044 	mov	r2, #68	; 0x44
   14aa0:	e2810024 	add	r0, r1, #36	; 0x24
   14aa4:	ebffd1a3 	bl	9138 <assertion_failed>
   14aa8:	50474d43 	.word	0x50474d43
   14aac:	000197ac 	.word	0x000197ac

00014ab0 <CPageAllocator::Free(void*)>:
   14ab0:	e92d4070 	push	{r4, r5, r6, lr}
   14ab4:	e2515000 	subs	r5, r1, #0
   14ab8:	08bd8070 	popeq	{r4, r5, r6, pc}
   14abc:	e1a04000 	mov	r4, r0
   14ac0:	e590000c 	ldr	r0, [r0, #12]
   14ac4:	e3500000 	cmp	r0, #0
   14ac8:	1a000009 	bne	14af4 <CPageAllocator::Free(void*)+0x44>
   14acc:	e59f3028 	ldr	r3, [pc, #40]	; 14afc <CPageAllocator::Free(void*)+0x4c>
   14ad0:	e5942008 	ldr	r2, [r4, #8]
   14ad4:	e5853000 	str	r3, [r5]
   14ad8:	e594300c 	ldr	r3, [r4, #12]
   14adc:	e5852004 	str	r2, [r5, #4]
   14ae0:	e3530000 	cmp	r3, #0
   14ae4:	e5845008 	str	r5, [r4, #8]
   14ae8:	08bd8070 	popeq	{r4, r5, r6, pc}
   14aec:	e8bd4070 	pop	{r4, r5, r6, lr}
   14af0:	eafff6b6 	b	125d0 <LeaveCritical>
   14af4:	ebfff68b 	bl	12528 <EnterCritical>
   14af8:	eafffff3 	b	14acc <CPageAllocator::Free(void*)+0x1c>
   14afc:	50474d43 	.word	0x50474d43

00014b00 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   14b00:	e5801000 	str	r1, [r0]
   14b04:	e5c02004 	strb	r2, [r0, #4]
   14b08:	e12fff1e 	bx	lr

00014b0c <CBcmMailBox::~CBcmMailBox()>:
   14b0c:	e12fff1e 	bx	lr

00014b10 <CBcmMailBox::Flush()>:
   14b10:	e92d4010 	push	{r4, lr}
   14b14:	e59f4024 	ldr	r4, [pc, #36]	; 14b40 <CBcmMailBox::Flush()+0x30>
   14b18:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   14b1c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14b20:	18bd8010 	popne	{r4, pc}
   14b24:	e3a00014 	mov	r0, #20
   14b28:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   14b2c:	ebffefd8 	bl	10a94 <CTimer::SimpleMsDelay(unsigned int)>
   14b30:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   14b34:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14b38:	0afffff9 	beq	14b24 <CBcmMailBox::Flush()+0x14>
   14b3c:	e8bd8010 	pop	{r4, pc}
   14b40:	2000b000 	.word	0x2000b000

00014b44 <CBcmMailBox::Read()>:
   14b44:	e5901000 	ldr	r1, [r0]
   14b48:	e59f2020 	ldr	r2, [pc, #32]	; 14b70 <CBcmMailBox::Read()+0x2c>
   14b4c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   14b50:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14b54:	1afffffc 	bne	14b4c <CBcmMailBox::Read()+0x8>
   14b58:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   14b5c:	e200300f 	and	r3, r0, #15
   14b60:	e1530001 	cmp	r3, r1
   14b64:	1afffff8 	bne	14b4c <CBcmMailBox::Read()+0x8>
   14b68:	e3c0000f 	bic	r0, r0, #15
   14b6c:	e12fff1e 	bx	lr
   14b70:	2000b000 	.word	0x2000b000

00014b74 <CBcmMailBox::Write(unsigned int)>:
   14b74:	e59f2034 	ldr	r2, [pc, #52]	; 14bb0 <CBcmMailBox::Write(unsigned int)+0x3c>
   14b78:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   14b7c:	e3530000 	cmp	r3, #0
   14b80:	bafffffc 	blt	14b78 <CBcmMailBox::Write(unsigned int)+0x4>
   14b84:	e311000f 	tst	r1, #15
   14b88:	1a000003 	bne	14b9c <CBcmMailBox::Write(unsigned int)+0x28>
   14b8c:	e5903000 	ldr	r3, [r0]
   14b90:	e1811003 	orr	r1, r1, r3
   14b94:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   14b98:	e12fff1e 	bx	lr
   14b9c:	e92d4010 	push	{r4, lr}
   14ba0:	e3a02062 	mov	r2, #98	; 0x62
   14ba4:	e59f1008 	ldr	r1, [pc, #8]	; 14bb4 <CBcmMailBox::Write(unsigned int)+0x40>
   14ba8:	e59f0008 	ldr	r0, [pc, #8]	; 14bb8 <CBcmMailBox::Write(unsigned int)+0x44>
   14bac:	ebffd161 	bl	9138 <assertion_failed>
   14bb0:	2000b000 	.word	0x2000b000
   14bb4:	000197f4 	.word	0x000197f4
   14bb8:	00019804 	.word	0x00019804

00014bbc <CBcmMailBox::WriteRead(unsigned int)>:
   14bbc:	e92d4070 	push	{r4, r5, r6, lr}
   14bc0:	e3a03000 	mov	r3, #0
   14bc4:	e24dd008 	sub	sp, sp, #8
   14bc8:	e1a05000 	mov	r5, r0
   14bcc:	e1a06001 	mov	r6, r1
   14bd0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   14bd4:	e5d03004 	ldrb	r3, [r0, #4]
   14bd8:	e3530000 	cmp	r3, #0
   14bdc:	1a000003 	bne	14bf0 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   14be0:	e59f30b4 	ldr	r3, [pc, #180]	; 14c9c <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   14be4:	e5930000 	ldr	r0, [r3]
   14be8:	e3500000 	cmp	r0, #0
   14bec:	1a000028 	bne	14c94 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   14bf0:	e59f40a8 	ldr	r4, [pc, #168]	; 14ca0 <CBcmMailBox::WriteRead(unsigned int)+0xe4>
   14bf4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   14bf8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14bfc:	1a000005 	bne	14c18 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   14c00:	e3a00014 	mov	r0, #20
   14c04:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   14c08:	ebffefa1 	bl	10a94 <CTimer::SimpleMsDelay(unsigned int)>
   14c0c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   14c10:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14c14:	0afffff9 	beq	14c00 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   14c18:	e1a00005 	mov	r0, r5
   14c1c:	e1a01006 	mov	r1, r6
   14c20:	ebffffd3 	bl	14b74 <CBcmMailBox::Write(unsigned int)>
   14c24:	e5950000 	ldr	r0, [r5]
   14c28:	e59f2070 	ldr	r2, [pc, #112]	; 14ca0 <CBcmMailBox::WriteRead(unsigned int)+0xe4>
   14c2c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   14c30:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14c34:	1afffffc 	bne	14c2c <CBcmMailBox::WriteRead(unsigned int)+0x70>
   14c38:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   14c3c:	e203100f 	and	r1, r3, #15
   14c40:	e1510000 	cmp	r1, r0
   14c44:	1afffff8 	bne	14c2c <CBcmMailBox::WriteRead(unsigned int)+0x70>
   14c48:	e5d52004 	ldrb	r2, [r5, #4]
   14c4c:	e3c3000f 	bic	r0, r3, #15
   14c50:	e3520000 	cmp	r2, #0
   14c54:	1a000003 	bne	14c68 <CBcmMailBox::WriteRead(unsigned int)+0xac>
   14c58:	e59f303c 	ldr	r3, [pc, #60]	; 14c9c <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   14c5c:	e5933000 	ldr	r3, [r3]
   14c60:	e3530000 	cmp	r3, #0
   14c64:	1a000003 	bne	14c78 <CBcmMailBox::WriteRead(unsigned int)+0xbc>
   14c68:	e3a03000 	mov	r3, #0
   14c6c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   14c70:	e28dd008 	add	sp, sp, #8
   14c74:	e8bd8070 	pop	{r4, r5, r6, pc}
   14c78:	e58d0004 	str	r0, [sp, #4]
   14c7c:	ebfff653 	bl	125d0 <LeaveCritical>
   14c80:	e59d0004 	ldr	r0, [sp, #4]
   14c84:	e3a03000 	mov	r3, #0
   14c88:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   14c8c:	e28dd008 	add	sp, sp, #8
   14c90:	e8bd8070 	pop	{r4, r5, r6, pc}
   14c94:	ebfff623 	bl	12528 <EnterCritical>
   14c98:	eaffffd4 	b	14bf0 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   14c9c:	00019bf8 	.word	0x00019bf8
   14ca0:	2000b000 	.word	0x2000b000

00014ca4 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   14ca4:	e3a02000 	mov	r2, #0
   14ca8:	e59f3004 	ldr	r3, [pc, #4]	; 14cb4 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   14cac:	e5832000 	str	r2, [r3]
   14cb0:	e12fff1e 	bx	lr
   14cb4:	00019bf8 	.word	0x00019bf8

00014cb8 <__udivsi3>:
   14cb8:	e2512001 	subs	r2, r1, #1
   14cbc:	012fff1e 	bxeq	lr
   14cc0:	3a000074 	bcc	14e98 <__udivsi3+0x1e0>
   14cc4:	e1500001 	cmp	r0, r1
   14cc8:	9a00006b 	bls	14e7c <__udivsi3+0x1c4>
   14ccc:	e1110002 	tst	r1, r2
   14cd0:	0a00006c 	beq	14e88 <__udivsi3+0x1d0>
   14cd4:	e16f3f10 	clz	r3, r0
   14cd8:	e16f2f11 	clz	r2, r1
   14cdc:	e0423003 	sub	r3, r2, r3
   14ce0:	e273301f 	rsbs	r3, r3, #31
   14ce4:	10833083 	addne	r3, r3, r3, lsl #1
   14ce8:	e3a02000 	mov	r2, #0
   14cec:	108ff103 	addne	pc, pc, r3, lsl #2
   14cf0:	e1a00000 	nop			; (mov r0, r0)
   14cf4:	e1500f81 	cmp	r0, r1, lsl #31
   14cf8:	e0a22002 	adc	r2, r2, r2
   14cfc:	20400f81 	subcs	r0, r0, r1, lsl #31
   14d00:	e1500f01 	cmp	r0, r1, lsl #30
   14d04:	e0a22002 	adc	r2, r2, r2
   14d08:	20400f01 	subcs	r0, r0, r1, lsl #30
   14d0c:	e1500e81 	cmp	r0, r1, lsl #29
   14d10:	e0a22002 	adc	r2, r2, r2
   14d14:	20400e81 	subcs	r0, r0, r1, lsl #29
   14d18:	e1500e01 	cmp	r0, r1, lsl #28
   14d1c:	e0a22002 	adc	r2, r2, r2
   14d20:	20400e01 	subcs	r0, r0, r1, lsl #28
   14d24:	e1500d81 	cmp	r0, r1, lsl #27
   14d28:	e0a22002 	adc	r2, r2, r2
   14d2c:	20400d81 	subcs	r0, r0, r1, lsl #27
   14d30:	e1500d01 	cmp	r0, r1, lsl #26
   14d34:	e0a22002 	adc	r2, r2, r2
   14d38:	20400d01 	subcs	r0, r0, r1, lsl #26
   14d3c:	e1500c81 	cmp	r0, r1, lsl #25
   14d40:	e0a22002 	adc	r2, r2, r2
   14d44:	20400c81 	subcs	r0, r0, r1, lsl #25
   14d48:	e1500c01 	cmp	r0, r1, lsl #24
   14d4c:	e0a22002 	adc	r2, r2, r2
   14d50:	20400c01 	subcs	r0, r0, r1, lsl #24
   14d54:	e1500b81 	cmp	r0, r1, lsl #23
   14d58:	e0a22002 	adc	r2, r2, r2
   14d5c:	20400b81 	subcs	r0, r0, r1, lsl #23
   14d60:	e1500b01 	cmp	r0, r1, lsl #22
   14d64:	e0a22002 	adc	r2, r2, r2
   14d68:	20400b01 	subcs	r0, r0, r1, lsl #22
   14d6c:	e1500a81 	cmp	r0, r1, lsl #21
   14d70:	e0a22002 	adc	r2, r2, r2
   14d74:	20400a81 	subcs	r0, r0, r1, lsl #21
   14d78:	e1500a01 	cmp	r0, r1, lsl #20
   14d7c:	e0a22002 	adc	r2, r2, r2
   14d80:	20400a01 	subcs	r0, r0, r1, lsl #20
   14d84:	e1500981 	cmp	r0, r1, lsl #19
   14d88:	e0a22002 	adc	r2, r2, r2
   14d8c:	20400981 	subcs	r0, r0, r1, lsl #19
   14d90:	e1500901 	cmp	r0, r1, lsl #18
   14d94:	e0a22002 	adc	r2, r2, r2
   14d98:	20400901 	subcs	r0, r0, r1, lsl #18
   14d9c:	e1500881 	cmp	r0, r1, lsl #17
   14da0:	e0a22002 	adc	r2, r2, r2
   14da4:	20400881 	subcs	r0, r0, r1, lsl #17
   14da8:	e1500801 	cmp	r0, r1, lsl #16
   14dac:	e0a22002 	adc	r2, r2, r2
   14db0:	20400801 	subcs	r0, r0, r1, lsl #16
   14db4:	e1500781 	cmp	r0, r1, lsl #15
   14db8:	e0a22002 	adc	r2, r2, r2
   14dbc:	20400781 	subcs	r0, r0, r1, lsl #15
   14dc0:	e1500701 	cmp	r0, r1, lsl #14
   14dc4:	e0a22002 	adc	r2, r2, r2
   14dc8:	20400701 	subcs	r0, r0, r1, lsl #14
   14dcc:	e1500681 	cmp	r0, r1, lsl #13
   14dd0:	e0a22002 	adc	r2, r2, r2
   14dd4:	20400681 	subcs	r0, r0, r1, lsl #13
   14dd8:	e1500601 	cmp	r0, r1, lsl #12
   14ddc:	e0a22002 	adc	r2, r2, r2
   14de0:	20400601 	subcs	r0, r0, r1, lsl #12
   14de4:	e1500581 	cmp	r0, r1, lsl #11
   14de8:	e0a22002 	adc	r2, r2, r2
   14dec:	20400581 	subcs	r0, r0, r1, lsl #11
   14df0:	e1500501 	cmp	r0, r1, lsl #10
   14df4:	e0a22002 	adc	r2, r2, r2
   14df8:	20400501 	subcs	r0, r0, r1, lsl #10
   14dfc:	e1500481 	cmp	r0, r1, lsl #9
   14e00:	e0a22002 	adc	r2, r2, r2
   14e04:	20400481 	subcs	r0, r0, r1, lsl #9
   14e08:	e1500401 	cmp	r0, r1, lsl #8
   14e0c:	e0a22002 	adc	r2, r2, r2
   14e10:	20400401 	subcs	r0, r0, r1, lsl #8
   14e14:	e1500381 	cmp	r0, r1, lsl #7
   14e18:	e0a22002 	adc	r2, r2, r2
   14e1c:	20400381 	subcs	r0, r0, r1, lsl #7
   14e20:	e1500301 	cmp	r0, r1, lsl #6
   14e24:	e0a22002 	adc	r2, r2, r2
   14e28:	20400301 	subcs	r0, r0, r1, lsl #6
   14e2c:	e1500281 	cmp	r0, r1, lsl #5
   14e30:	e0a22002 	adc	r2, r2, r2
   14e34:	20400281 	subcs	r0, r0, r1, lsl #5
   14e38:	e1500201 	cmp	r0, r1, lsl #4
   14e3c:	e0a22002 	adc	r2, r2, r2
   14e40:	20400201 	subcs	r0, r0, r1, lsl #4
   14e44:	e1500181 	cmp	r0, r1, lsl #3
   14e48:	e0a22002 	adc	r2, r2, r2
   14e4c:	20400181 	subcs	r0, r0, r1, lsl #3
   14e50:	e1500101 	cmp	r0, r1, lsl #2
   14e54:	e0a22002 	adc	r2, r2, r2
   14e58:	20400101 	subcs	r0, r0, r1, lsl #2
   14e5c:	e1500081 	cmp	r0, r1, lsl #1
   14e60:	e0a22002 	adc	r2, r2, r2
   14e64:	20400081 	subcs	r0, r0, r1, lsl #1
   14e68:	e1500001 	cmp	r0, r1
   14e6c:	e0a22002 	adc	r2, r2, r2
   14e70:	20400001 	subcs	r0, r0, r1
   14e74:	e1a00002 	mov	r0, r2
   14e78:	e12fff1e 	bx	lr
   14e7c:	03a00001 	moveq	r0, #1
   14e80:	13a00000 	movne	r0, #0
   14e84:	e12fff1e 	bx	lr
   14e88:	e16f2f11 	clz	r2, r1
   14e8c:	e262201f 	rsb	r2, r2, #31
   14e90:	e1a00230 	lsr	r0, r0, r2
   14e94:	e12fff1e 	bx	lr
   14e98:	e3500000 	cmp	r0, #0
   14e9c:	13e00000 	mvnne	r0, #0
   14ea0:	ea000097 	b	15104 <__aeabi_idiv0>

00014ea4 <__aeabi_uidivmod>:
   14ea4:	e3510000 	cmp	r1, #0
   14ea8:	0afffffa 	beq	14e98 <__udivsi3+0x1e0>
   14eac:	e92d4003 	push	{r0, r1, lr}
   14eb0:	ebffff80 	bl	14cb8 <__udivsi3>
   14eb4:	e8bd4006 	pop	{r1, r2, lr}
   14eb8:	e0030092 	mul	r3, r2, r0
   14ebc:	e0411003 	sub	r1, r1, r3
   14ec0:	e12fff1e 	bx	lr

00014ec4 <__divsi3>:
   14ec4:	e3510000 	cmp	r1, #0
   14ec8:	0a000081 	beq	150d4 <.divsi3_skip_div0_test+0x208>

00014ecc <.divsi3_skip_div0_test>:
   14ecc:	e020c001 	eor	ip, r0, r1
   14ed0:	42611000 	rsbmi	r1, r1, #0
   14ed4:	e2512001 	subs	r2, r1, #1
   14ed8:	0a000070 	beq	150a0 <.divsi3_skip_div0_test+0x1d4>
   14edc:	e1b03000 	movs	r3, r0
   14ee0:	42603000 	rsbmi	r3, r0, #0
   14ee4:	e1530001 	cmp	r3, r1
   14ee8:	9a00006f 	bls	150ac <.divsi3_skip_div0_test+0x1e0>
   14eec:	e1110002 	tst	r1, r2
   14ef0:	0a000071 	beq	150bc <.divsi3_skip_div0_test+0x1f0>
   14ef4:	e16f2f13 	clz	r2, r3
   14ef8:	e16f0f11 	clz	r0, r1
   14efc:	e0402002 	sub	r2, r0, r2
   14f00:	e272201f 	rsbs	r2, r2, #31
   14f04:	10822082 	addne	r2, r2, r2, lsl #1
   14f08:	e3a00000 	mov	r0, #0
   14f0c:	108ff102 	addne	pc, pc, r2, lsl #2
   14f10:	e1a00000 	nop			; (mov r0, r0)
   14f14:	e1530f81 	cmp	r3, r1, lsl #31
   14f18:	e0a00000 	adc	r0, r0, r0
   14f1c:	20433f81 	subcs	r3, r3, r1, lsl #31
   14f20:	e1530f01 	cmp	r3, r1, lsl #30
   14f24:	e0a00000 	adc	r0, r0, r0
   14f28:	20433f01 	subcs	r3, r3, r1, lsl #30
   14f2c:	e1530e81 	cmp	r3, r1, lsl #29
   14f30:	e0a00000 	adc	r0, r0, r0
   14f34:	20433e81 	subcs	r3, r3, r1, lsl #29
   14f38:	e1530e01 	cmp	r3, r1, lsl #28
   14f3c:	e0a00000 	adc	r0, r0, r0
   14f40:	20433e01 	subcs	r3, r3, r1, lsl #28
   14f44:	e1530d81 	cmp	r3, r1, lsl #27
   14f48:	e0a00000 	adc	r0, r0, r0
   14f4c:	20433d81 	subcs	r3, r3, r1, lsl #27
   14f50:	e1530d01 	cmp	r3, r1, lsl #26
   14f54:	e0a00000 	adc	r0, r0, r0
   14f58:	20433d01 	subcs	r3, r3, r1, lsl #26
   14f5c:	e1530c81 	cmp	r3, r1, lsl #25
   14f60:	e0a00000 	adc	r0, r0, r0
   14f64:	20433c81 	subcs	r3, r3, r1, lsl #25
   14f68:	e1530c01 	cmp	r3, r1, lsl #24
   14f6c:	e0a00000 	adc	r0, r0, r0
   14f70:	20433c01 	subcs	r3, r3, r1, lsl #24
   14f74:	e1530b81 	cmp	r3, r1, lsl #23
   14f78:	e0a00000 	adc	r0, r0, r0
   14f7c:	20433b81 	subcs	r3, r3, r1, lsl #23
   14f80:	e1530b01 	cmp	r3, r1, lsl #22
   14f84:	e0a00000 	adc	r0, r0, r0
   14f88:	20433b01 	subcs	r3, r3, r1, lsl #22
   14f8c:	e1530a81 	cmp	r3, r1, lsl #21
   14f90:	e0a00000 	adc	r0, r0, r0
   14f94:	20433a81 	subcs	r3, r3, r1, lsl #21
   14f98:	e1530a01 	cmp	r3, r1, lsl #20
   14f9c:	e0a00000 	adc	r0, r0, r0
   14fa0:	20433a01 	subcs	r3, r3, r1, lsl #20
   14fa4:	e1530981 	cmp	r3, r1, lsl #19
   14fa8:	e0a00000 	adc	r0, r0, r0
   14fac:	20433981 	subcs	r3, r3, r1, lsl #19
   14fb0:	e1530901 	cmp	r3, r1, lsl #18
   14fb4:	e0a00000 	adc	r0, r0, r0
   14fb8:	20433901 	subcs	r3, r3, r1, lsl #18
   14fbc:	e1530881 	cmp	r3, r1, lsl #17
   14fc0:	e0a00000 	adc	r0, r0, r0
   14fc4:	20433881 	subcs	r3, r3, r1, lsl #17
   14fc8:	e1530801 	cmp	r3, r1, lsl #16
   14fcc:	e0a00000 	adc	r0, r0, r0
   14fd0:	20433801 	subcs	r3, r3, r1, lsl #16
   14fd4:	e1530781 	cmp	r3, r1, lsl #15
   14fd8:	e0a00000 	adc	r0, r0, r0
   14fdc:	20433781 	subcs	r3, r3, r1, lsl #15
   14fe0:	e1530701 	cmp	r3, r1, lsl #14
   14fe4:	e0a00000 	adc	r0, r0, r0
   14fe8:	20433701 	subcs	r3, r3, r1, lsl #14
   14fec:	e1530681 	cmp	r3, r1, lsl #13
   14ff0:	e0a00000 	adc	r0, r0, r0
   14ff4:	20433681 	subcs	r3, r3, r1, lsl #13
   14ff8:	e1530601 	cmp	r3, r1, lsl #12
   14ffc:	e0a00000 	adc	r0, r0, r0
   15000:	20433601 	subcs	r3, r3, r1, lsl #12
   15004:	e1530581 	cmp	r3, r1, lsl #11
   15008:	e0a00000 	adc	r0, r0, r0
   1500c:	20433581 	subcs	r3, r3, r1, lsl #11
   15010:	e1530501 	cmp	r3, r1, lsl #10
   15014:	e0a00000 	adc	r0, r0, r0
   15018:	20433501 	subcs	r3, r3, r1, lsl #10
   1501c:	e1530481 	cmp	r3, r1, lsl #9
   15020:	e0a00000 	adc	r0, r0, r0
   15024:	20433481 	subcs	r3, r3, r1, lsl #9
   15028:	e1530401 	cmp	r3, r1, lsl #8
   1502c:	e0a00000 	adc	r0, r0, r0
   15030:	20433401 	subcs	r3, r3, r1, lsl #8
   15034:	e1530381 	cmp	r3, r1, lsl #7
   15038:	e0a00000 	adc	r0, r0, r0
   1503c:	20433381 	subcs	r3, r3, r1, lsl #7
   15040:	e1530301 	cmp	r3, r1, lsl #6
   15044:	e0a00000 	adc	r0, r0, r0
   15048:	20433301 	subcs	r3, r3, r1, lsl #6
   1504c:	e1530281 	cmp	r3, r1, lsl #5
   15050:	e0a00000 	adc	r0, r0, r0
   15054:	20433281 	subcs	r3, r3, r1, lsl #5
   15058:	e1530201 	cmp	r3, r1, lsl #4
   1505c:	e0a00000 	adc	r0, r0, r0
   15060:	20433201 	subcs	r3, r3, r1, lsl #4
   15064:	e1530181 	cmp	r3, r1, lsl #3
   15068:	e0a00000 	adc	r0, r0, r0
   1506c:	20433181 	subcs	r3, r3, r1, lsl #3
   15070:	e1530101 	cmp	r3, r1, lsl #2
   15074:	e0a00000 	adc	r0, r0, r0
   15078:	20433101 	subcs	r3, r3, r1, lsl #2
   1507c:	e1530081 	cmp	r3, r1, lsl #1
   15080:	e0a00000 	adc	r0, r0, r0
   15084:	20433081 	subcs	r3, r3, r1, lsl #1
   15088:	e1530001 	cmp	r3, r1
   1508c:	e0a00000 	adc	r0, r0, r0
   15090:	20433001 	subcs	r3, r3, r1
   15094:	e35c0000 	cmp	ip, #0
   15098:	42600000 	rsbmi	r0, r0, #0
   1509c:	e12fff1e 	bx	lr
   150a0:	e13c0000 	teq	ip, r0
   150a4:	42600000 	rsbmi	r0, r0, #0
   150a8:	e12fff1e 	bx	lr
   150ac:	33a00000 	movcc	r0, #0
   150b0:	01a00fcc 	asreq	r0, ip, #31
   150b4:	03800001 	orreq	r0, r0, #1
   150b8:	e12fff1e 	bx	lr
   150bc:	e16f2f11 	clz	r2, r1
   150c0:	e262201f 	rsb	r2, r2, #31
   150c4:	e35c0000 	cmp	ip, #0
   150c8:	e1a00233 	lsr	r0, r3, r2
   150cc:	42600000 	rsbmi	r0, r0, #0
   150d0:	e12fff1e 	bx	lr
   150d4:	e3500000 	cmp	r0, #0
   150d8:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
   150dc:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
   150e0:	ea000007 	b	15104 <__aeabi_idiv0>

000150e4 <__aeabi_idivmod>:
   150e4:	e3510000 	cmp	r1, #0
   150e8:	0afffff9 	beq	150d4 <.divsi3_skip_div0_test+0x208>
   150ec:	e92d4003 	push	{r0, r1, lr}
   150f0:	ebffff75 	bl	14ecc <.divsi3_skip_div0_test>
   150f4:	e8bd4006 	pop	{r1, r2, lr}
   150f8:	e0030092 	mul	r3, r2, r0
   150fc:	e0411003 	sub	r1, r1, r3
   15100:	e12fff1e 	bx	lr

00015104 <__aeabi_idiv0>:
   15104:	e12fff1e 	bx	lr

00015108 <__aeabi_ldivmod>:
   15108:	e3530000 	cmp	r3, #0
   1510c:	03520000 	cmpeq	r2, #0
   15110:	1a000007 	bne	15134 <__aeabi_ldivmod+0x2c>
   15114:	e3510000 	cmp	r1, #0
   15118:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
   1511c:	b3a00000 	movlt	r0, #0
   15120:	ba000002 	blt	15130 <__aeabi_ldivmod+0x28>
   15124:	03500000 	cmpeq	r0, #0
   15128:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
   1512c:	13e00000 	mvnne	r0, #0
   15130:	eafffff3 	b	15104 <__aeabi_idiv0>
   15134:	e24dd008 	sub	sp, sp, #8
   15138:	e92d6000 	push	{sp, lr}
   1513c:	e3510000 	cmp	r1, #0
   15140:	ba000006 	blt	15160 <__aeabi_ldivmod+0x58>
   15144:	e3530000 	cmp	r3, #0
   15148:	ba000011 	blt	15194 <__aeabi_ldivmod+0x8c>
   1514c:	eb00003a 	bl	1523c <__udivmoddi4>
   15150:	e59de004 	ldr	lr, [sp, #4]
   15154:	e28dd008 	add	sp, sp, #8
   15158:	e8bd000c 	pop	{r2, r3}
   1515c:	e12fff1e 	bx	lr
   15160:	e2700000 	rsbs	r0, r0, #0
   15164:	e0c11081 	sbc	r1, r1, r1, lsl #1
   15168:	e3530000 	cmp	r3, #0
   1516c:	ba000011 	blt	151b8 <__aeabi_ldivmod+0xb0>
   15170:	eb000031 	bl	1523c <__udivmoddi4>
   15174:	e59de004 	ldr	lr, [sp, #4]
   15178:	e28dd008 	add	sp, sp, #8
   1517c:	e8bd000c 	pop	{r2, r3}
   15180:	e2700000 	rsbs	r0, r0, #0
   15184:	e0c11081 	sbc	r1, r1, r1, lsl #1
   15188:	e2722000 	rsbs	r2, r2, #0
   1518c:	e0c33083 	sbc	r3, r3, r3, lsl #1
   15190:	e12fff1e 	bx	lr
   15194:	e2722000 	rsbs	r2, r2, #0
   15198:	e0c33083 	sbc	r3, r3, r3, lsl #1
   1519c:	eb000026 	bl	1523c <__udivmoddi4>
   151a0:	e59de004 	ldr	lr, [sp, #4]
   151a4:	e28dd008 	add	sp, sp, #8
   151a8:	e8bd000c 	pop	{r2, r3}
   151ac:	e2700000 	rsbs	r0, r0, #0
   151b0:	e0c11081 	sbc	r1, r1, r1, lsl #1
   151b4:	e12fff1e 	bx	lr
   151b8:	e2722000 	rsbs	r2, r2, #0
   151bc:	e0c33083 	sbc	r3, r3, r3, lsl #1
   151c0:	eb00001d 	bl	1523c <__udivmoddi4>
   151c4:	e59de004 	ldr	lr, [sp, #4]
   151c8:	e28dd008 	add	sp, sp, #8
   151cc:	e8bd000c 	pop	{r2, r3}
   151d0:	e2722000 	rsbs	r2, r2, #0
   151d4:	e0c33083 	sbc	r3, r3, r3, lsl #1
   151d8:	e12fff1e 	bx	lr

000151dc <__aeabi_uldivmod>:
   151dc:	e3530000 	cmp	r3, #0
   151e0:	03520000 	cmpeq	r2, #0
   151e4:	1a000004 	bne	151fc <__aeabi_uldivmod+0x20>
   151e8:	e3510000 	cmp	r1, #0
   151ec:	03500000 	cmpeq	r0, #0
   151f0:	13e01000 	mvnne	r1, #0
   151f4:	13e00000 	mvnne	r0, #0
   151f8:	eaffffc1 	b	15104 <__aeabi_idiv0>
   151fc:	e24dd008 	sub	sp, sp, #8
   15200:	e92d6000 	push	{sp, lr}
   15204:	eb00000c 	bl	1523c <__udivmoddi4>
   15208:	e59de004 	ldr	lr, [sp, #4]
   1520c:	e28dd008 	add	sp, sp, #8
   15210:	e8bd000c 	pop	{r2, r3}
   15214:	e12fff1e 	bx	lr

00015218 <__paritysi2>:
   15218:	e0200820 	eor	r0, r0, r0, lsr #16
   1521c:	e0200420 	eor	r0, r0, r0, lsr #8
   15220:	e59f3010 	ldr	r3, [pc, #16]	; 15238 <__paritysi2+0x20>
   15224:	e0200220 	eor	r0, r0, r0, lsr #4
   15228:	e200000f 	and	r0, r0, #15
   1522c:	e1a00053 	asr	r0, r3, r0
   15230:	e2000001 	and	r0, r0, #1
   15234:	e12fff1e 	bx	lr
   15238:	00006996 	.word	0x00006996

0001523c <__udivmoddi4>:
   1523c:	e1510003 	cmp	r1, r3
   15240:	01500002 	cmpeq	r0, r2
   15244:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15248:	e1a04000 	mov	r4, r0
   1524c:	33a00000 	movcc	r0, #0
   15250:	e1a05001 	mov	r5, r1
   15254:	e59de024 	ldr	lr, [sp, #36]	; 0x24
   15258:	31a01000 	movcc	r1, r0
   1525c:	3a00003d 	bcc	15358 <__udivmoddi4+0x11c>
   15260:	e3530000 	cmp	r3, #0
   15264:	016fcf12 	clzeq	ip, r2
   15268:	116fcf13 	clzne	ip, r3
   1526c:	028cc020 	addeq	ip, ip, #32
   15270:	e3550000 	cmp	r5, #0
   15274:	016f1f14 	clzeq	r1, r4
   15278:	02811020 	addeq	r1, r1, #32
   1527c:	116f1f15 	clzne	r1, r5
   15280:	e04cc001 	sub	ip, ip, r1
   15284:	e1a09c13 	lsl	r9, r3, ip
   15288:	e24cb020 	sub	fp, ip, #32
   1528c:	e1899b12 	orr	r9, r9, r2, lsl fp
   15290:	e26ca020 	rsb	sl, ip, #32
   15294:	e1899a32 	orr	r9, r9, r2, lsr sl
   15298:	e1a08c12 	lsl	r8, r2, ip
   1529c:	e1550009 	cmp	r5, r9
   152a0:	01540008 	cmpeq	r4, r8
   152a4:	33a00000 	movcc	r0, #0
   152a8:	31a01000 	movcc	r1, r0
   152ac:	3a000005 	bcc	152c8 <__udivmoddi4+0x8c>
   152b0:	e3a00001 	mov	r0, #1
   152b4:	e1a01b10 	lsl	r1, r0, fp
   152b8:	e0544008 	subs	r4, r4, r8
   152bc:	e1811a30 	orr	r1, r1, r0, lsr sl
   152c0:	e1a00c10 	lsl	r0, r0, ip
   152c4:	e0c55009 	sbc	r5, r5, r9
   152c8:	e35c0000 	cmp	ip, #0
   152cc:	0a000021 	beq	15358 <__udivmoddi4+0x11c>
   152d0:	e1a060a8 	lsr	r6, r8, #1
   152d4:	e1866f89 	orr	r6, r6, r9, lsl #31
   152d8:	e1a070a9 	lsr	r7, r9, #1
   152dc:	e1a0200c 	mov	r2, ip
   152e0:	ea000007 	b	15304 <__udivmoddi4+0xc8>
   152e4:	e0543006 	subs	r3, r4, r6
   152e8:	e0c58007 	sbc	r8, r5, r7
   152ec:	e0933003 	adds	r3, r3, r3
   152f0:	e0a88008 	adc	r8, r8, r8
   152f4:	e2934001 	adds	r4, r3, #1
   152f8:	e2a85000 	adc	r5, r8, #0
   152fc:	e2522001 	subs	r2, r2, #1
   15300:	0a000006 	beq	15320 <__udivmoddi4+0xe4>
   15304:	e1550007 	cmp	r5, r7
   15308:	01540006 	cmpeq	r4, r6
   1530c:	2afffff4 	bcs	152e4 <__udivmoddi4+0xa8>
   15310:	e0944004 	adds	r4, r4, r4
   15314:	e0a55005 	adc	r5, r5, r5
   15318:	e2522001 	subs	r2, r2, #1
   1531c:	1afffff8 	bne	15304 <__udivmoddi4+0xc8>
   15320:	e1a03c34 	lsr	r3, r4, ip
   15324:	e1833a15 	orr	r3, r3, r5, lsl sl
   15328:	e1a02c35 	lsr	r2, r5, ip
   1532c:	e1833b35 	orr	r3, r3, r5, lsr fp
   15330:	e0900004 	adds	r0, r0, r4
   15334:	e1a04003 	mov	r4, r3
   15338:	e1a03c12 	lsl	r3, r2, ip
   1533c:	e1833b14 	orr	r3, r3, r4, lsl fp
   15340:	e1a0cc14 	lsl	ip, r4, ip
   15344:	e1833a34 	orr	r3, r3, r4, lsr sl
   15348:	e0a11005 	adc	r1, r1, r5
   1534c:	e050000c 	subs	r0, r0, ip
   15350:	e1a05002 	mov	r5, r2
   15354:	e0c11003 	sbc	r1, r1, r3
   15358:	e35e0000 	cmp	lr, #0
   1535c:	11ce40f0 	strdne	r4, [lr]
   15360:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
